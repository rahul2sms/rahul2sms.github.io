/*! For license information please see e81ec0c59a9909986fb347f42dca4c43da55c2dd-a90b4f86492219af9257.js.LICENSE.txt */
(self.webpackChunkgatsby_starter_hello_world=self.webpackChunkgatsby_starter_hello_world||[]).push([[154],{8166:function(e,t,n){"use strict";n.d(t,{H:function(){return s}});var r=n(8081);function s(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}},3628:function(e,t,n){"use strict";n.d(t,{bk:function(){return a},fC:function(){return i}});var r=n(8081),s=n(8166);function a(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const i={kernelName:r.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;(0,s.H)(t,"abs");let i=new Float32Array(r.util.sizeFromShape(t.shape));return i=a(n.data.get(t.dataId).values),n.makeOutput(i,t.shape,t.dtype)}}},2779:function(e,t,n){"use strict";n.d(t,{EH:function(){return i},IH:function(){return u},j4:function(){return c}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e+t)),o=(0,a.H)(((e,t,n,r)=>({real:e+n,imag:t+r}))),u=(0,a.j)(r.Add,i,o),c={kernelName:r.Add,backendName:"cpu",kernelFunc:u}},8607:function(e,t,n){"use strict";n.d(t,{W:function(){return s},i:function(){return a}});var r=n(8081);function s(e,t,n,s,a){const i=r.util.sizeFromShape(s),o=r.util.makeZerosTypedArray(a,n);for(let r=0;r<e.length;r++){const n=e[r];if(n<0)throw new Error("Input x must be non-negative!");n>=a||(o[n]+=i>0?t[r]:1)}return o}function a(e,t,n,s=!1){const a=e.shape[0],i=e.shape[1],o=(0,r.buffer)([a,n],t.dtype);for(let r=0;r<a;r++)for(let a=0;a<i;a++){const i=e.get(r,a);if(i<0)throw new Error("Input x must be non-negative!");i>=n||(s?o.set(1,r,i):t.size>0?o.set(o.get(r,i)+t.get(r,a),r,i):o.set(o.get(r,i)+1,r,i))}return o}},5003:function(e,t,n){"use strict";n.d(t,{T0:function(){return u},nv:function(){return i}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e&t)),o=(0,a.j)(r.BitwiseAnd,i),u={kernelName:r.BitwiseAnd,backendName:"cpu",kernelFunc:o}},9258:function(e,t,n){"use strict";n.d(t,{Mq:function(){return d},pj:function(){return l},sJ:function(){return c}});var r=n(8081),s=n(3533),a=n(9486),i=n(6961),o=n(1775),u=n(2186);function c(e,t,n,a){if("int32"===a){return[t,"int32",Int32Array.from(e)]}if("bool"===a){const a=r.util.toTypedArray([0],n),[i,o]=(0,s.b)(((e,t)=>e!==t?1:0))(t,[],e,a,"bool");return[o,"bool",i]}throw new Error(`Error in Cast: failed to cast ${n} to ${a}`)}function l(e){const{inputs:t,backend:n,attrs:s}=e,{x:d}=t,{dtype:p}=s;if("complex64"===p){if("complex64"===d.dtype)return(0,o.y)({inputs:{x:d},backend:n});const e=(0,a.l)(n,d.shape,d.dtype),t=l({inputs:{x:d},backend:n,attrs:{dtype:"float32"}}),r=(0,i.P)({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===d.dtype){const e=(0,u.k)({inputs:{input:d},backend:n}),t=l({inputs:{x:e},backend:n,attrs:{dtype:p}});return n.disposeIntermediateTensorInfo(e),t}if(!r.util.hasEncodingLoss(d.dtype,p)){const e=(0,o.y)({inputs:{x:d},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:p}}const h=n.data.get(d.dataId).values,[f,m,g]=c(h,d.shape,d.dtype,p);return n.makeTensorInfo(f,m,g)}const d={kernelName:r.Cast,backendName:"cpu",kernelFunc:l}},4769:function(e,t,n){"use strict";n.d(t,{__:function(){return i},y2:function(){return u}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>Math.ceil(e))),o=(0,a.O)(r.Ceil,i),u={kernelName:r.Ceil,backendName:"cpu",kernelFunc:o}},6961:function(e,t,n){"use strict";function r(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}n.d(t,{P:function(){return r},z:function(){return s}});const s={kernelName:n(8081).Complex,backendName:"cpu",kernelFunc:r}},8926:function(e,t,n){"use strict";n.d(t,{j:function(){return s}});var r=n(8081);function s(e,t,n,s){const a=r.util.getArrayFromDType(n,r.util.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=r.util.sizeFromShape(e.shape);a.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const i="string"===n?r.backend_util.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const r=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[r+t]=i[o++]}s+=e.shape[1]}))}return a}},7679:function(e,t,n){"use strict";n.d(t,{Dg:function(){return o},Kx:function(){return u},tW:function(){return i}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e===t?1:0)),o=(0,a.j)(r.Equal,i,null,"bool"),u={kernelName:r.Equal,backendName:"cpu",kernelFunc:o}},1211:function(e,t,n){"use strict";n.d(t,{Qq:function(){return o},Ro:function(){return i},SX:function(){return u}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>Math.exp(e))),o=(0,a.O)(r.Exp,i,"float32"),u={kernelName:r.Exp,backendName:"cpu",kernelFunc:o}},969:function(e,t,n){"use strict";n.d(t,{OF:function(){return i},Vu:function(){return u}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>Math.expm1(e))),o=(0,a.O)(r.Expm1,i),u={kernelName:r.Expm1,backendName:"cpu",kernelFunc:o}},6574:function(e,t,n){"use strict";n.d(t,{Ao:function(){return u},r6:function(){return i}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>Math.floor(e))),o=(0,a.O)(r.Floor,i),u={kernelName:r.Floor,backendName:"cpu",kernelFunc:o}},1820:function(e,t,n){"use strict";n.d(t,{m:function(){return s}});var r=n(8081);function s(e,t,n,s,a,i,o,u,c){const l=(0,r.buffer)([s,i],n);for(let r=0;r<s;r++){const n=[];let s=0;for(let t=0;t<a;t++){const i=e[r*a+t];s+=i*o[t],n.push(i)}if(s<0||s>=c/i)throw new Error(`Invalid indices: ${n} does not index into ${u}`);for(let e=0;e<i;e++)l.values[r*i+e]=t.get(...t.indexToLoc(s*i+e))}return l}},4468:function(e,t,n){"use strict";n.d(t,{i:function(){return s}});var r=n(8081);function s(e,t,n){const s=(0,r.buffer)(n,e.dtype);for(let r=0;r<s.size;++r){const n=s.indexToLoc(r).slice(),a=n[0],i=n[2],o=t.locToIndex([a,i]);n[2]=t.values[o];const u=e.locToIndex(n);0<=u&&u<e.values.length&&(s.values[r]=e.values[u])}return s}},6272:function(e,t,n){"use strict";n.d(t,{Ce:function(){return u},o:function(){return i}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e>t?1:0)),o=(0,a.j)(r.Greater,i,null,"bool"),u={kernelName:r.Greater,backendName:"cpu",kernelFunc:o}},6259:function(e,t,n){"use strict";n.d(t,{HL:function(){return i},V:function(){return u}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e>=t?1:0)),o=(0,a.j)(r.GreaterEqual,i,null,"bool"),u={kernelName:r.GreaterEqual,backendName:"cpu",kernelFunc:o}},1775:function(e,t,n){"use strict";function r(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}n.d(t,{I:function(){return s},y:function(){return r}});const s={kernelName:n(8081).Identity,backendName:"cpu",kernelFunc:r}},8405:function(e,t,n){"use strict";n.d(t,{rO:function(){return i},zh:function(){return u}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e<t?1:0)),o=(0,a.j)(r.Less,i,null,"bool"),u={kernelName:r.Less,backendName:"cpu",kernelFunc:o}},635:function(e,t,n){"use strict";n.d(t,{lx:function(){return i},m3:function(){return u}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e<=t?1:0)),o=(0,a.j)(r.LessEqual,i,null,"bool"),u={kernelName:r.LessEqual,backendName:"cpu",kernelFunc:o}},1325:function(e,t,n){"use strict";n.d(t,{b:function(){return s}});var r=n(8081);function s(e,t,n){const s=(t-e)/(n-1),a=r.util.makeZerosTypedArray(n,"float32");a[0]=e;for(let r=1;r<a.length;r++)a[r]=a[r-1]+s;return a}},5223:function(e,t,n){"use strict";n.d(t,{vX:function(){return i},xM:function(){return u}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>Math.log(e))),o=(0,a.O)(r.Log,i),u={kernelName:r.Log,backendName:"cpu",kernelFunc:o}},5126:function(e,t,n){"use strict";n.d(t,{B:function(){return s}});var r=n(8081);function s(e,t,n,s){const a=r.util.getTypedArrayFromDType(s,r.util.sizeFromShape(n));for(let r=0;r<a.length;++r){const n=r*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];(Number.isNaN(t)||t>s)&&(s=t)}a[r]=s}return a}},1717:function(e,t,n){"use strict";n.d(t,{eJ:function(){return u},wS:function(){return i}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>Math.max(e,t))),o=(0,a.j)(r.Maximum,i),u={kernelName:r.Maximum,backendName:"cpu",kernelFunc:o}},612:function(e,t,n){"use strict";n.d(t,{u0:function(){return u},vP:function(){return i}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>Math.min(e,t))),o=(0,a.j)(r.Minimum,i),u={kernelName:r.Minimum,backendName:"cpu",kernelFunc:o}},1917:function(e,t,n){"use strict";n.d(t,{$3:function(){return i},Jp:function(){return u},f$:function(){return c}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e*t)),o=(0,a.H)(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),u=(0,a.j)(r.Multiply,i,o),c={kernelName:r.Multiply,backendName:"cpu",kernelFunc:u}},854:function(e,t,n){"use strict";n.d(t,{AF:function(){return o},uC:function(){return i}});var r=n(8081),s=n(8166),a=n(1917);function i(e,t,n){const s=r.util.createScalarValue(-1,n);return(0,a.$3)([],t,s,e,n)}const o={kernelName:r.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;(0,s.H)(r,"neg");const a=n.data.get(r.dataId).values,[o,u]=i(a,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,o)}}},8584:function(e,t,n){"use strict";n.d(t,{Gj:function(){return i},nP:function(){return u}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e!==t?1:0)),o=(0,a.j)(r.NotEqual,i,null,"bool"),u={kernelName:r.NotEqual,backendName:"cpu",kernelFunc:o}},9560:function(e,t,n){"use strict";n.d(t,{Iz:function(){return o},Qg:function(){return i}});var r=n(8081),s=n(8166),a=n(4802);function i(e,t,n,s){const[a,i]=r.backend_util.computeOutAndReduceShapes(e,s),o=(0,r.upcastType)(t,"int32"),u=r.util.makeZerosTypedArray(r.util.sizeFromShape(a),o),c=r.util.sizeFromShape(i);for(let r=0;r<u.length;++r){const e=r*c;let t=1;for(let r=0;r<c;++r)t*=n[e+r];u[r]=t}return{outVals:u,outShape:a,outDtype:o}}const o={kernelName:r.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:u}=t,{axis:c,keepDims:l}=o;(0,s.H)(u,"prod");const d=u.shape.length,p=r.util.parseAxisParam(c,u.shape),h=r.backend_util.getAxesPermutation(p,d);let f=p,m=u;const g=[];null!=h&&(m=(0,a.p)({inputs:{x:u},backend:n,attrs:{perm:h}}),g.push(m),f=r.backend_util.getInnerMostAxes(f.length,d));const y=n.data.get(m.dataId).values,{outVals:b,outShape:x,outDtype:v}=i(m.shape,m.dtype,y,f);let w=x;return l&&(w=r.backend_util.expandShapeToKeepDim(x,p)),g.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(w,v,b)}}},9885:function(e,t,n){"use strict";n.d(t,{c:function(){return o}});var r=n(8081);function s(e,t,n,r){const s=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let c=0;c<t.length-1;++c){u*=t[c];const e=t[c+1];for(let t=1;t<u+1;++t)o[c].push(t*e)}for(let c=0;c<e.length;++c){let r=e[c],i=e[c]+1;for(let e=0;e<n.length;++e){const s=n[e],a=e+t.length-1;if(a>=0){const e=o[a],t=e[e.length-1]-s[r];for(let n=r;n<i;++n)o[a].push(s[n+1]+t)}r=s[r],i=s[i]}i!==r&&(s.push([r,i]),a+=i-r)}return{outSplits:o,valueSlices:s,numValues:a}}function a(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function i(e,t,n,s,i){const o=t.slice();o[0]=i;const u=r.util.getArrayFromDType(n,r.util.sizeFromShape(o)),c=e.length;return function(e,t,n,r,s,i){const o=a(t,2)[1],u=a(i,2)[1];let c=0;for(const a of n)for(let t=a[0];t<a[1];++t){for(let n=0;n<r;++n)s[c*u+n]=e[t*o+n];++c}}(e,t,s,0===c?0:c/t[0],u,o),[u,o]}function o(e,t,n,a,o,u,c,l){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const a=r.util.indexToLoc(s,t.length,r.util.computeStrides(t)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${n})`)}}))}(u,c,t[0][0]-1),0===a.length)throw new Error("params.rank must be nonzero");const d=a[0],{outSplits:p,valueSlices:h,numValues:f}=s(u,c,e,d),m=function(e){const t=[];for(let n=0;n<e.length;++n){const s=e[n].length,a=r.util.getArrayFromDType("int32",s);t.push(a),e[n].forEach(((e,t)=>a[t]=e))}return t}(p),g=i(n,a,o,h,f);return[m,g[0],g[1]]}},6486:function(e,t,n){"use strict";n.d(t,{S:function(){return a}});var r=n(8081);const s=2147483647;function a(e,t,n,a,i,o,u){if(t.length>1)throw new Error("starts must be a scalar or vector");if(i.length>1)throw new Error("limits must be a scalar or vector");if(u.length>1)throw new Error("deltas must be a scalar or vector");const c=0===t.length,l=0===i.length,d=0===u.length,p=[];c||p.push(t[0]),l||p.push(i[0]),d||p.push(u[0]);for(let r=1;r<p.length;++r)if(p[r]!==p[r-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===p.length?1:p[0],f=r.util.getArrayFromDType("int32",h+1);f[0]=0;for(let r=0;r<h;++r){const t=c?e[0]:e[r],n=l?a[0]:a[r],i=d?o[0]:o[r];if(0===i)throw new Error("Requires delta != 0");let u;if(i>0&&n<t||i<0&&n>t)u=0;else if(u=Math.ceil(Math.abs((n-t)/i)),u>s)throw new Error(`Requires ((limit - start) / delta) <= ${s}`);f[r+1]=f[r]+u}const m=f[h],g=r.util.getArrayFromDType(n,m);let y=0;for(let r=0;r<h;++r){const t=f[r+1]-f[r];let n=c?e[0]:e[r];const s=d?o[0]:o[r];for(let e=0;e<t;++e)g[y++]=n,n+=s}return[f,g]}},8306:function(e,t,n){"use strict";n.d(t,{p:function(){return u}});var r=n(8081),s=r.backend_util.RowPartitionType;class a{constructor(e,t,n,s,a,i,o,u,c,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=o,this.rowPartitionValues=u,this.rowPartitionValuesShapes=c,this.rowPartitionTypes=r.backend_util.getRowPartitionTypesHelper(l),this.raggedRank=r.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===s.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===s.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case s.VALUE_ROWIDS:return a.getMaxWidthValueRowID(t);case s.ROW_SPLITS:return a.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${s[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return o(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;r.backend_util.validateDefaultValueShape(n,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=r.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,s,t);a[0]<0&&(a[0]=e);for(let r=1;r<=this.raggedRank;++r)a[r]<0&&(a[r]=this.getMaxWidth(r));return a}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),a=[];let i=0;for(let r=0;r<s;++r,i+=t)a.push(i);for(let r=s;r<e;++r)a.push(-1);return r.util.assert(a.length===e,(()=>"Final length of result must be equal to firstDimension.")),a}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let i=0;i<s-1;++i){const s=e[i+1]-e[i];let o=Math.min(r,s),u=t[i];-1===u&&(o=0);for(let e=0;e<o;++e)a.push(u),u+=n;for(let e=0;e<s-o;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];a.push(u);for(let c=1;c<s;++c){const s=e[c];if(s===o)u>=0&&(++i,i<r?u+=n:u=-1);else{if(i=0,o=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const a=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case s.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,r);case s.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,r);default:throw new Error(`Unsupported partition type: ${s[i]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case s.FIRST_DIM_SIZE:return e[0];case s.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case s.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${s[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let r=n.length-2;r>=0;--r)n[r]=n[r+1]*t[r+1];const s=o(t,!1),a=r.util.getArrayFromDType(this.valuesDType,r.util.sizeFromShape(s));if(n[0]*t[0]>0){let r=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){r=this.calculateOutputIndex(e-1,r,n[e],t[e])}this.setOutput(this.raggedRank,r,a,s)}return[s,a]}setOutput(e,t,n,s){if(0===n.length)return;const a=this.values,o=n;let u=s.slice();u=u.slice(e+1);const c=r.util.sizeFromShape(u),l=t.length;let d=this.defaultValue;if(d.length!==c&&1!==d.length){const e=this.defaultValueShape;(0,r.tidy)((()=>{const t=(0,r.reshape)(d,e),n=(0,r.broadcastTo)(t,u);d=n.dataSync()}))}let p=0,h=0,f=0;for(let r=0;r<=l;++r){let e=r<l?t[r]:-1;if(e!==f){if(h<f){const e=a.subarray(p*c);i(o.subarray(h*c),e,(f-h)*c)}if(r>=l){const t=n.length;e=Math.floor(t/c)}if(e>f)if(1===this.defaultValue.length)o.subarray(f*c,e*c).fill(this.defaultValue[0]),f=e;else for(;e>f;){i(o.slice(f*c),d,c),++f}e<0?(p=r+1,h=f):(p=r,h=f,f=h+1)}else++f}}}function i(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function o(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function u(e,t,n,r,s,i,o,u,c,l){return new a(e,t,n,r,s,i,o,u,c,l).compute()}},9230:function(e,t,n){"use strict";n.d(t,{b:function(){return s}});var r=n(8081);function s(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return r.util.makeZerosTypedArray(0,s);const a=Math.abs(Math.ceil((t-e)/n)),i=r.util.makeZerosTypedArray(a,s);t<e&&1===n&&(n=-1),i[0]=e;for(let r=1;r<i.length;r++)i[r]=i[r-1]+n;return i}},2186:function(e,t,n){"use strict";function r(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}n.d(t,{O:function(){return s},k:function(){return r}});const s={kernelName:n(8081).Real,backendName:"cpu",kernelFunc:r}},7742:function(e,t,n){"use strict";n.d(t,{FY:function(){return u},zd:function(){return i}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>1/Math.sqrt(e))),o=(0,a.O)(r.Rsqrt,i),u={kernelName:r.Rsqrt,backendName:"cpu",kernelFunc:o}},1:function(e,t,n){"use strict";n.d(t,{N:function(){return s}});var r=n(8081);function s(e,t,n,s,a,i,o,u,c,l){const d=[s/a,a],p=e.values,h=t.values;if(0===s)return(0,r.buffer)(n,t.dtype);const f=c instanceof r.TensorBuffer?c:(0,r.buffer)(d,t.dtype);"string"==typeof c||"number"==typeof c?f.values.fill(c):"boolean"==typeof c&&f.values.fill(+c);for(let r=0;r<i;r++){const e=[];let i=0;for(let t=0;t<o;t++){const n=p[r*o+t];e.push(n),i+=n*u[t]}if(i<0||i>=s/a)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<a;n++)l?f.values[i*a+n]+=h[r*a+n]:f.values[i*a+n]=0===t.rank?h[0]:h[r*a+n]}return f}},108:function(e,t,n){"use strict";n.d(t,{BP:function(){return u},VY:function(){return i},XD:function(){return o}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>1/(1+Math.exp(-e)))),o=(0,a.A)(r.Sigmoid,(e=>1/(1+Math.exp(-e)))),u={kernelName:r.Sigmoid,backendName:"cpu",kernelFunc:o}},2578:function(e,t,n){"use strict";n.d(t,{C6:function(){return o},rT:function(){return a},tP:function(){return i}});var r=n(8081),s=n(8166);function a(e,t,n,s,a){const i=r.slice_util.isSliceContinous(s,t,n),o=r.util.sizeFromShape(n),u=r.util.computeStrides(s);if(i){const n=r.slice_util.computeFlatOffset(t,u);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const c="string"===a?r.backend_util.fromUint8ToStringArray(e):e,l=(0,r.buffer)(s,a,c),d=(0,r.buffer)(n,a);for(let r=0;r<d.size;++r){const e=d.indexToLoc(r),n=e.map(((e,n)=>e+t[n]));d.set(l.get(...n),...e)}return"string"===a?r.backend_util.fromStringArrayToUint8(d.values):d.values}function i(e){const{inputs:t,backend:n,attrs:i}=e,{x:o}=t,{begin:u,size:c}=i;(0,s.H)(o,"slice");const[l,d]=r.slice_util.parseSliceParams(o,u,c);r.slice_util.assertParamsValid(o,l,d);const p=a(n.data.get(o.dataId).values,l,d,o.shape,o.dtype);return n.makeTensorInfo(d,o.dtype,p)}const o={kernelName:r.Slice,backendName:"cpu",kernelFunc:i}},2123:function(e,t,n){"use strict";n.d(t,{c:function(){return s}});var r=n(8081);function s(e,t,n,s,a,i,o){const u=t[0],c=i[0],l=new Array(c),d=new Array(u),p=t[1];if(0===c){if(0!==u)throw new Error(r.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[r.util.getArrayFromDType(n,0),[0,p],r.util.getArrayFromDType(a,0),l,d]}let h=!0,f=0;const m=new Array(c).fill(0);for(let y=0;y<u;++y){const t=e[y*p];if(t<0)throw new Error(r.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(y,t));if(t>=c)throw new Error(r.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(y,t,c));++m[t],h=h&&t>=f,f=t}let g=!0;for(let r=0;r<c;++r){const e=0===m[r];l[r]=e,g=g&&!e,m[r]=Math.max(m[r],1),r>0&&(m[r]+=m[r-1])}if(g&&h){const t=e,n=s;for(let e=0;e<u;++e)d[e]=e;return[t,[u,p],n,l,d]}{const t=m[c-1],i=r.util.getArrayFromDType(n,t*p),h=r.util.getArrayFromDType(a,t),f=new Array(c).fill(0);for(let n=0;n<u;++n){const t=e[n*p],r=f[t],a=(0===t?0:m[t-1])+r;f[t]++;for(let s=0;s<p;++s)i[a*p+s]=e[n*p+s];h[a]=s[n],d[n]=a}for(let e=0;e<c;++e){if(0===f[e]){const t=0===e?0:m[e-1];i[t*p+0]=e;for(let e=1;e<p;++e)i[t*p+e]=0;h[t]=o}}return[i,[t,p],h,l,d]}}},3849:function(e,t,n){"use strict";n.d(t,{U:function(){return s}});var r=n(8081);function s(e,t,n,s,a){const i=r.util.sizeFromShape(s),o=t[0],u=a.length,c=[];let l=1,d=-1;for(let g=0;g<u;++g){const e=a[g];if(-1===e){if(-1!==d)throw new Error(r.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(d,g));d=g,c.push(1)}else{if(e<0)throw new Error(r.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(g,e));l*=e,c.push(e)}}if(-1!==d){if(l<=0)throw new Error(r.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(i/l);if(l*e!==i)throw new Error(r.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(s,c));c[d]=e}if(r.util.sizeFromShape(c)!==i)throw new Error(r.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(s,c));const p=s.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*s[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*c[e+1]}const m=r.util.getArrayFromDType(n,o*u);for(let r=0;r<o;++r){let t=0;for(let n=0;n<p;++n)t+=e[r*p+n]*h[n];for(let e=0;e<u;++e)m[r*u+e]=Math.trunc(t/f[e]),t%=f[e]}return[m,[o,u],c]}},3989:function(e,t,n){"use strict";n.d(t,{V:function(){return s}});var r=n(8081);function s(e,t,n,s,a,i=!1,o=0){const u=s.length,c=[t[0],e.length/t[0]],l=c[1],d=u>0?a[u-1]+1:0;if(d<0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=d;const h=p.reduce(((e,t)=>e*t),1),f=r.util.getArrayFromDType(n,h);if(0===u)return d>0&&f.fill(o),[f,p];if(d<=0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,y=0,b=a[m];for(;;){let t=0;if(g<u){if(t=a[g],b===t){++g;continue}if(b>=t)throw new Error(r.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=d)throw new Error(r.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,d));b>y&&f.fill(o,y*l,b*l);for(let n=m;n<g;++n){const t=s[n];if(t<0||t>=c[0])throw new Error(r.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,s[n],c[0]));for(let n=0;n<l;n++)f[b*l+n]+=e[t*l+n]}if(i)for(let e=0;e<l;e++)f[b*l+e]/=g-m;if(m=g,++g,y=b+1,b=t,g>u)break}return y<d&&f.fill(o,y*l,d*l),[f,p]}},440:function(e,t,n){"use strict";n.d(t,{cz:function(){return u},zT:function(){return i}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)((e=>Math.sqrt(e))),o=(0,a.A)(r.Sqrt,(e=>Math.sqrt(e))),u={kernelName:r.Sqrt,backendName:"cpu",kernelFunc:o}},7693:function(e,t,n){"use strict";n.d(t,{P:function(){return i},j:function(){return u}});var r=n(8081),s=n(8029),a=n(6738);const i=(0,s.a)(((e,t)=>{const{pattern:n,replaceGlobal:r,rewrite:s}=t;return e.replace(new RegExp(n,r?"g":""),s)})),o=(0,a.O)(r.StaticRegexReplace,i),u={kernelName:r.StaticRegexReplace,backendName:"cpu",kernelFunc:o}},2210:function(e,t,n){"use strict";n.d(t,{t:function(){return s}});var r=n(8081);function s(e,t,n,s){const a=(0,r.buffer)(e,t.dtype);for(let r=0;r<a.size;r++){const e=a.indexToLoc(r),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+s[t];a.set(t.get(...i),...e)}return a}},6841:function(e,t,n){"use strict";n.d(t,{A:function(){return a}});var r=n(8081);class s{constructor(e,t,n,s,a,i){this.separator=r.util.encodeString(e),this.nGramWidths=t,this.leftPad=r.util.encodeString(n),this.rightPad=r.util.encodeString(s),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let i=0;i<s;++i){const o=this.getPadWidth(a),u=Math.max(0,o-i),c=Math.max(0,o-(s-(i+1))),l=a-(u+c),d=t+(u>0?0:i-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<l;++t)p+=e[d+t].length;p+=c*this.rightPad.length;p+=(u+c+l-1)*this.separator.length,n[r+i]=new Uint8Array(p);const h=n[r+i];let f=0;const m=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<l-1;++t)m(e[d+t]),m(this.separator);if(l>0){m(e[d+l-1]);for(let e=0;e<c;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<c-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,i=r.util.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let t=0;t<=a;++t)i[t]=0;return[e,i]}i[0]=0;for(let r=1;r<=a;++r){const e=t[r]-t[r-1];let n=0;this.nGramWidths.forEach((t=>{n+=this.getNumNGrams(e,t)})),this.preserveShort&&e>0&&0===n&&(n=1),i[r]=i[r-1]+n}const o=new Array(i[a]);for(let r=0;r<a;++r){const n=t[r];let s=i[r];if(this.nGramWidths.forEach((a=>{const i=t[r+1]-t[r],u=this.getNumNGrams(i,a);this.createNGrams(e,n,o,s,u,a),s+=u})),this.preserveShort&&s===i[r]){const a=t[r+1]-t[r];if(0===a)continue;const i=a+2*this.padWidth,u=1;this.createNGrams(e,n,o,s,u,i)}}return[o,i]}}function a(e,t,n,r,a,i,o,u){return new s(n,r,a,i,o,u).compute(e,t)}},8639:function(e,t,n){"use strict";n.d(t,{Q:function(){return a}});var r=n(8081);function s(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function a(e,t,n){const a=e.length,i=[];let o=0,u=0;const c=new Array(a);for(let r=0;r<a;++r){const a=i.length;s(e[r],t,n,i);const l=i.length-a;c[r]=l,o+=l,u=Math.max(u,l)}const l=r.util.getArrayFromDType("int32",2*o),d=new Array(o),p=[a,u];let h=0;for(let r=0;r<a;++r)for(let e=0;e<c[r];++e)l[2*h]=r,l[2*h+1]=e,d[h]=i[h],++h;return[l,d,p]}},6626:function(e,t,n){"use strict";n.d(t,{h:function(){return s}});var r=n(8081);function s(e,t){const n=r.util.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=r.util.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}},1649:function(e,t,n){"use strict";n.d(t,{GR:function(){return c},VY:function(){return i},lu:function(){return u}});var r=n(8081),s=n(3533),a=n(6205);const i=(0,s.b)(((e,t)=>e-t)),o=(0,a.H)(((e,t,n,r)=>({real:e-n,imag:t-r}))),u=(0,a.j)(r.Sub,i,o),c={kernelName:r.Sub,backendName:"cpu",kernelFunc:u}},7723:function(e,t,n){"use strict";n.d(t,{R:function(){return s}});var r=n(8081);function s(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const s=(0,r.buffer)(n,e.dtype);for(let r=0;r<s.values.length;++r){const t=s.indexToLoc(r),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const a=e.locToIndex(n);s.values[r]=e.values[a]}return s}},9556:function(e,t,n){"use strict";n.d(t,{W:function(){return i}});var r=n(8081);const s=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function a(e,t,n=0,i=e.length-1){for(;i>n;){if(i-n>600){const r=i-n+1,s=t-n+1,o=Math.log(r),u=.5*Math.exp(2*o/3),c=.5*Math.sqrt(o*u*(r-u)/r)*Math.sign(s-r/2);a(e,t,Math.max(n,Math.floor(t-s*u/r+c)),Math.min(i,Math.floor(t+(r-s)*u/r+c)))}const o=e[t];let u=n,c=i;for(r.util.swap(e,n,t),s(e[i],o)>0&&r.util.swap(e,n,i);u<c;){for(r.util.swap(e,u,c),u++,c--;s(e[u],o)<0;)u+=1;for(;s(e[c],o)>0;)c-=1}0===s(e[n],o)?r.util.swap(e,n,c):(c+=1,r.util.swap(e,c,i)),c<=t&&(n=c+1),t<=c&&(i=c-1)}}function i(e,t,n,i,o){const u=t[t.length-1],[c,l]=[e.length/u,u],d=r.util.getTypedArrayFromDType(n,c*i),p=r.util.getTypedArrayFromDType("int32",c*i);for(let r=0;r<c;r++){const t=r*l,n=e.subarray(t,t+l);let u=new Array(n.length);n.forEach(((e,t)=>u[t]={value:e,index:t})),i<u.length&&(a(u,i),u=u.slice(0,i)),o&&u.sort(s);const c=r*i,h=d.subarray(c,c+i),f=p.subarray(c,c+i);for(let e=0;e<i;e++)h[e]=u[e].value,f[e]=u[e].index}const h=t.slice();return h[h.length-1]=i,[(0,r.buffer)(h,n,d),(0,r.buffer)(h,"int32",p)]}},4802:function(e,t,n){"use strict";n.d(t,{b:function(){return o},p:function(){return i}});var r=n(8081),s=n(8166),a=n(7107);function i(e){const{inputs:t,attrs:n,backend:r}=e,{x:i}=t,{perm:o}=n;(0,s.H)(i,"transpose");const u=i.shape.length,c=new Array(u);for(let s=0;s<c.length;s++)c[s]=i.shape[o[s]];const l=r.data.get(i.dataId).values,d=(0,a.H)(l,i.shape,i.dtype,o,c);return{dataId:r.write(d,c,i.dtype),shape:c,dtype:i.dtype}}const o={kernelName:r.Transpose,backendName:"cpu",kernelFunc:i}},7107:function(e,t,n){"use strict";n.d(t,{H:function(){return s}});var r=n(8081);function s(e,t,n,s,a){const i=t.length,o=r.util.sizeFromShape(t),u=r.util.computeStrides(t),c=r.util.computeStrides(a),l=r.util.getTypedArrayFromDType(n,r.util.sizeFromShape(a));for(let d=0;d<o;++d){const t=r.util.indexToLoc(d,i,u),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];l[r.util.locToIndex(n,i,c)]=e[d]}return l}},5638:function(e,t,n){"use strict";n.d(t,{S:function(){return s}});var r=n(8081);function s(e,t,n,s){const a=r.util.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let r=0;r<a;r++)i[0]*=n[r];i[1]=n[a];for(let r=a+1;r<n.length;r++)i[2]*=n[r];const o=new Map,u=new Int32Array(n[a]),c=new r.TensorBuffer(i,s,e),l=[],d=1===i[0]&&1===i[2];for(let r=0;r<n[a];r++){let t;if(d)t=e[r].toString();else{const e=[];for(let t=0;t<i[0];t++)for(let n=0;n<i[2];n++)e.push(c.get(t,r,n));t=e.join(",")}const n=o.get(t);if(null!=n)u[r]=n;else{const e=o.size;o.set(t,e),u[r]=e,l.push(r)}}const p=i.slice();p[1]=o.size;const h=new r.TensorBuffer(p,s);l.forEach(((e,t)=>{for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)h.set(c.get(n,e,r),n,t,r)}));const f=n.slice();return f[a]=p[1],{outputValues:h.values,outputShape:f,indices:u}}},3533:function(e,t,n){"use strict";n.d(t,{b:function(){return s}});var r=n(8081);function s(e){return(t,n,s,a,i)=>{const o=r.backend_util.assertAndGetBroadcastShape(t,n),u=o.length,c=r.util.computeStrides(o),l=r.util.sizeFromShape(o),d=r.util.getTypedArrayFromDType(i,l),p=t.length,h=n.length,f=r.util.computeStrides(t),m=r.util.computeStrides(n),g=r.backend_util.getBroadcastDims(t,o),y=r.backend_util.getBroadcastDims(n,o);if(g.length+y.length===0)for(let r=0;r<d.length;++r)d[r]=e(s[r%s.length],a[r%a.length]);else for(let b=0;b<d.length;++b){const t=r.util.indexToLoc(b,u,c),n=t.slice(-p);g.forEach((e=>n[e]=0));const i=r.util.locToIndex(n,p,f),o=t.slice(-h);y.forEach((e=>o[e]=0));const l=r.util.locToIndex(o,h,m);d[b]=e(s[i],a[l])}return[d,o]}}},6205:function(e,t,n){"use strict";n.d(t,{H:function(){return u},j:function(){return o}});var r=n(8081),s=n(8166),a=n(9258),i=n(6961);function o(e,t,n,o){return null==n?({inputs:n,backend:a})=>{const{a:i,b:u}=n,c=a;(0,s.H)([i,u],e);const l=c.data.get(i.dataId).values,d=c.data.get(u.dataId).values,p="string"===i.dtype?r.backend_util.fromUint8ToStringArray(l):l,h="string"===i.dtype?r.backend_util.fromUint8ToStringArray(d):d,f=o||i.dtype,[m,g]=t(i.shape,u.shape,p,h,f);return c.makeTensorInfo(g,f,m)}:({inputs:e,backend:r})=>{const{a:s,b:u}=e,c=r;if("complex64"===s.dtype||"complex64"===u.dtype){const e=(0,a.pj)({inputs:{x:s},backend:c,attrs:{dtype:"complex64"}}),t=c.data.get(e.dataId),r=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=c.data.get(r.dataId).values,d=c.data.get(o.dataId).values,p=(0,a.pj)({inputs:{x:u},backend:c,attrs:{dtype:"complex64"}}),h=c.data.get(p.dataId),f=h.complexTensorInfos.real,m=h.complexTensorInfos.imag,g=c.data.get(f.dataId).values,y=c.data.get(m.dataId).values,[b,x,v]=n(s.shape,u.shape,l,d,g,y),w=c.makeTensorInfo(v,"float32",b),k=c.makeTensorInfo(v,"float32",x),N=(0,i.P)({inputs:{real:w,imag:k},backend:c});return c.disposeIntermediateTensorInfo(e),c.disposeIntermediateTensorInfo(p),c.disposeIntermediateTensorInfo(w),c.disposeIntermediateTensorInfo(k),N}{const e=c.data.get(s.dataId).values,n=c.data.get(u.dataId).values,r=o||s.dtype,[a,i]=t(s.shape,u.shape,e,n,r);return c.makeTensorInfo(i,r,a)}}}function u(e){return(t,n,s,a,i,o)=>{const u=r.backend_util.assertAndGetBroadcastShape(t,n),c=r.util.sizeFromShape(u),l=u.length,d=r.util.computeStrides(u),p=r.util.getTypedArrayFromDType("float32",c),h=r.util.getTypedArrayFromDType("float32",c),f=r.backend_util.getBroadcastDims(t,u),m=r.backend_util.getBroadcastDims(n,u),g=r.backend_util.mergeRealAndImagArrays(s,a),y=r.backend_util.mergeRealAndImagArrays(i,o),b=t.length,x=r.util.computeStrides(t),v=n.length,w=r.util.computeStrides(n);if(f.length+m.length===0)for(let r=0;r<p.length;r++){const t=r%g.length,n=r%y.length,s=e(g[2*t],g[2*t+1],y[2*n],y[2*n+1]);p[r]=s.real,h[r]=s.imag}else for(let k=0;k<p.length;k++){const t=r.util.indexToLoc(k,l,d),n=t.slice(-b);f.forEach((e=>n[e]=0));const s=r.util.locToIndex(n,b,x),a=t.slice(-v);m.forEach((e=>a[e]=0));const i=r.util.locToIndex(a,v,w),o=e(g[2*s],g[2*s+1],y[2*i],y[2*i+1]);p[k]=o.real,h[k]=o.imag}return[p,h,u]}}},8029:function(e,t,n){"use strict";n.d(t,{a:function(){return s}});var r=n(8081);function s(e){return(t,n,s)=>{const a=r.util.getArrayFromDType(n,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],s);return a}}},6738:function(e,t,n){"use strict";n.d(t,{A:function(){return i},O:function(){return o}});var r=n(8081),s=n(8166),a=n(8029);function i(e,t,n){return o(e,(0,a.a)(t),n)}function o(e,t,n){return({inputs:a,attrs:i,backend:o})=>{const{x:u}=a;(0,s.H)(u,e);const c=o,l=c.data.get(u.dataId).values;let d;if("string"===u.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");d=r.backend_util.fromUint8ToStringArray(l)}else d=l;const p=n||u.dtype,h=t(d,p,i);return c.makeTensorInfo(u.shape,p,h)}}},9486:function(e,t,n){"use strict";n.d(t,{l:function(){return a}});var r=n(8081),s=n(6961);function a(e,t,n="float32"){if("complex64"===n){const n=a(e,t,"float32"),r=a(e,t,"float32");return(0,s.P)({inputs:{real:n,imag:r},backend:e})}const i=r.util.makeZerosTypedArray(r.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,i)}},740:function(e,t,n){"use strict";n.d(t,{jl:function(){return o},nd:function(){return i}});var r=n(8081);const s={},a={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function i(e,t){s[e]=t}function o(e,t){if(!(e in s)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if((0,r.env)().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete s[e]}),!1),(0,r.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(a.failIfMajorPerformanceCaveat=!1);if(1===e)return n.getContext("webgl",a)||n.getContext("experimental-webgl",a);return n.getContext("webgl2",a)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;s[e]=n}const n=s[e];return null==n||n.isContextLost()?(delete s[e],o(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),s[e])}},2860:function(e,t,n){"use strict";n.d(t,{_:function(){return o}});var r=n(9610),s=n(6697),a=n(8110),i=n(8378);class o{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=i.m1.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=(0,r.A)();this.outputShape=e,this.enableShapeUniforms=(0,s.C9)(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?a.Kn(["r","c","d"],e):a.RW(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}},3207:function(e,t,n){"use strict";n.d(t,{G:function(){return o}});var r=n(9610),s=n(6697),a=n(8110),i=n(8378);class o{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=i.m1.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=(0,r.A)();this.outputShape=e,this.enableShapeUniforms=(0,s.C9)(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?a.Kn(["r","c","d"],e):a.RW(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}},4443:function(e,t,n){"use strict";n.d(t,{q:function(){return i}});var r=n(9610),s=n(8110),a=n(8378);class i{constructor(e){this.variableNames=["A"],this.outTexUsage=a.v2.DOWNLOAD;const t=(0,r.A)();this.outputShape=e,this.userCode=`\n      ${s.ye}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}},4230:function(e,t,n){"use strict";n.d(t,{d:function(){return i}});var r=n(9610),s=n(8110),a=n(8378);class i{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=a.v2.DOWNLOAD;const t=(0,r.A)();this.outputShape=e,this.userCode=`\n      ${s.ye}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}},1888:function(e,t,n){"use strict";n.d(t,{F:function(){return o}});var r=n(9610),s=n(6697),a=n(8110);const i={R:0,G:1,B:2,A:3};class o{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const o=(0,r.A)();this.outputShape=e,this.enableShapeUniforms=(0,s.C9)(this.outputShape.length);let u="result";t&&(u="floor(result * 255. + 0.5)");let c="";for(let r=0;r<n.length;r++){const e=n[r];c+=`\n          if(offset == ${r}) {\n            result = values[${i[e]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?a.nc():a.ku(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${o.texture2D}(A, uv);\n          ${c}\n        }\n        ${o.output} = vec4(${u}, 0., 0., 0.);\n      }\n    `}}},9105:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(9610),s=n(6697),a=n(8110);class i{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=(0,r.A)();this.outputShape=e,this.enableShapeUniforms=(0,s.C9)(this.outputShape.length);let i="",o="result";t&&(o="floor(result * 255. + 0.5)");for(let r=0;r<=1;r++)for(let t=0;t<=1;t++){const s=2*r+t;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${t};\n          if (localCoords[1] + ${r} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${r};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${s}] = values[0];\n            } else if (offset == 1) {\n              result[${s}] = values[1];\n            } else if (offset == 2) {\n              result[${s}] = values[2];\n            } else {\n              result[${s}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?a.nc():a.ku(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${i}\n\n          ${n.output} = ${o};\n        }\n    `}}},3381:function(e,t,n){"use strict";var r=n(8081),s=n(1906);const a=(0,r.env)();a.registerFlag("HAS_WEBGL",(()=>a.getNumber("WEBGL_VERSION")>0)),a.registerFlag("WEBGL_VERSION",(()=>(0,s.uH)(2)?2:(0,s.uH)(1)?1:0)),a.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),a.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===a.get("WEBGL_VERSION"))),a.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),a.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),a.registerFlag("WEBGL_PACK",(()=>a.getBool("HAS_WEBGL"))),a.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_CLIP",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_REDUCE",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_LAZILY_UNPACK",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_CONV_IM2COL",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>a.getBool("WEBGL_PACK"))),a.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>(0,s.lo)(a.getNumber("WEBGL_VERSION")))),a.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>(0,s.KP)(a.getNumber("WEBGL_VERSION")))),a.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=a.getNumber("WEBGL_VERSION");return 0===e?0:(0,s.nr)(e)})),a.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>a.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!r.device_util.isMobile())),a.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>(0,s.wb)(a.getNumber("WEBGL_VERSION")))),a.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!a.getBool("WEBGL_FORCE_F16_TEXTURES")&&a.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),a.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>(0,s.BH)(a.getNumber("WEBGL_VERSION")))),a.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>(0,s.Qd)(a.getNumber("WEBGL_VERSION")))),a.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>a.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),a.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),a.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>r.device_util.isMobile()?1:-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),a.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),a.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),a.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),a.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),a.registerFlag("WEBGL_EXP_CONV",(()=>!1)),a.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>a.getBool("IS_TEST"))),a.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),a.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),a.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),a.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1))},9610:function(e,t,n){"use strict";n.d(t,{A:function(){return s}});var r=n(8081);function s(){let e,t,n,s,a,i,o,u,c,l;return 2===(0,r.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",i="outputColor",o="out vec4 outputColor;",u=(0,r.env)().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",c="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",i="gl_FragColor",o="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",c="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:u,defineSpecialInf:c,defineRound:l}}},5489:function(e,t,n){"use strict";n.d(t,{A:function(){return u}});var r=n(8081),s=n(740),a=n(4328),i=n(8378),o=n(1906);class u{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=(0,r.env)().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,(0,s.nd)(t,e)):this.gl=(0,s.jl)(t),e=this.gl,2===(0,r.env)().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>o.O7(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>o.O7(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>o.O7(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>o.O7(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>o.O7(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>o.O7(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>o.O7(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>o.O7(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const u="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,r.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=o.HH(this.gl,e),o.y_(this.gl,t))this.textureHalfFloatExtension=o.HH(this.gl,t);else if((0,r.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),o.y_(this.gl,u))this.colorBufferHalfFloatExtension=o.HH(this.gl,u);else if((0,r.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",o.y_(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!o.y_(this.gl,u))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(u)}this.vertexBuffer=a.Y3(this.gl),this.indexBuffer=a.Hb(this.gl),this.framebuffer=o.d8(this.gl),this.textureConfig=i.Sq(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,r.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;o.O7(e,(()=>e.finish())),o.O7(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),o.O7(e,(()=>e.deleteFramebuffer(this.framebuffer))),o.O7(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),o.O7(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),o.O7(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),a.T2(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),a.iN(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),a.BQ(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),a.Qr(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),a.Uk(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),a.Cs(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),a.cU(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(o.ax(this.gl,this.framebuffer),this.outputTexture=null),o.O7(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>a.HC(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,i){return a.AD(this.gl,e,t,n,r,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return a.ez(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=a.A8(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,r.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>a.P1(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=a.Jj(t));const n=o.HO(t);o.O7(t,(()=>t.attachShader(n,this.vertexShader))),o.O7(t,(()=>t.attachShader(n,e))),o.aj(t,n);const r=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&o.vu(t,r),r}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;o.O7(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),a.Hc(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(o.O7(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&o.vu(this.gl,this.program),o.O7(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?o.XE(this.gl,e,t):o.Hg(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),o.O7(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),o.B(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=i.qe(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&o.vu(this.gl,this.program),o.cu(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}o.O7(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),o.O7(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=o.HH(this.gl,2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in(0,r.env)().platform&&(n=(0,r.env)().platform.setTimeoutCustom.bind((0,r.env)().platform)),r.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),o.JG(this.gl,e,this.framebuffer),this.debug&&o.cu(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(o.JG(this.gl,this.outputTexture,this.framebuffer),this.debug&&o.cu(this.gl)):o.ax(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;o.JG(r,e,this.framebuffer),this.debug&&o.cu(r),this.outputTexture=e,o.O7(r,(()=>r.viewport(0,0,t,n))),o.O7(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),o.O7(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}},6697:function(e,t,n){"use strict";n.d(t,{C9:function(){return d},IJ:function(){return i},Yv:function(){return o},_s:function(){return c},mi:function(){return l}});var r=n(8081),s=n(5156),a=n(1906);function i(e,t,n,i){const u=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),c=u.map((e=>e.shapeInfo)),l={logicalShape:i.shape,texShape:i.texData.texShape,isUniform:!1,isPacked:i.texData.isPacked,flatOffset:null},d=s.Vm(u,l,t),p=(0,a.xc)(e.gl,d),h=e.createProgram(p);return(0,r.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:p,source:d,webGLProgram:h,inShapeInfos:c,outShapeInfo:l,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(h),Object.assign({program:t,fragmentShader:p,source:d,webGLProgram:h,inShapeInfos:c,outShapeInfo:l},o(e,t,h)))}function o(e,t,n){const s=[],a=[];let i,o,u,c=null,l=null;l=e.getUniformLocation(n,"NAN",!1),1===(0,r.env)().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const d=!1;for(const r of t.variableNames){const a={name:r,uniform:e.getUniformLocation(n,r,d),offset:e.getUniformLocation(n,`offset${r}`,d)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${r}Shape`,d),a.texShape=e.getUniformLocation(n,`${r}TexShape`,d)),s.push(a)}if(t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",d),u=e.getUniformLocation(n,"outShapeStrides",d),o=e.getUniformLocation(n,"outTexShape",d)),t.customUniforms)for(const r of t.customUniforms)a.push(e.getUniformLocation(n,r.name,d));return{variablesLocations:s,customUniformLocations:a,infLoc:c,nanLoc:l,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:o}}function u(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],i=a.shape;if(!r.util.arraysEqual(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!r.util.arraysEqual(o,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${u} must match`)}))}function c(e,t,n,a,i){t.program.enableShapeUniforms||(u(t.inShapeInfos,n),u([t.outShapeInfo],[a]));const o=a.texData.texture,c=a.texData.texShape;a.texData.isPacked?e.setOutputPackedMatrixTexture(o.texture,c[0],c[1]):e.setOutputMatrixTexture(o.texture,c[0],c[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===(0,r.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let u=0;u<n.length;++u){const a=n[u],{uniform:i,offset:o,shape:c,texShape:l}=t.variablesLocations[u];if(c){const{uniformShape:n}=s.Tt(t.program.packedInputs,a.shape,a.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(c,new Int32Array(n));break;case 2:e.gl.uniform2iv(c,new Int32Array(n));break;case 3:e.gl.uniform3iv(c,new Int32Array(n));break;case 4:e.gl.uniform4iv(c,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,a.texData.texShape[0],a.texData.texShape[1]),null!=i)if(a.isUniform)if(r.util.sizeFromShape(a.shape)<2)e.gl.uniform1f(i,a.uniformValues[0]);else{let t=a.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=a.texData.slice&&null!=o&&e.gl.uniform1i(o,a.texData.slice.flatOffset),e.setInputMatrixTexture(a.texData.texture.texture,i,u)}const l=t.outShapeLocation;if(l)switch(a.shape.length){case 1:e.gl.uniform1iv(l,new Int32Array(a.shape));break;case 2:e.gl.uniform2iv(l,new Int32Array(a.shape));break;case 3:e.gl.uniform3iv(l,new Int32Array(a.shape));break;case 4:e.gl.uniform4iv(l,new Int32Array(a.shape))}if(t.outShapeStridesLocation){const n=r.util.computeStrides(a.shape);switch(a.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,a.texData.texShape[0],a.texData.texShape[1]),t.program.customUniforms&&i)for(let r=0;r<t.program.customUniforms.length;++r){const n=t.program.customUniforms[r],s=t.customUniformLocations[r],a=i[r];if("float"===n.type)e.gl.uniform1fv(s,a);else if("vec2"===n.type)e.gl.uniform2fv(s,a);else if("vec3"===n.type)e.gl.uniform3fv(s,a);else if("vec4"===n.type)e.gl.uniform4fv(s,a);else if("int"===n.type)e.gl.uniform1iv(s,a);else if("ivec2"===n.type)e.gl.uniform2iv(s,a);else if("ivec3"===n.type)e.gl.uniform3iv(s,a);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,a)}}e.executeProgram()}function l(e,t,n){let a="";t.concat(n).forEach((t=>{const i=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const o=t.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:l}=s.Tt(e.packedInputs,t.shape,o);let d="",p="",h="";if(1===c.length&&e.packedInputs){const e=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];d=`${e[0]>1}_${e[1]>1}`}else if(2!==c.length||e.packedInputs){if(c.length>2&&!e.packedInputs){const e=r.util.computeStrides(c);h=`${e[0]===o[1]}_${e[e.length-1]===o[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const f=t.shape.length,m=2===c.length&&r.util.arraysEqual(t.shape,o),g=1===r.util.sizeFromShape(t.shape),y=r.backend_util.getBroadcastDims(t.shape,n.shape),b=!e.packedInputs&&f===n.shape.length&&r.util.arraysEqual(o,n.texData.texShape),x=e.packedInputs||c.length>2?"":`${o[0]>1}_${o[1]>1}`;a+=`${f}_${b}_${u?l:""}_${c.length}_${g}_${y}_${m}_${d}_${p}_${h}_${x}_${i}`}else{const e=t.isUniform?"uniform":t.texData.texShape;a+=`${t.shape}_${e}_${i}`}}));const i=e.userCode;let o=e.constructor.name;return o+="_"+a+"_"+i+`${(0,r.env)().getNumber("WEBGL_VERSION")}`,o}function d(e){return(0,r.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}},4328:function(e,t,n){"use strict";n.d(t,{A8:function(){return S},AD:function(){return C},BQ:function(){return g},Cs:function(){return v},HC:function(){return T},Hb:function(){return c},Hc:function(){return w},Jj:function(){return o},NQ:function(){return m},P1:function(){return E},Qr:function(){return N},T2:function(){return p},Uk:function(){return k},Y3:function(){return u},cU:function(){return b},ez:function(){return I},gl:function(){return y},hf:function(){return x},iN:function(){return f},m8:function(){return h},q3:function(){return d}});var r=n(8081),s=n(9610),a=n(8378),i=n(1906);function o(e){const t=(0,s.A)(),n=`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;return i.Jj(e,n)}function u(e){const t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return i.ED(e,t)}function c(e){const t=new Uint16Array([0,1,2,2,1,3]);return i.mZ(e,t)}function l(e,t,n,s,a,o){i.b6(t,n);const u=i.cU(e),c=e.TEXTURE_2D;return i.O7(e,(()=>e.bindTexture(c,u))),i.O7(e,(()=>e.texParameteri(c,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),i.O7(e,(()=>e.texParameteri(c,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),i.O7(e,(()=>e.texParameteri(c,e.TEXTURE_MIN_FILTER,e.NEAREST))),i.O7(e,(()=>e.texParameteri(c,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,r.env)().getNumber("WEBGL_VERSION")?i.O7(e,(()=>e.texImage2D(c,0,s,t,n,0,a,o,null))):i.O7(e,(()=>e.texStorage2D(c,1,s,t,n))),i.O7(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:u,texShape:[n,t]}}function d(e){return e.internalFormatFloat}function p(e,t,n,r){const[s,i]=a.kk(t,n);return l(e,s,i,d(r),r.textureFormatFloat,e.FLOAT)}function h(e){return e.internalFormatHalfFloat}function f(e,t,n,r){const[s,i]=a.kk(t,n);return l(e,s,i,h(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function m(e){return e.downloadTextureFormat}function g(e,t,n,r){const[s,i]=a.kk(t,n);return l(e,s,i,m(r),e.RGBA,e.UNSIGNED_BYTE)}function y(e){return e.internalFormatPackedFloat}function b(e,t,n,r){const[s,i]=a.qe(t,n);return l(e,s,i,y(r),e.RGBA,e.FLOAT)}function x(e){return e.internalFormatPackedHalfFloat}function v(e,t,n,r){const[s,i]=a.qe(t,n);return l(e,s,i,x(r),e.RGBA,r.textureTypeHalfFloat)}function w(e,t,n){i.O7(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n)));return i.sb(e,t,"clipSpacePos",n,3,20,0)&&i.sb(e,t,"uv",n,2,20,12)}function k(e,t,n,s,a,o){let u,c,l;i.O7(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(u=new Uint8Array(n*s*4),c=e.UNSIGNED_BYTE,l=e.RGBA):(u=new Float32Array(n*s*4),c=e.FLOAT,l=o.internalFormatPackedFloat),u.set(a),2===(0,r.env)().getNumber("WEBGL_VERSION")?i.O7(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,c,u))):i.O7(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,c,u))),i.O7(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function N(e,t,n){i.O7(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===(0,r.env)().getNumber("WEBGL_VERSION")?i.O7(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):i.O7(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===(0,r.env)().getNumber("WEBGL_VERSION")?i.O7(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):i.O7(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),i.O7(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function S(e,t,n,r){const s=e.createBuffer();i.O7(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return i.O7(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),i.O7(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),i.O7(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}function I(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}function T(e,t,n,r){const[s,o]=a.kk(t,n),u=new Uint8Array(a.yb(t*n,4));return i.O7(e,(()=>e.readPixels(0,0,s,o,r.downloadTextureFormat,e.UNSIGNED_BYTE,u))),new Float32Array(u.buffer)}function C(e,t,n,r,s,i,o,u){const c=e,l=new Float32Array(a.Se(i,o));return c.bindBuffer(c.PIXEL_PACK_BUFFER,t),c.getBufferSubData(c.PIXEL_PACK_BUFFER,0,l),c.bindBuffer(c.PIXEL_PACK_BUFFER,null),l}function E(e,t,n){const r=new Float32Array(t*n*4);return i.O7(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}},2368:function(e,t,n){"use strict";n.d(t,{cK:function(){return Y},qO:function(){return J},cx:function(){return ee},XM:function(){return te},cm:function(){return ne},pk:function(){return re},n7:function(){return se},gv:function(){return ae},aX:function(){return ie},tx:function(){return oe},MZ:function(){return ue},TD:function(){return ce},m$:function(){return le},ji:function(){return pe},B_:function(){return de},Rn:function(){return fe},kY:function(){return he},PQ:function(){return me},Sd:function(){return ge},$O:function(){return ye},nL:function(){return be},r:function(){return xe},Th:function(){return ve},Bo:function(){return we},cZ:function(){return ke},Tg:function(){return Ne},Qs:function(){return Se},M8:function(){return Ie},fy:function(){return Te},hO:function(){return Ce},St:function(){return Ee},Y1:function(){return Ae},UN:function(){return $e},CJ:function(){return _e},nT:function(){return Re},X8:function(){return Fe},LS:function(){return De},AR:function(){return Oe},Bk:function(){return Me},F1:function(){return ze},$u:function(){return Be},$j:function(){return Le},A0:function(){return Pe},_9:function(){return Ve},kI:function(){return We},KX:function(){return Ue},oC:function(){return Ge},Fv:function(){return He},CV:function(){return je}});var r={};n.r(r),n.d(r,{addImpl:function(){return a.EH},bincountImpl:function(){return i.W},bincountReduceImpl:function(){return i.i},bitwiseAndImpl:function(){return o.nv},castImpl:function(){return u.sJ},ceilImpl:function(){return c.__},concatImpl:function(){return l.j},equalImpl:function(){return d.tW},expImpl:function(){return p.Ro},expm1Impl:function(){return h.OF},floorImpl:function(){return f.r6},gatherNdImpl:function(){return m.m},gatherV2Impl:function(){return g.i},greaterEqualImpl:function(){return b.HL},greaterImpl:function(){return y.o},lessEqualImpl:function(){return v.lx},lessImpl:function(){return x.rO},linSpaceImpl:function(){return w.b},logImpl:function(){return k.vX},maxImpl:function(){return N.B},maximumImpl:function(){return S.wS},minimumImpl:function(){return I.vP},multiplyImpl:function(){return T.$3},negImpl:function(){return C.uC},notEqualImpl:function(){return E.Gj},prodImpl:function(){return A.Qg},raggedGatherImpl:function(){return $.c},raggedRangeImpl:function(){return _.S},raggedTensorToTensorImpl:function(){return R.p},rangeImpl:function(){return F.b},rsqrtImpl:function(){return D.zd},scatterImpl:function(){return O.N},sigmoidImpl:function(){return M.VY},simpleAbsImpl:function(){return s.bk},sliceImpl:function(){return z.rT},sparseFillEmptyRowsImpl:function(){return B.c},sparseReshapeImpl:function(){return L.U},sparseSegmentReductionImpl:function(){return P.V},sqrtImpl:function(){return V.zT},staticRegexReplaceImpl:function(){return W.P},stridedSliceImpl:function(){return U.t},stringNGramsImpl:function(){return G.A},stringSplitImpl:function(){return H.Q},stringToHashBucketFastImpl:function(){return j.h},subImpl:function(){return q.VY},tileImpl:function(){return X.R},topKImpl:function(){return K.W},transposeImpl:function(){return Q.H},uniqueImpl:function(){return Z.S}});var s=n(3628),a=n(2779),i=n(8607),o=n(5003),u=n(9258),c=n(4769),l=n(8926),d=n(7679),p=n(1211),h=n(969),f=n(6574),m=n(1820),g=n(4468),y=n(6272),b=n(6259),x=n(8405),v=n(635),w=n(1325),k=n(5223),N=n(5126),S=n(1717),I=n(612),T=n(1917),C=n(854),E=n(8584),A=n(9560),$=n(9885),_=n(6486),R=n(8306),F=n(9230),D=n(7742),O=n(1),M=n(108),z=n(2578),B=n(2123),L=n(3849),P=n(3989),V=n(440),W=n(7693),U=n(2210),G=n(6841),H=n(8639),j=n(6626),q=n(1649),X=n(7723),K=n(9556),Q=n(7107),Z=n(5638);const{addImpl:Y,bincountImpl:J,bincountReduceImpl:ee,bitwiseAndImpl:te,castImpl:ne,ceilImpl:re,concatImpl:se,equalImpl:ae,expImpl:ie,expm1Impl:oe,floorImpl:ue,gatherNdImpl:ce,gatherV2Impl:le,greaterImpl:de,greaterEqualImpl:pe,lessImpl:he,lessEqualImpl:fe,linSpaceImpl:me,logImpl:ge,maxImpl:ye,maximumImpl:be,minimumImpl:xe,multiplyImpl:ve,negImpl:we,notEqualImpl:ke,prodImpl:Ne,raggedGatherImpl:Se,raggedRangeImpl:Ie,raggedTensorToTensorImpl:Te,rangeImpl:Ce,rsqrtImpl:Ee,scatterImpl:Ae,sigmoidImpl:$e,simpleAbsImpl:_e,sliceImpl:Re,sparseFillEmptyRowsImpl:Fe,sparseReshapeImpl:De,sparseSegmentReductionImpl:Oe,sqrtImpl:Me,staticRegexReplaceImpl:ze,stridedSliceImpl:Be,stringNGramsImpl:Le,stringSplitImpl:Pe,stringToHashBucketFastImpl:Ve,subImpl:We,tileImpl:Ue,topKImpl:Ge,transposeImpl:He,uniqueImpl:je}=r},5667:function(e,t,n){"use strict";n.d(t,{U:function(){return i}});var r=n(6697),s=n(1034),a=n(5156);class i{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=(0,r.C9)(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=(0,s.Ky)("rc",this.rank),t=(0,a.kW)(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),i=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}},1034:function(e,t,n){"use strict";function r(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function s(e,t){return 1===t?[e]:r(e,t)}function a(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}n.d(t,{Ky:function(){return s},Qc:function(){return a},k6:function(){return r}})},8831:function(e,t,n){"use strict";n.d(t,{v:function(){return a}});var r=n(6697),s=n(8110);class a{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=(0,r.C9)(this.outputShape.length);let n="";for(let r=0;r<4;r++){let e="thisRC = rc;";r%2==1&&(e+="thisRC.z += 1;"),r>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}var a,i;this.userCode=`\n      ${a=t,i=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${i?s.al(["r","c","d"],"inputShape"):s.RW(["r","c","d"],a)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?s.nc():s.ku(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}},8110:function(e,t,n){"use strict";n.d(t,{Kn:function(){return a},RW:function(){return s},al:function(){return i},ku:function(){return o},nc:function(){return u},ye:function(){return c}});var r=n(8081);function s(e,t,n="index"){const s=r.util.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function a(e,t,n="index"){const s=r.util.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function i(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let a=n-3;a>=0;--a)s[a]=`(${s[a+1]} * ${r[a+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${r[s]}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}function o(e){const t=r.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}function u(){return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n"}const c="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n"},8378:function(e,t,n){"use strict";n.d(t,{Se:function(){return d},Sq:function(){return p},V9:function(){return a},Yz:function(){return c},kk:function(){return o},m1:function(){return r},qe:function(){return l},v2:function(){return s},yb:function(){return u}});var r,s,a,i=n(8081);function o(e,t){return[t,e]}function u(e,t){return e*t}function c(e){const t=i.util.sizeFromShape(e),n=Math.ceil(t/4);return i.util.sizeToSquarishShape(n)}function l(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function d(e,t){const[n,r]=l(e,t);return n*r*4}function p(e,t){const n=e;let r,s,a,o,u,c,l,d,p,h;return 2===(0,i.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,u=n.RED,l=4,d=1,p=n.HALF_FLOAT,h=n.FLOAT,c=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,u=e.RGBA,l=4,d=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,c=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:u,downloadTextureFormat:c,downloadUnpackNumChannels:l,defaultNumChannels:d,textureTypeHalfFloat:p,textureTypeFloat:h}}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(r||(r={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(s||(s={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(a||(a={}))},2490:function(e,t,n){"use strict";n.d(t,{I:function(){return i}});var r=n(8081),s=n(4328),a=n(8378);class i{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const r=u(t,n),s=c(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const i=o(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const e=this.freeTextures[s].pop();return this.usedTextures[s].push(e),e}let l;return r===a.V9.PACKED_2X2_FLOAT32?l=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===a.V9.PACKED_2X2_FLOAT16?l=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===a.V9.UNPACKED_FLOAT32?l=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===a.V9.UNPACKED_FLOAT16?l=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===a.V9.PACKED_4X1_UNSIGNED_BYTE&&(l=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(l),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),l}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=u(n,s),i=c(t,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const l=o(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),d=(0,r.env)().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==d&&this._numBytesAllocated>d?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=l):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=l),this.numUsedTextures--;const p=this.usedTextures[i],h=p&&p.indexOf(e);if(null==h||h<0)throw new Error("Cannot release a texture that was never provided by this texture manager");p[h]=p[p.length-1],p.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function o(e,t,n,r,i){const o=function(e,t){switch(e){case a.V9.PACKED_2X2_FLOAT32:return(0,s.gl)(t);case a.V9.PACKED_2X2_FLOAT16:return(0,s.hf)(t);case a.V9.UNPACKED_FLOAT32:return(0,s.q3)(t);case a.V9.UNPACKED_FLOAT16:return(0,s.m8)(t);case a.V9.PACKED_4X1_UNSIGNED_BYTE:return(0,s.NQ)(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let u;if(i){const[t,n]=(0,a.qe)(e[0],e[1]);u=t*n}else{const[t,n]=(0,a.kk)(e[0],e[1]);u=t*n}const c=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,o);return u*c}function u(e,t){if(e===a.v2.UPLOAD)return a.V9.PACKED_2X2_FLOAT32;if(e===a.v2.RENDER||null==e)return function(e){return(0,r.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?a.V9.PACKED_2X2_FLOAT32:a.V9.UNPACKED_FLOAT32:e?a.V9.PACKED_2X2_FLOAT16:a.V9.UNPACKED_FLOAT16}(t);if(e===a.v2.DOWNLOAD||e===a.v2.PIXELS)return a.V9.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function c(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}},4518:function(e,t,n){"use strict";n.d(t,{Cv:function(){return u},D1:function(){return a},Et:function(){return o},RX:function(){return c},Tq:function(){return p},bl:function(){return d},eW:function(){return l},l:function(){return s},t$:function(){return i}});var r=n(6697);class s{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=(0,r.C9)(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const a="if (isnan(x)) return x;",i="return x;",o="return abs(x);";const u="return (x >= 0.0) ? x : (exp(x) - 1.0);",c=a+"\n  return (x < 0.0) ? 0.0 : x;\n",l=a+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",d="return x;",p="return 1.0 / (1.0 + exp(-1.0 * x));"},9365:function(e,t,n){"use strict";n.d(t,{Cv:function(){return a},RX:function(){return i},Tq:function(){return u},cc:function(){return c},eW:function(){return o},t$:function(){return s}});var r=n(6697);const s="return x;",a="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",i="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",o="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",u="return 1.0 / (1.0 + exp(-1.0 * x));";class c{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=(0,r.C9)(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}},4595:function(e,t,n){"use strict";n.d(t,{W:function(){return i}});var r=n(6697),s=n(1034),a=n(5156);class i{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=(0,r.C9)(this.outputShape.length);const t=e.length,n=(0,s.Ky)("rc",t),i=(0,a.kW)(t),o=(0,s.Qc)(t,n),u=n.slice(-2),c=t<=1?"rc":`vec2(${u.join(",")})`;this.userCode=`\n      void main() {\n        ${i} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${c}));\n      }\n    `}}},1906:function(e,t,n){"use strict";n.d(t,{B:function(){return T},BH:function(){return j},Cp:function(){return R},ED:function(){return b},HH:function(){return l},HO:function(){return m},HS:function(){return K},Hg:function(){return I},JG:function(){return C},Jj:function(){return d},KP:function(){return V},O7:function(){return i},Qd:function(){return X},W8:function(){return F},XE:function(){return S},Yf:function(){return O},aj:function(){return g},ax:function(){return E},b6:function(){return w},cU:function(){return v},cu:function(){return A},d8:function(){return k},ih:function(){return D},lo:function(){return P},mZ:function(){return x},nr:function(){return W},oT:function(){return z},qF:function(){return c},sb:function(){return N},uH:function(){return G},vu:function(){return y},w4:function(){return f},wb:function(){return H},xc:function(){return p},y_:function(){return U}});var r=n(8081),s=n(740),a=n(8378);function i(e,t){const n=t();return(0,r.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}const o=5.96e-8,u=65504;function c(e){return!!((0,r.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||o<Math.abs(e)&&Math.abs(e)<u)}function l(e,t){return $(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function d(e,t){const n=$(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(i(e,(()=>e.shaderSource(n,t))),i(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function p(e,t){const n=$(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(i(e,(()=>e.shaderSource(n,t))),i(e,(()=>e.compileShader(n))),(0,r.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw f(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const h=/ERROR: [0-9]+:([0-9]+):/g;function f(e,t){const n=h.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map(((e,t)=>r.util.rightPad((t+1).toString(),i)+e));let u=0;for(let r=0;r<o.length;r++)u=Math.max(o[r].length,u);const c=o.slice(0,s-1),l=o.slice(s-1,s),d=o.slice(s);console.log(c.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${r.util.rightPad(l[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}function m(e){return $(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function g(e,t){if(i(e,(()=>e.linkProgram(t))),!(0,r.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function y(e,t){if(i(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function b(e,t){const n=$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return i(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),i(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function x(e,t){const n=$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return i(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),i(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function v(e){return $(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function w(e,t){const n=(0,r.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>n||t>n){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}function k(e){return $(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function N(e,t,n,r,s,a,o){const u=e.getAttribLocation(t,n);return-1!==u&&(i(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),i(e,(()=>e.vertexAttribPointer(u,s,e.FLOAT,!1,a,o))),i(e,(()=>e.enableVertexAttribArray(u))),!0)}function S(e,t,n){return $(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function I(e,t,n){return e.getUniformLocation(t,n)}function T(e,t,n,r){i(e,(()=>function(e,t,n){_(e,n),i(e,(()=>e.activeTexture(e.TEXTURE0+n))),i(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),i(e,(()=>e.uniform1i(n,r)))}function C(e,t,n){i(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),i(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function E(e,t){i(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),i(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function A(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function $(e,t,n){const r=i(e,(()=>t()));if(null==r)throw new Error(n);return r}function _(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function R(e,t=2){return r.util.sizeFromShape(e.slice(0,e.length-t))}function F(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function D(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[R(e),...F(e)]),t}function O(e,t=!1){let n=(0,r.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=(0,r.env)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&(0,r.env)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?r.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=r.util.squeezeShape(e);e=t.newShape}let a=r.util.sizeFromShape(e),i=null;e.length<=1&&a<=n?i=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?i=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(i=[e[0],e[1]*e[2]*e[3]]);const o=null!=i&&Math.max(...i)>s&&Math.min(...i)<=(t?2:1)&&Math.min(...i)>0;if(null==i||o)if(t){const t=R(e);let n=2,s=2;e.length&&([n,s]=F(e)),a=t*(n/2)*(s/2),i=r.util.sizeToSquarishShape(a).map((e=>2*e))}else i=r.util.sizeToSquarishShape(a);return i}function M(e){return e%2==0}function z(e,t){if(e=e.slice(-2),t=t.slice(-2),r.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],r=t[t.length-1];if(n===r)return!0;if(M(n)&&M(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&M(e[0])&&M(t[0])}let B,L;function P(e){if(null==B){const t=(0,s.jl)(e);B=t.getParameter(t.MAX_TEXTURE_SIZE)}return B}function V(e){if(null==L){const t=(0,s.jl)(e);L=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,L)}function W(e){if(0===e)return 0;let t;const n=(0,s.jl)(e);return t=U(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:U(n,"EXT_disjoint_timer_query")?1:0,t}function U(e,t){return null!=e.getExtension(t)}function G(e){try{if(null!=(0,s.jl)(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function H(e){if(0===e)return!1;const t=(0,s.jl)(e);if(1===e){if(!U(t,"OES_texture_float"))return!1}else if(!U(t,"EXT_color_buffer_float"))return!1;return q(t)}function j(e){if(0===e)return!1;const t=(0,s.jl)(e);if(1!==e){if(U(t,"EXT_color_buffer_float"))return q(t);const e="EXT_color_buffer_half_float";if(U(t,e)){const n=t.getExtension(e);return function(e,t){const n=(0,a.Sq)(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,i=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,i,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const u=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),u}(t,n)}return!1}if(!U(t,"OES_texture_float"))return!1;if(!U(t,"WEBGL_color_buffer_float"))return!1;return q(t)}function q(e){const t=(0,a.Sq)(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function X(e){if(2!==e)return!1;return null!=(0,s.jl)(e).fenceSync}function K(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}},13:function(e,t,n){"use strict";n.d(t,{YL:function(){return je},gJ:function(){return qe}});var r={};n.r(r),n.d(r,{json:function(){return M}});var s={};n.r(s),n.d(s,{json:function(){return z}});var a={};n.r(a),n.d(a,{json:function(){return B}});var i={};n.r(i),n.d(i,{json:function(){return L}});var o={};n.r(o),n.d(o,{json:function(){return P}});var u={};n.r(u),n.d(u,{json:function(){return V}});var c={};n.r(c),n.d(c,{json:function(){return W}});var l={};n.r(l),n.d(l,{json:function(){return U}});var d={};n.r(d),n.d(d,{json:function(){return G}});var p={};n.r(p),n.d(p,{json:function(){return H}});var h={};n.r(h),n.d(h,{json:function(){return j}});var f={};n.r(f),n.d(f,{json:function(){return q}});var m={};n.r(m),n.d(m,{json:function(){return X}});var g={};n.r(g),n.d(g,{json:function(){return K}});var y={};n.r(y),n.d(y,{json:function(){return Q}});var b={};n.r(b),n.d(b,{json:function(){return Z}});var x={};n.r(x),n.d(x,{json:function(){return Y}});var v={};n.r(v),n.d(v,{json:function(){return J}});var w={};n.r(w),n.d(w,{json:function(){return ee}});var k={};n.r(k),n.d(k,{OP_SCOPE_SUFFIX:function(){return ye.zvA},abs:function(){return ye.WnP},acos:function(){return ye.Khb},acosh:function(){return ye.__u},add:function(){return ye.IHx},addN:function(){return ye.QBD},all:function(){return ye.$6P},any:function(){return ye.YjB},argMax:function(){return ye.NqF},argMin:function(){return ye.vHJ},asin:function(){return ye.ZRM},asinh:function(){return ye.VfV},atan:function(){return ye.z4N},atan2:function(){return ye.fvJ},atanh:function(){return ye.C80},avgPool:function(){return ye.wS1},avgPool3d:function(){return ye.uR5},basicLSTMCell:function(){return ye.zEQ},batchNorm:function(){return ye.tgs},batchNorm2d:function(){return ye.Dxk},batchNorm3d:function(){return ye.JY5},batchNorm4d:function(){return ye.p3b},batchToSpaceND:function(){return ye.E4h},bincount:function(){return ye.yE8},bitwiseAnd:function(){return ye.ycw},booleanMaskAsync:function(){return ye.anm},broadcastArgs:function(){return ye.XsQ},broadcastTo:function(){return ye.UFq},buffer:function(){return ye.f3b},cast:function(){return ye.pju},ceil:function(){return ye.mDi},clipByValue:function(){return ye.iUl},clone:function(){return ye.d9v},complex:function(){return ye.PYB},concat:function(){return ye.zoF},concat1d:function(){return ye.gME},concat2d:function(){return ye.Izb},concat3d:function(){return ye.MNy},concat4d:function(){return ye.ZaL},conv1d:function(){return ye.PAt},conv2d:function(){return ye.Tek},conv2dTranspose:function(){return ye.bc},conv3d:function(){return ye.pdZ},conv3dTranspose:function(){return ye.$QV},cos:function(){return ye.mCk},cosh:function(){return ye.f9Y},cosineWindow:function(){return ye.mew},cumprod:function(){return ye.$Gn},cumsum:function(){return ye.zbp},denseBincount:function(){return ye.ppE},depthToSpace:function(){return ye.nTT},depthwiseConv2d:function(){return ye.B10},diag:function(){return ye.Ka3},dilation2d:function(){return ye.WmZ},div:function(){return ye.hiC},divNoNan:function(){return ye.NTj},dot:function(){return ye.AKD},dropout:function(){return ye.rvX},einsum:function(){return ye.WYO},elu:function(){return ye.pyx},enclosingPowerOfTwo:function(){return ye.GRh},ensureShape:function(){return ye.EDe},equal:function(){return ye.DgJ},erf:function(){return ye.qNN},euclideanNorm:function(){return ye.d2q},exp:function(){return ye.Qqt},expandDims:function(){return ye.dt4},expm1:function(){return ye.t$B},eye:function(){return ye.iyy},fft:function(){return ye.kp_},fill:function(){return ye.hlL},floor:function(){return ye.GWj},floorDiv:function(){return ye.qPi},fused:function(){return ye.imm},gather:function(){return ye.Iqj},gatherND:function(){return ye.dbB},greater:function(){return ye.pjt},greaterEqual:function(){return ye.brS},ifft:function(){return ye.Sxn},imag:function(){return ye.asL},image:function(){return ye.BHj},inTopKAsync:function(){return ye.V3u},irfft:function(){return ye.wx0},isFinite:function(){return ye.xVT},isInf:function(){return ye.UWc},isNaN:function(){return ye.i2d},leakyRelu:function(){return ye.hi7},less:function(){return ye.d9m},lessEqual:function(){return ye.zN1},linalg:function(){return ye.$r2},linspace:function(){return ye.SX3},localResponseNormalization:function(){return ye.G9k},log:function(){return ye.cM7},log1p:function(){return ye.Krr},logSigmoid:function(){return ye.e_t},logSoftmax:function(){return ye.CmS},logSumExp:function(){return ye.l_t},logicalAnd:function(){return ye.HvI},logicalNot:function(){return ye.hJK},logicalOr:function(){return ye.K5V},logicalXor:function(){return ye.egP},losses:function(){return ye.MB5},lowerBound:function(){return ye.eab},matMul:function(){return ye.OI3},max:function(){return ye.Fp7},maxPool:function(){return ye._sB},maxPool3d:function(){return ye.YQQ},maxPoolWithArgmax:function(){return ye.Ip$},maximum:function(){return ye.gWQ},mean:function(){return ye.J69},meshgrid:function(){return ye.ry_},min:function(){return ye.VV$},minimum:function(){return ye.LTh},mirrorPad:function(){return ye.VdP},mod:function(){return ye.wQq},moments:function(){return ye.Gi7},movingAverage:function(){return ye.p_},mul:function(){return ye.dC7},multiRNNCell:function(){return ye.rq4},multinomial:function(){return ye.SJ_},neg:function(){return ye.W76},norm:function(){return ye.KOy},notEqual:function(){return ye.Quu},oneHot:function(){return ye.lfX},ones:function(){return ye.iUs},onesLike:function(){return ye.JpU},op:function(){return ye.op},outerProduct:function(){return ye.N2O},pad:function(){return ye.vku},pad1d:function(){return ye.pNR},pad2d:function(){return ye.koy},pad3d:function(){return ye.t1L},pad4d:function(){return ye.lGY},pool:function(){return ye.d_R},pow:function(){return ye.sQ3},prelu:function(){return ye.AL3},print:function(){return ye.S0v},prod:function(){return ye.WVs},raggedGather:function(){return ye.$gW},raggedRange:function(){return ye.VT$},raggedTensorToTensor:function(){return ye.N89},rand:function(){return ye.TN_},randomGamma:function(){return ye.wzB},randomNormal:function(){return ye.nGf},randomStandardNormal:function(){return ye.ruB},randomUniform:function(){return ye.LGj},randomUniformInt:function(){return ye.pe5},range:function(){return ye.w6H},real:function(){return ye.kwC},reciprocal:function(){return ye.M25},relu:function(){return ye.UYe},relu6:function(){return ye.btT},reshape:function(){return ye.XLQ},reverse:function(){return ye.GYS},reverse1d:function(){return ye.SDf},reverse2d:function(){return ye.diP},reverse3d:function(){return ye.sx7},reverse4d:function(){return ye.mG2},rfft:function(){return ye.QEs},round:function(){return ye.NMM},rsqrt:function(){return ye.bp0},scalar:function(){return ye.iD$},scatterND:function(){return ye.snQ},searchSorted:function(){return ye.zcT},selu:function(){return ye.U8D},separableConv2d:function(){return ye.U_I},setdiff1dAsync:function(){return ye.ODp},sigmoid:function(){return ye.XD2},sign:function(){return ye.Xxe},signal:function(){return ye.tdS},sin:function(){return ye.O$l},sinh:function(){return ye.R_K},slice:function(){return ye.tPi},slice1d:function(){return ye.jZU},slice2d:function(){return ye.SmN},slice3d:function(){return ye.CnO},slice4d:function(){return ye.p0P},softmax:function(){return ye.XAC},softplus:function(){return ye.Wvh},spaceToBatchND:function(){return ye.fBT},sparse:function(){return ye.rVs},sparseToDense:function(){return ye.ers},spectral:function(){return ye.uN7},split:function(){return ye.Vl2},sqrt:function(){return ye._b3},square:function(){return ye.h62},squaredDifference:function(){return ye.$i},squeeze:function(){return ye.L9e},stack:function(){return ye.knu},step:function(){return ye.Nbs},stridedSlice:function(){return ye.NXj},string:function(){return ye.Z_8},sub:function(){return ye.luU},sum:function(){return ye.Smz},tan:function(){return ye.ORZ},tanh:function(){return ye.AEp},tensor:function(){return ye.XeE},tensor1d:function(){return ye.RRF},tensor2d:function(){return ye.odF},tensor3d:function(){return ye.wOQ},tensor4d:function(){return ye.yXz},tensor5d:function(){return ye.Bfx},tensor6d:function(){return ye.xZs},tensorScatterUpdate:function(){return ye.Pg0},tile:function(){return ye.Gg6},topk:function(){return ye.hg7},transpose:function(){return ye.p4s},truncatedNormal:function(){return ye.Xu6},unique:function(){return ye.Two},unsortedSegmentSum:function(){return ye.pUJ},unstack:function(){return ye.HHK},upperBound:function(){return ye.GaM},variable:function(){return ye.VD$},where:function(){return ye.arb},whereAsync:function(){return ye.itS},zeros:function(){return ye.lls},zerosLike:function(){return ye.P84}});var N=n(8081);var S,I;(0,N.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(S||(S={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(I||(I={}));const T={};function C(e){return T[e]}function E(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return A(t.inputNames[o],n,r,s);if("tensors"===a.type){const a=t.inputs.slice(e,i);return t.inputNames.slice(e,i).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)})).map((e=>A(e,n,r,s)))}const u=A(t.inputNames[o],n,r,s),c=u.dataSync();return"number"===a.type?c[0]:N.util.toNestedArray(u.shape,c)}const i=t.attrParams[e];return i&&i.value}function A(e,t,n,r){const[s,a]=F(e,n);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[R(s,e)]));return void 0!==i?t[R(s,i)][a]:void 0}function $(e,t,n){return t[R(e,n.currentContextId)]}function _(e,t){const[n,r,s]=F(e,t);return[R(n,t&&t.currentContextId),r,s]}function R(e,t){return t?`${e}-${t}`:e}function F(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const r=e.split(":");let s;if(1===r.length)s=[e,0,void 0];else{const e=r[0],t=3===r.length?r[1]:void 0;s=[e,Number(r[r.length-1]),t]}return n&&t.parseNodeNameCache.set(e,s),s}function D(e,t,n){let r=E("pad",e,t,n);if("explicit"===r){r=E("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function O(e){return e.kept?e:(0,N.clone)(e)}const M=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],z=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],B=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],L=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],P=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],V=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],W=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],U=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],G=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],H=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],j=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],q=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],X=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],K=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Q=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],Z=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Y=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],J=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],ee=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class te{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,s,a,i,o,u,c,l,d,p,h,f,m,g,y,b,x,v,w].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const u=[];let c={},l={};null!=t&&(c=this.mapSignatureEntries(t.inputs),l=this.mapSignatureEntries(t.outputs));const d=Object.keys(i);d.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=_(e),a=i[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(l).length?d.forEach((e=>{const t=i[e];0===t.children.length&&u.push(t)})):Object.keys(l).forEach((e=>{const[t]=_(e),n=i[t];null!=n&&(n.signatureKey=l[e],u.push(n))})),Object.keys(c).length>0?Object.keys(c).forEach((e=>{const[t]=_(e),n=i[t];n&&(n.signatureKey=c[e],o.push(n))})):o=r;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:i,inputs:o,outputs:u,weights:s,placeholders:r,signature:t,functions:p};return a.length>0&&(h.initNodes=a),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=C(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=re(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=he(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=ae(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=ae(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=pe(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=se(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=me(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=me(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=de(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=fe(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=ue(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ue(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=ce(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=oe(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=_(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ie(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=_(e),i=r[s];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=_(i[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const o=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function ne(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,N.env)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function re(e,t,n,r=!1){const s=e[t];return null!=s?ne(s.s,r):n}function se(e,t,n){const r=e[t];return r?r.b:n}function ae(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function ie(e){switch("string"==typeof e&&(e=S[e]),e){case S.DT_FLOAT:case S.DT_HALF:return"float32";case S.DT_INT32:case S.DT_INT64:case S.DT_INT8:case S.DT_UINT8:return"int32";case S.DT_BOOL:return"bool";case S.DT_DOUBLE:return"float32";case S.DT_STRING:return"string";default:return null}}function oe(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function ue(e,t,n){const r=e[t];return r&&r.type?ie(r.type):n}function ce(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>ie(e))):n}function le(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function de(e,t,n){const r=e[t];return r&&r.shape?le(r.shape):n}function pe(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function he(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>ne(e,r))):n}function fe(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>le(e))):n}function me(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class ge{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return A(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return A(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return ae(this.node.rawAttrs,e,t);if(null!=n.s)return re(this.node.rawAttrs,e,t);if(null!=n.b)return se(this.node.rawAttrs,e,t);if(null!=n.shape)return de(this.node.rawAttrs,e,t);if(null!=n.type)return ue(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return pe(this.node.rawAttrs,e,t);if(null!=n.list.s)return he(this.node.rawAttrs,e,t);if(null!=n.list.shape)return fe(this.node.rawAttrs,e,t);if(null!=n.list.b)return me(this.node.rawAttrs,e,t);if(null!=n.list.type)return ce(this.node.rawAttrs,e,t)}return t}}var ye=n(1336);function be(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){N.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];N.util.assert(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function xe(e){return"number"!=typeof e&&!e.some((e=>e<0))}function ve(e,t,n){let r=we(e,n);const s=!xe(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=we(e.shape,r)})),!xe(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function we(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class ke{constructor(e,t,n,r,s,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=(0,N.scalar)(0),(0,N.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),be(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,N.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,N.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return be(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,N.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,N.tensor)([],[0].concat(this.elementShape));const t=[];for(let r=0;r<this.size();r++)t.push(r);const n=this.readMany(t);return be(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,N.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,N.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];(0,N.tidy)((()=>{t=(0,N.reshape)(t,[1,n,s]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,e[n],s];a[n]=(0,N.reshape)((0,N.slice)(t,i,o),this.elementShape)}return a}));const i=[];for(let o=0;o<e.length;o++)i[o]=o;this.writeMany(i,a)}}class Ne{get id(){return this.idTensor.id}constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);be(t,e.shape,"TensorList shape mismatch: "),(0,N.keep)(e)})),this.idTensor=(0,N.scalar)(0),this.maxNumElements=r,(0,N.keep)(this.idTensor)}copy(){return new Ne([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);be(e,this.elementShape,"TensorList shape mismatch: ");const r=ve(this.elementShape,this.tensors,e);return(0,N.tidy)((()=>{const e=this.tensors.map((e=>(0,N.reshape)(e,r)));return(0,N.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=ve(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,be(r.shape,e,"TensorList shape mismatch: "),(0,N.reshape)(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(be(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,N.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Ne([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);be(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=ve(this.elementShape,this.tensors,t);return(0,N.reshape)(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);be(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,N.keep)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);be(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=ve(this.elementShape,this.tensors,n);return 0===e.length?(0,N.tensor)([],[0].concat(r)):(0,N.tidy)((()=>{const t=e.map((e=>(0,N.reshape)(this.tensors[e],r)));return(0,N.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);be(this.elementShape,t,"TensorList shape mismatch: ");const n=ve(this.elementShape,this.tensors,t);return 0===this.size()?(0,N.tensor)([],[0].concat(n)):(0,N.tidy)((()=>{const e=this.tensors.map((e=>(0,N.reshape)(e,n)));return(0,N.concat)(e,0)}))}}const Se=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=E("thenBranch",e,t,n),s=E("elseBranch",e,t,n),a=E("cond",e,t,n),i=E("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=E("body",e,t,n),s=E("cond",e,t,n),a=E("args",e,t,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let u=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let c=a;for(;u[0];){const e=c;c=await n.functionMap[r].executeFunctionAsync(c,n.tensorArrayMap,n.tensorListMap);const t=c.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(c,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return c}case"LoopCond":return[O(E("pred",e,t,n))];case"Switch":{const r=E("pred",e,t,n);let s=E("data",e,t,n);return s.kept||(s=O(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==A(e,t,n)));if(r){return[O(A(r,t,n))]}return}case"Enter":{const r=E("frameName",e,t,n),s=E("tensor",e,t,n);return n.enterFrame(r),[O(s)]}case"Exit":{const r=E("tensor",e,t,n);return n.exitFrame(),[O(r)]}case"NextIteration":{const r=E("tensor",e,t,n);return n.nextIteration(),[O(r)]}case"TensorArrayV3":{const r=E("size",e,t,n),s=E("dtype",e,t,n),a=E("elementShape",e,t,n),i=E("dynamicSize",e,t,n),o=E("clearAfterRead",e,t,n),u=E("identicalElementShapes",e,t,n),c=E("name",e,t,n),l=new ke(c,s,r,a,u,i,o);return n.addTensorArray(l),[l.idTensor,(0,N.scalar)(1)]}case"TensorArrayWriteV3":{const r=E("tensorArrayId",e,t,n),s=E("index",e,t,n),a=E("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=E("tensorArrayId",e,t,n),s=E("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=E("tensorArrayId",e,t,n),s=E("indices",e,t,n),a=E("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=E("tensorArrayId",e,t,n),s=E("indices",e,t,n),a=E("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=E("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=E("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=E("tensorArrayId",e,t,n),s=E("tensor",e,t,n),a=E("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=E("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return[(0,N.scalar)(s.size(),"int32")]}case"TensorArrayCloseV3":{const r=E("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=E("tensorListId",e,t,n),s=E("index",e,t,n),a=E("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=E("tensorListId",e,t,n),s=E("index",e,t,n),a=E("elementShape",e,t,n),i=E("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=E("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Ne([],n,e.dtype,r),i=(0,N.unstack)(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(E("tensor",e,t,n),r,E("elementShape",e,t,n),E("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=E("elementShape",e,t,n),s=E("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=E(a,e,t,n),o=function(e,t,n,r){return new Ne([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=E("tensorListId",e,t,n),s=E("indices",e,t,n),a=E("elementShape",e,t,n),i=E("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=E("tensorListId",e,t,n),s=E("elementShape",e,t,n),a=E("elementDType",e,t,n),i=E("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);be(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=(0,N.unstack)(e);return new Ne(s,t,r)}(E("tensor",e,t,n),E("elementShape",e,t,n),E("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=E("tensorListId",e,t,n),s=n.getTensorList(r.id),a=E("dtype",e,t,n),i=E("elementShape",e,t,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=E("tensorListId",e,t,n),s=E("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=E("tensorListId",e,t,n),s=E("elementShape",e,t,n),a=E("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=E("tensor",e,t,n),s=E("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=we(e.shape.slice(1),n),i=0===r?0:e.size/r,o=(0,N.tidy)((()=>{const n=[];e=(0,N.reshape)(e,[1,r,i]);for(let r=0;r<t.length;++r){const o=[0,0===r?0:s[r-1],0],u=[1,t[r],i];n[r]=(0,N.reshape)((0,N.slice)(e,o,u),a)}return e.dispose(),n})),u=new Ne([],n,e.dtype,t.length);for(let c=0;c<o.length;c++)u.setItem(c,o[c]);return u}(r,E("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=E("tensorListId",e,t,n),s=n.getTensorList(r.id);return[(0,N.scalar)(s.size(),"int32")]}case"TensorListResize":{const r=E("tensorListId",e,t,n),s=E("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Ie(e,t,n){const[r,s]=E("fusedOps",e,t,n),a="biasadd"===r,i=!a,o="prelu"===s,u="fusedbatchnorm"===r,c=E("numArgs",e,t,n);if(a){if(o&&2!==c)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==c)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const l=E("strides",e,t,n),d=D(e,t,n),p=E("dataFormat",e,t,n).toUpperCase(),h=E("dilations",e,t,n);let[f,m]=E("args",e,t,n);i&&(m=f,f=void 0);return{stride:l,pad:d,dataFormat:p,dilations:h,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:E("leakyreluAlpha",e,t,n)}}function Te(e,t,n){return{boxes:E("boxes",e,t,n),scores:E("scores",e,t,n),maxOutputSize:E("maxOutputSize",e,t,n),iouThreshold:E("iouThreshold",e,t,n),scoreThreshold:E("scoreThreshold",e,t,n),softNmsSigma:E("softNmsSigma",e,t,n)}}var Ce=n(9494);class Ee{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,N.scalar)(0),this.tensorMap=new Map,(0,N.keep)(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ce.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,N.tidy)((()=>{const e=(0,N.unstack)(t),r=n.length,s=e.length;N.util.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];(0,N.keep)(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,N.tidy)((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return(0,N.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function Ae(e,t,n,r,s=N.tidy){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(E("a",e,t,n),E("b",e,t,n))];case"AddN":return[r.addN(E("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(E("a",e,t,n),E("b",e,t,n))];case"Mul":return[r.mul(E("a",e,t,n),E("b",e,t,n))];case"RealDiv":case"Div":return[r.div(E("a",e,t,n),E("b",e,t,n))];case"DivNoNan":return[r.divNoNan(E("a",e,t,n),E("b",e,t,n))];case"FloorDiv":return[r.floorDiv(E("a",e,t,n),E("b",e,t,n))];case"Sub":return[r.sub(E("a",e,t,n),E("b",e,t,n))];case"Minimum":return[r.minimum(E("a",e,t,n),E("b",e,t,n))];case"Maximum":return[r.maximum(E("a",e,t,n),E("b",e,t,n))];case"Pow":return[r.pow(E("a",e,t,n),E("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(E("a",e,t,n),E("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(E("x",e,t,n))];case"Acos":return[r.acos(E("x",e,t,n))];case"Acosh":return[r.acosh(E("x",e,t,n))];case"Asin":return[r.asin(E("x",e,t,n))];case"Asinh":return[r.asinh(E("x",e,t,n))];case"Atan":return[r.atan(E("x",e,t,n))];case"Atan2":return[r.atan2(E("x",e,t,n),E("y",e,t,n))];case"Atanh":return[r.atanh(E("x",e,t,n))];case"Ceil":return[r.ceil(E("x",e,t,n))];case"Complex":return[r.complex(E("real",e,t,n),E("imag",e,t,n))];case"Cos":return[r.cos(E("x",e,t,n))];case"Cosh":return[r.cosh(E("x",e,t,n))];case"Elu":return[r.elu(E("x",e,t,n))];case"Erf":return[r.erf(E("x",e,t,n))];case"Exp":return[r.exp(E("x",e,t,n))];case"Expm1":return[r.expm1(E("x",e,t,n))];case"Floor":return[r.floor(E("x",e,t,n))];case"Log":return[r.log(E("x",e,t,n))];case"Log1p":return[r.log1p(E("x",e,t,n))];case"Imag":return[r.imag(E("x",e,t,n))];case"Neg":return[r.neg(E("x",e,t,n))];case"Reciprocal":return[r.reciprocal(E("x",e,t,n))];case"Real":return[r.real(E("x",e,t,n))];case"Relu":return[r.relu(E("x",e,t,n))];case"Round":return[r.round(E("x",e,t,n))];case"Selu":return[r.selu(E("x",e,t,n))];case"Sigmoid":return[r.sigmoid(E("x",e,t,n))];case"Sin":return[r.sin(E("x",e,t,n))];case"Sign":return[r.sign(E("x",e,t,n))];case"Sinh":return[r.sinh(E("x",e,t,n))];case"Softplus":return[r.softplus(E("x",e,t,n))];case"Sqrt":return[r.sqrt(E("x",e,t,n))];case"Square":return[r.square(E("x",e,t,n))];case"Tanh":return[r.tanh(E("x",e,t,n))];case"Tan":return[r.tan(E("x",e,t,n))];case"ClipByValue":return[r.clipByValue(E("x",e,t,n),E("clipValueMin",e,t,n),E("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(E("x",e,t,n))];case"Rsqrt":return[r.rsqrt(A(e.inputNames[0],t,n))];case"LeakyRelu":return[r.leakyRelu(E("x",e,t,n),E("alpha",e,t,n))];case"Prelu":return[r.prelu(E("x",e,t,n),E("alpha",e,t,n))];case"IsNan":return[r.isNaN(A(e.inputNames[0],t,n))];case"IsInf":return[r.isInf(A(e.inputNames[0],t,n))];case"IsFinite":return[r.isFinite(A(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return Se(e,t,n);case"convolution":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Conv1D":{const s=E("stride",e,t,n),a=E("pad",e,t,n),i=E("dataFormat",e,t,n).toUpperCase(),o=E("dilation",e,t,n);return[r.conv1d(E("x",e,t,n),E("filter",e,t,n),s,a,i,o)]}case"Conv2D":{const s=E("strides",e,t,n),a=D(e,t,n),i=E("dataFormat",e,t,n).toUpperCase(),o=E("dilations",e,t,n);return[r.conv2d(E("x",e,t,n),E("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:i,dilations:o,biasArg:u,preluArg:c,activationFunc:l,leakyreluAlpha:d}=Ie(e,t,n);return[r.fused.conv2d({x:E("x",e,t,n),filter:E("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:l,preluActivationWeights:c,leakyreluAlpha:d})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:i,dilations:o,biasArg:u,preluArg:c,activationFunc:l,leakyreluAlpha:d}=Ie(e,t,n);return[r.fused.depthwiseConv2d({x:E("x",e,t,n),filter:E("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:l,preluActivationWeights:c,leakyreluAlpha:d})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=E("outputShape",e,t,n),a=E("strides",e,t,n),i=D(e,t,n);return[r.conv2dTranspose(E("x",e,t,n),E("filter",e,t,n),s,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=E("strides",e,t,n),a=D(e,t,n),i=E("dilations",e,t,n),o=E("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(E("input",e,t,n),E("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"Conv3D":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("dataFormat",e,t,n).toUpperCase(),o=E("dilations",e,t,n);return[r.conv3d(E("x",e,t,n),E("filter",e,t,n),[s[1],s[2],s[3]],a,i,[o[1],o[2],o[3]])]}case"AvgPool":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("kernelSize",e,t,n);return[r.avgPool(E("x",e,t,n),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("kernelSize",e,t,n);return[r.maxPool(E("x",e,t,n),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("kernelSize",e,t,n),o=E("includeBatchInIndex",e,t,n),{result:u,indexes:c}=r.maxPoolWithArgmax(E("x",e,t,n),[i[1],i[2]],[s[1],s[2]],a,o);return[u,c]}case"AvgPool3D":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("kernelSize",e,t,n);return[r.avgPool3d(E("x",e,t,n),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("kernelSize",e,t,n);return[r.maxPool3d(E("x",e,t,n),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=E("strides",e,t,n),a=E("pad",e,t,n),i=E("dilations",e,t,n),o=s[1],u=s[2],c=i[1],l=i[2];return[r.dilation2d(E("x",e,t,n),E("filter",e,t,n),[o,u],a,[c,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Fill":{const s=E("shape",e,t,n),a=E("dtype",e,t,n),i=E("value",e,t,n);return[r.fill(s,i,a)]}case"LinSpace":{const s=E("start",e,t,n),a=E("stop",e,t,n),i=E("num",e,t,n);return[r.linspace(s,a,i)]}case"Multinomial":{const s=E("logits",e,t,n),a=E("numSamples",e,t,n),i=E("seed",e,t,n);return[r.multinomial(s,a,i)]}case"OneHot":{const s=E("indices",e,t,n),a=E("depth",e,t,n),i=E("onValue",e,t,n),o=E("offValue",e,t,n),u=E("dtype",e,t,n);return[r.oneHot(s,a,i,o,u)]}case"Ones":return[r.ones(E("shape",e,t,n),E("dtype",e,t,n))];case"OnesLike":return[r.onesLike(E("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(E("shape",e,t,n),E("dtype",e,t,n),E("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(E("shape",e,t,n),E("minval",e,t,n),E("maxval",e,t,n),E("dtype",e,t,n))];case"RandomUniformInt":return[r.randomUniformInt(E("shape",e,t,n),E("minval",e,t,n),E("maxval",e,t,n),E("seed",e,t,n))];case"Range":{const s=E("start",e,t,n),a=E("stop",e,t,n),i=E("step",e,t,n);return[r.range(s,a,i,E("dtype",e,t,n))]}case"TruncatedNormal":{const s=E("shape",e,t,n),a=E("mean",e,t,n),i=E("stdDev",e,t,n),o=E("seed",e,t,n);return[r.truncatedNormal(s,a,i,E("dtype",e,t,n),o)]}case"Zeros":return[r.zeros(E("shape",e,t,n),E("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(E("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=k)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:c}=Te(e,t,n),l=await s.image.nonMaxSuppressionWithScoreAsync(r,a,i,o,u,c);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=Te(e,t,n),c=E("padToMaxOutputSize",e,t,n),l=await s.image.nonMaxSuppressionPaddedAsync(r,a,i,o,u,c);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=Te(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,i,o,u)]}case"Where":{const r=s.cast(E("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(E("x",e,t,n),E("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"LowerBound":{const s=E("sortedSequence",e,t,n),a=E("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=E("x",e,t,n),a=E("k",e,t,n),i=E("sorted",e,t,n),o=r.topk(s,a,i);return[o.values,o.indices]}case"UpperBound":{const s=E("sortedSequence",e,t,n),a=E("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=E("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=E("x",e,t,n),a=E("axis",e,t,n),i=r.unique(s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"ResizeBilinear":{const s=E("images",e,t,n),a=E("size",e,t,n),i=E("alignCorners",e,t,n),o=E("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],i,o)]}case"ResizeNearestNeighbor":{const s=E("images",e,t,n),a=E("size",e,t,n),i=E("alignCorners",e,t,n),o=E("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],i,o)]}case"CropAndResize":{const s=E("image",e,t,n),a=E("boxes",e,t,n),i=E("boxInd",e,t,n),o=E("cropSize",e,t,n),u=E("method",e,t,n),c=E("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,i,o,u,c)]}case"ImageProjectiveTransformV3":{const s=E("images",e,t,n),a=E("transforms",e,t,n),i=E("outputShape",e,t,n),o=E("fillValue",e,t,n),u=E("interpolation",e,t,n),c=E("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),c.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=E("default",e,t,n);return[A(e.name,t,n)||s];case"Placeholder":return[A(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[O(E("x",e,t,n))];case"IdentityN":return E("x",e,t,n).map((e=>O(e)));case"Shape":return[r.tensor1d(E("x",e,t,n).shape,"int32")];case"ShapeN":return E("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(E("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(E("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=E("x",e,t,n),i=E("data",e,t,n),o=E("message",e,t,n),u=E("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Equal":return[r.equal(E("a",e,t,n),E("b",e,t,n))];case"NotEqual":return[r.notEqual(E("a",e,t,n),E("b",e,t,n))];case"Greater":return[r.greater(E("a",e,t,n),E("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(E("a",e,t,n),E("b",e,t,n))];case"Less":return[r.less(E("a",e,t,n),E("b",e,t,n))];case"LessEqual":return[r.lessEqual(E("a",e,t,n),E("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(E("a",e,t,n),E("b",e,t,n))];case"LogicalNot":return[r.logicalNot(E("a",e,t,n))];case"LogicalOr":return[r.logicalOr(E("a",e,t,n),E("b",e,t,n))];case"Select":case"SelectV2":return[r.where(E("condition",e,t,n),E("a",e,t,n),E("b",e,t,n))];case"BitwiseAnd":return[r.bitwiseAnd(E("a",e,t,n),E("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(E("a",e,t,n),E("b",e,t,n),E("transposeA",e,t,n),E("transposeB",e,t,n))];case"Einsum":return[r.einsum(E("equation",e,t,n),...E("tensors",e,t,n))];case"Transpose":return[r.transpose(E("x",e,t,n),E("perm",e,t,n))];case"_FusedMatMul":const[s,a]=E("fusedOps",e,t,n),i="biasadd"===s,o="prelu"===a,u=E("numArgs",e,t,n),c=E("leakyreluAlpha",e,t,n);if(i){if(o&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,d]=E("args",e,t,n);return[r.fused.matMul({a:E("a",e,t,n),b:E("b",e,t,n),transposeA:E("transposeA",e,t,n),transposeB:E("transposeB",e,t,n),bias:l,activation:a,preluActivationWeights:d,leakyreluAlpha:c})];case"MatrixBandPart":return[r.linalg.bandPart(E("a",e,t,n),E("numLower",e,t,n),E("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(E("x",e,t,n),E("axis",e,t,n),E("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(E("x",e,t,n),E("mean",e,t,n),E("variance",e,t,n),E("offset",e,t,n),E("scale",e,t,n),E("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(E("x",e,t,n),E("radius",e,t,n),E("bias",e,t,n),E("alpha",e,t,n),E("beta",e,t,n))];case"Softmax":return[r.softmax(E("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(E("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:a}=r.raggedGather(E("paramsNestedSplits",e,t,n),E("paramsDenseValues",e,t,n),E("indices",e,t,n),E("outputRaggedRank",e,t,n));return s.concat(a)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:a}=r.raggedRange(E("starts",e,t,n),E("limits",e,t,n),E("splits",e,t,n));return[s,a]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(E("shape",e,t,n),E("values",e,t,n),E("defaultValue",e,t,n),E("rowPartitionTensors",e,t,n),E("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Max":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.max(E("x",e,t,n),s,a)]}case"Mean":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.mean(E("x",e,t,n),s,a)]}case"Min":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.min(E("x",e,t,n),s,a)]}case"Sum":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.sum(E("x",e,t,n),s,a)]}case"All":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.all(E("x",e,t,n),s,a)]}case"Any":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.any(E("x",e,t,n),s,a)]}case"ArgMax":{const s=E("axis",e,t,n);return[r.argMax(E("x",e,t,n),s)]}case"ArgMin":{const s=E("axis",e,t,n);return[r.argMin(E("x",e,t,n),s)]}case"Prod":{const s=E("axis",e,t,n),a=E("keepDims",e,t,n);return[r.prod(E("x",e,t,n),s,a)]}case"Cumprod":{const s=E("axis",e,t,n),a=E("exclusive",e,t,n),i=E("reverse",e,t,n);return[r.cumprod(E("x",e,t,n),s,a,i)]}case"Cumsum":{const s=E("axis",e,t,n),a=E("exclusive",e,t,n),i=E("reverse",e,t,n);return[r.cumsum(E("x",e,t,n),s,a,i)]}case"Bincount":const s=E("x",e,t,n),a=E("weights",e,t,n),i=E("size",e,t,n);return[r.bincount(s,a,i)];case"DenseBincount":{const s=E("x",e,t,n),a=E("weights",e,t,n),i=E("size",e,t,n),o=E("binaryOutput",e,t,n);return[r.denseBincount(s,a,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=E("n",e,t,n),a=E("axis",e,t,n);let i=E("tensors",e,t,n);return i=i.slice(0,s),[r.concat(i,a)]}case"Gather":{const s=E("x",e,t,n),a=E("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=E("axis",e,t,n),a=E("batchDims",e,t,n),i=E("x",e,t,n),o=E("indices",e,t,n);return[r.gather(i,r.cast(o,"int32"),s,a)]}case"Reverse":{const s=E("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const i=E("x",e,t,n);return[r.reverse(i,a)]}case"ReverseV2":{const s=E("axis",e,t,n),a=E("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=E("begin",e,t,n),a=E("size",e,t,n);return[r.slice(E("x",e,t,n),s,a)]}case"StridedSlice":{const s=E("begin",e,t,n),a=E("end",e,t,n),i=E("strides",e,t,n),o=E("beginMask",e,t,n),u=E("endMask",e,t,n),c=E("ellipsisMask",e,t,n),l=E("newAxisMask",e,t,n),d=E("shrinkAxisMask",e,t,n),p=E("x",e,t,n);return[r.stridedSlice(p,s,a,i,o,u,c,l,d)]}case"Pack":return(0,N.tidy)((()=>{const s=E("axis",e,t,n),a=E("tensors",e,t,n),i=a[0].shape,o=r.squeeze(a[0]).shape,u=a.map((e=>{const t=N.util.arraysEqual(e.shape,i);if(!t&&!N.util.arraysEqual(r.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,i)}));return[r.stack(u,s)]}));case"Unpack":{const s=E("axis",e,t,n),a=E("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=E("reps",e,t,n);return[r.tile(E("x",e,t,n),s)]}case"Split":case"SplitV":{const s=E("axis",e,t,n),a=E("numOrSizeSplits",e,t,n),i=E("x",e,t,n);return r.split(i,a,s)}case"ScatterNd":{const s=E("indices",e,t,n),a=E("values",e,t,n),i=E("shape",e,t,n);return[r.scatterND(s,a,i)]}case"GatherNd":{const s=E("x",e,t,n),a=E("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=E("sparseIndices",e,t,n),a=E("outputShape",e,t,n),i=E("sparseValues",e,t,n),o=E("defaultValue",e,t,n);return[r.sparseToDense(s,i,a,i.dtype===o.dtype?o:r.cast(o,i.dtype))]}case"TensorScatterUpdate":{const s=E("indices",e,t,n),a=E("values",e,t,n),i=E("tensor",e,t,n);return[r.tensorScatterUpdate(i,s,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:i,reverseIndexMap:o}=r.sparse.sparseFillEmptyRows(E("indices",e,t,n),E("values",e,t,n),E("denseShape",e,t,n),E("defaultValue",e,t,n));return[s,a,i,o]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(E("inputIndices",e,t,n),E("inputShape",e,t,n),E("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(E("data",e,t,n),E("indices",e,t,n),E("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(E("data",e,t,n),E("indices",e,t,n),E("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"FFT":return[r.fft(E("x",e,t,n))];case"IFFT":return[r.ifft(E("x",e,t,n))];case"RFFT":return[r.rfft(E("x",e,t,n))];case"IRFFT":return[r.irfft(E("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"StaticRegexReplace":return[r.string.staticRegexReplace(E("input",e,t,n),E("pattern",e,t,n),E("rewrite",e,t,n),E("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(E("data",e,t,n),E("dataSplits",e,t,n),E("separator",e,t,n),E("nGramWidths",e,t,n),E("leftPad",e,t,n),E("rightPad",e,t,n),E("padWidth",e,t,n),E("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:i}=r.string.stringSplit(E("input",e,t,n),E("delimiter",e,t,n),E("skipEmpty",e,t,n));return[s,a,i]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(E("input",e,t,n),E("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Cast":return[r.cast(E("x",e,t,n),E("dtype",e,t,n))];case"ExpandDims":{const s=E("axis",e,t,n);return[r.expandDims(E("x",e,t,n),s)]}case"Squeeze":{const s=E("axis",e,t,n);return[r.squeeze(E("x",e,t,n),s)]}case"Reshape":return[r.reshape(E("x",e,t,n),E("shape",e,t,n))];case"EnsureShape":return[r.ensureShape(E("x",e,t,n),E("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(E("x",e,t,n),E("padding",e,t,n),E("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(E("x",e,t,n),E("padding",e,t,n),E("constantValue",e,t,n))];case"SpaceToBatchND":{const s=E("blockShape",e,t,n),a=E("paddings",e,t,n);return[r.spaceToBatchND(E("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=E("blockShape",e,t,n),a=E("crops",e,t,n);return[r.batchToSpaceND(E("x",e,t,n),s,a)]}case"DepthToSpace":{const s=E("blockSize",e,t,n),a=E("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(E("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(E("x",e,t,n),E("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(E("s0",e,t,n),E("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=r.getHashTableHandleByName(e.name);if(null!=s)return[s];{const s=E("keyDType",e,t,n),a=E("valueDType",e,t,n),i=new Ee(s,a);return r.addHashTable(e.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=E("tableHandle",e,t,n,r),a=E("keys",e,t,n),i=E("values",e,t,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=E("tableHandle",e,t,n,r),a=E("keys",e,t,n),i=E("defaultValue",e,t,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=E("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=C(e.op);if(a&&a.customExecutor)return a.customExecutor(new ge(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return N.util.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class $e{constructor(e={},t={},n={},r={},s){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function _e(e,t,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,c=new Set(Object.keys(e).map((e=>F(e)[0])));r=r||[];const l=new Set(r.map((e=>F(e.name)[0]))),d=[...t];for(;d.length>0;){const e=d.pop();(ze(e)||Be(e)||Le(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(c.has(e.name)||l.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),d.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}function Re(e,t){const{usedNodes:n,inputs:r}=t,s=Object.keys(r).map((e=>F(e)[0])).map((t=>e.nodes[t])),a=e.initNodes||[],i=e=>n.has("string"==typeof e?e:e.name);function o(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const u=o([...s,...e.weights,...a]).filter(i),c=o([...u,...Object.values(e.nodes)]).filter(i),l=new Map(c.map((e=>[e.name,e]))),d={};for(const m of c){d[m.name]=d[m.name]||0;for(const e of m.children)i(e)||(d[e.name]=Number.POSITIVE_INFINITY),d[e.name]=(d[e.name]||0)+1}const p=Object.entries(d).filter((([,e])=>0===e)).map((([e])=>e)),h=[...p];for(;p.length>0;){const e=p.pop(),t=l.get(e);for(const n of t.children.filter(i))0==--d[n.name]&&(h.push(n.name),p.push(n.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),r=t.map((e=>e.name)),s=new Set(r);for(;r.length>0;){const e=r.pop(),t=n.get(e);for(const a of t.children)n.has(a.name)&&!s.has(a.name)&&(s.add(a.name),r.push(a.name))}const a=e.filter((e=>s.has(e.name)));return a}(h.map((e=>l.get(e))),u);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),r=new Set(t.map((e=>e.name))),s=e=>r.has("string"==typeof e?e:e.name),a=new Set(e.map((e=>e.name))),i=e=>a.has("string"==typeof e?e:e.name);for(const o of e){for(const e of o.children.filter(i)){if(!n.has(e.name))throw new Fe(`Child ${e.name} of node ${o.name} is unreachable.`);if(n.get(o.name)>n.get(e.name))throw new Fe(`Node ${o.name} is scheduled to run after its child ${e.name}.`)}if(!s(o))for(const e of o.inputs){if(!n.has(e.name))throw new Fe(`Input ${e.name} of node ${o.name} is unreachable.`);if(n.get(e.name)>n.get(o.name))throw new Fe(`Node ${o.name} is scheduled to run before its input ${e.name}.`)}}}(f,u),f}class Fe extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const De=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),Oe=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),Me=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function ze(e){return De.has(e.op)}function Be(e){return Oe.has(e.op)}function Le(e){return Me.has(e.op)}class Pe{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Pe(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(e,t){const n=_e(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}const i=Re(this.graph,n),o=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,r=e.map(((e,t)=>ze(e)?n:t)),s=e=>{const n=r[t.get(e.name)];return null==n?-1:n},a=e.map(((e,t)=>e.children.map(s).reduce(((e,t)=>Math.max(e,t)),r[t]))),i=new Map;for(let o=0;o<e.length;++o){const t=a[o];if(t===n)continue;const r=e[o],s=e[t];i.has(s.name)||i.set(s.name,[]),i.get(s.name).push(r)}return i}(i);return{orderedNodes:i,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return(0,N.keep)(t),t}cloneTensorList(e){if(!e)return null;return e.map((e=>this.cloneAndKeepTensor(e)))}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[F(e)[0]])),s=t.map((e=>F(e)[0])),a=new Set(s);let i=s.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const o=this.getCompilationKey(r,i);let u=this.compiledMap.get(o);null==u&&(u=this.compile(e,i),this.compiledMap.set(o,u));try{this.keepIntermediateTensors=(0,N.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const c={},l={};return(0,N.tidy)((()=>{const n=new $e(this.weightMap,c,l,this.functionExecutorMap,this.parseNodeNameCache),r=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[s,a]=F(t,n),i=[];i[a]=e[t],r[s]=i,this.keepIntermediateTensors&&(this.clonedTensorsMap[s]=this.cloneTensorList(i))}));const s=this.getFrozenTensorIds(r),{orderedNodes:i,nodeLiveUntilMap:o}=u;for(const e of i){if(r[e.name])continue;const t=Ae(e,r,n,this._resourceManager);if(N.util.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,r,n,s,a,o.get(e.name))}return null==this.parent&&n.dispose(s),t.map((e=>A(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,i){if(!ze(t)&&!a.has(e)){for(const r of n[e])null!=r&&(i[r.id]=(i[r.id]||0)+t.children.length);for(const e of t.inputs){if(ze(e))continue;const t=$(e.name,n,r);if(null!=t)for(const e of t){if(!e||e.kept||s.has(e.id))continue;const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,r,s,a){function i(e){return ze(e)||s.has(e.name)}if(!ze(e)&&null!=a)for(const o of a){if(i(o))continue;const e=$(o.name,t,n);for(const t of e)!t||t.kept||r.has(t.id)||t.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,r={},s={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=(0,N.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const a=new $e(this.weightMap,r,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>A(e,i,a))),u=o.map((e=>e.id)),c=Object.keys(e).map((t=>e[t].id)),l=new Set([...u,...c,...this.weightIds]);return Object.values(i).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||l.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(l),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[F(e)[0]])),i=n.map((e=>F(e)[0])),o=new Set(i);let u=i.map((e=>this.graph.nodes[e]));0===u.length&&(u=this._outputs);const{usedNodes:c,missingInputs:l,dynamicNode:d,syncInputs:p}=_e(e,u,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=F(t),s=[];s[r]=e[t],f[n]=s}));const m={},g=this.getFrozenTensorIds(f),y={};for(;h.length>0;){const e=this.processStack(a,h,t,f,y,g,o,m,c);await Promise.all(e)}null!=d||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=u.filter((e=>!ze(e)&&!A(e.name,f,t))).map((e=>e.name));if(b.length>0){let e="";throw null!=d&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return f}processStack(e,t,n,r,s,a,i,o,u){const c=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let l="";if("Enter"===e.node.op&&E("isConstant",e.node,r,n)&&([l]=_(e.node.name,n)),null==r[e.node.name]){const d=Ae(e.node,r,n,this._resourceManager);l||([l]=_(e.node.name,n));const p=n.currentContext;N.util.isPromise(d)?c.push(d.then((c=>(r[l]=c,this.keepIntermediateTensors&&(this.clonedTensorsMap[l]=this.cloneTensorList(c)),n.currentContext=p,this.checkTensorForDisposal(l,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u),c)))):(r[l]=d,this.keepIntermediateTensors&&(this.clonedTensorsMap[l]=this.cloneTensorList(d)),this.checkTensorForDisposal(l,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return c}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[i]=_(e.name,n);!s[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!A(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!A(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=F(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));N.util.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&N.util.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const r={};for(const s in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[s];null!=a?r[a.name]=e[s]:r[s]=e[s]}return r}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=F(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const r=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=r?r.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=F(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Ve{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}var We=n(1989);const Ue="?tfjs-format=file",Ge="model.json";class He{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=N.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Ve}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return N.util.isPromise(e)?e.then((e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e))):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=await(0,We.r)(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;const n=this.artifacts.modelTopology;let r=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(r=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=r,this.version=`${n.versions.producer}.${n.versions.minConsumer}`,this.executor=new Pe(te.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=te.Instance.transformGraph(e.modelInitializer);this.initializer=new Pe(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t=e instanceof N.Tensor?[e]:e,n={};return t.forEach(((e,t)=>n[this.structuredOutputKeys[t]]=e)),n}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof N.Tensor||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const r=n[t];null!=r.resourceId&&(e[t]=this.resourceIdToCapturedInput[r.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let r=0;return this.inputNodes.reduce(((t,n)=>{var s,a,i;const o=null===(i=null===(a=null===(s=this.signature)||void 0===s?void 0:s.inputs)||void 0===a?void 0:a[n])||void 0===i?void 0:i.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[r++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let r=0;r<n.length;r++){const s=t[n[r]];this.resourceIdToCapturedInput[s.resourceId]=e[r]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&(0,N.dispose)(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function je(e,t={},n=N.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}${Ge}${Ue}`}(e));const r=new He(e,t,n);return await r.load(),r}const qe="4.15.0"},8713:function(e,t,n){"use strict";n.d(t,{JL:function(){return r},Zu:function(){return s}});class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class s{refCount(e){return a("refCount")}incRef(e){return a("incRef")}timerAvailable(){return!0}time(e){return a("time")}read(e){return a("read")}readSync(e){return a("readSync")}readToGPU(e,t){return a("readToGPU")}numDataIds(){return a("numDataIds")}disposeData(e,t){return a("disposeData")}write(e,t,n){return a("write")}move(e,t,n,r,s){return a("move")}createTensorFromGPUData(e,t,n){return a("createTensorFromGPUData")}memory(){return a("memory")}floatPrecision(){return a("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return a("dispose")}}function a(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3337:function(e,t,n){"use strict";function r(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||s)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function s(e,t){return e>t?1:e<t?-1:0}function a(e,t,n,r,s){return u(e,t,n,r,s,0)}function i(e,t,n,r,s,a){return u(e,t,n,r,s,0,!1,a,!0)}function o(e,t,n,r,s,a){return u(e,t,n,r,s,a,!0)}function u(e,t,n,s,a,i,o=!1,u=!1,p=!1){const h=[];for(let r=0;r<t.length;r++)t[r]>a&&h.push({score:t[r],boxIndex:r,suppressBeginIndex:0});h.sort(d);const f=i>0?-.5/i:0,m=[],g=[];for(;m.length<n&&h.length>0;){const t=h.pop(),{score:n,boxIndex:i,suppressBeginIndex:o}=t;if(n<a)break;let u=!1;for(let r=m.length-1;r>=o;--r){const n=c(e,i,m[r]);if(n>=s){u=!0;break}if(t.score=t.score*l(s,f,n),t.score<=a)break}t.suppressBeginIndex=m.length,u||(t.score===n?(m.push(i),g.push(t.score)):t.score>a&&r(h,t,d))}const y=m.length,b=n-y;u&&b>0&&(m.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const x={selectedIndices:m};return o&&(x.selectedScores=g),p&&(x.validOutputs=y),x}function c(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(s[0],s[2]),l=Math.min(s[1],s[3]),d=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),h=(o-a)*(u-i),f=(d-c)*(p-l);if(h<=0||f<=0)return 0;const m=Math.max(a,c),g=Math.max(i,l),y=Math.min(o,d),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(h+f-x)}function l(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function d(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:function(){return a},qP:function(){return i},pA:function(){return o}})},8333:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var r=n(2657);function s(e,t){const n=[];for(let r=0;r<t.length;r++)t[r]&&n.push(r);const s=(0,r.f)(e,"int32"),a=(0,r.f)([n.length,e.length],"int32");for(let r=0;r<n.length;r++){const t=s.indexToLoc(n[r]),i=r*e.length;a.values.set(t,i)}return a.toTensor()}},7097:function(e,t,n){"use strict";n.d(t,{BV:function(){return v},wv:function(){return x}});var r=n(8713),s=n(2885),a=n(5938),i=n(9121),o=n(6151),u=n(4706),c=n(9122),l=n(569);class d{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new h)}profileKernel(e,t,n){let r;const a=()=>{r=n()};let i;const o=c.now();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(a);else{a();for(const e of r)e.dataSync();i=Promise.resolve({kernelMs:c.now()-o})}if((0,s.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let s=0;s<r.length;s++){const t=r[s];t.data().then((n=>{p(n,t.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:i.then((e=>e.kernelMs)),extraInfo:i.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function p(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class h{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?l.oj(`${r}ms`,9):r.error,o=l.oj(e,25),u=t.rank,c=t.size,d=l.oj(t.shape.toString(),14);let p="";for(const l in s){const e=s[l];if(null!=e){const n=e.shape||t.shape,r=n.length;p+=`${l}: ${r}D ${r>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${d}\t%c${c}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var f=n(4077),m=n(747);function g(e){return null!=e.kernelName}class y{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class b{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new y}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(u.Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new d(this.backendInstance),!0}setupRegisteredKernels(){(0,o.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,o.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,u.Z(`Initialization of backend ${e} failed`),u.Z(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return u.Z(`Initialization of backend ${e} failed`),u.Z(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return b.nextTensorId++}nextVariableId(){return b.nextVariableId++}clone(e){const t=v.runKernel(i.iJz,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return v.runKernel(i.RFZ,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=(0,o.pI)(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let i,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const c=g(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(g(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const c=(0,o.pI)(t,this.backendName);l.hu(null!=c,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();u=c.kernelFunc({inputs:s,attrs:a,backend:this.backend});const i=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,e,n),n}}const{inputs:d,attrs:p}=e,h=g(e)?null:e.backwardsFunc;let f;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,d,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=i()})),r&&this.addTapeNode(c,d,t,h,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map((e=>null!=d[e]?d[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=(0,o.uk)(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(l.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>s[t]));return a.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&l.HD(e[0])&&(s=e.map((e=>c.encodeString(e))));const a=r.write(s,t,n),i=new f.es(t,n,a,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=(0,l.Ub)(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new f.es(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new f._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*l.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof f._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*l.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},u=(0,o.uk)(e);null!=u&&(r=u.gradFunc),null!=r&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=l.wT(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,m.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let s=0;s<this.state.activeScope.track.length;s++){const e=this.state.activeScope.track[s];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(l.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));l.hu(s instanceof f.es,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<e.length;u++){const n=e[u],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(r[i.id]){n.outputs.forEach((e=>r[e.id]=!0)),o=!0,s[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let u=e.length-1;u>=0;u--){const t=e[u],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let u=0;u<e.length;u++){const t=e[u];if(s[t.id]&&i[t.id]){const e={};for(const s in t.inputs){const n=t.inputs[s];r[n.id]&&(e[s]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=(0,l.p8)((0,l.NA)(e),"float32");return v.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!l.cO(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),w);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return l.hu(l.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;l.hu(t.every((e=>e instanceof f.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),l.hu(n.value instanceof f.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),l.hu(l.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];l.hu(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),l.hu(a.every((e=>e instanceof f.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,c.now)(),n=await this.backend.time(e);return n.wallMs=(0,c.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new y;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function x(){const e=(0,a.D)();if(null==e._tfengine){const t=new s.qA(e);e._tfengine=new b(t)}return(0,s.iG)(e._tfengine.ENV),(0,f.Vi)((()=>e._tfengine)),e._tfengine}b.nextTensorId=0,b.nextVariableId=0;const v=x();function w(e,t){const n={a:e,b:t};return v.runKernel(i.mm_,n)}},2885:function(e,t,n){"use strict";n.d(t,{OB:function(){return o},Vi:function(){return u},iG:function(){return c},qA:function(){return a}});var r=n(569);const s="tfjsflags";class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=i,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,r.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(s in e){e[s].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}}function i(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function o(){return u}let u=null;function c(e){u=e}},5938:function(e,t,n){"use strict";let r;function s(){if(null==r){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}r=e}return r}function a(e,t){const n=function(){const e=s();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,{D:function(){return s},R:function(){return a}})},4368:function(e,t,n){"use strict";n.d(t,{B9:function(){return g},CQ:function(){return x},Cd:function(){return v},Cn:function(){return y},G4:function(){return o},MX:function(){return l},N5:function(){return f},N8:function(){return d},N_:function(){return w},R:function(){return u},SR:function(){return p},VY:function(){return C},XV:function(){return b},cF:function(){return c},cj:function(){return k},jq:function(){return I},lu:function(){return m},sq:function(){return h},x3:function(){return N},y3:function(){return T},ze:function(){return S}});var r=n(7097),s=n(2885),a=n(4077),i=n(747);function o(){(0,s.OB)().set("PROD",!0)}function u(){(0,s.OB)().set("DEBUG",!0)}function c(){(0,s.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function l(e){(0,s.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function d(){r.BV.disposeVariables()}function p(){return r.BV}function h(){return r.BV.memory()}function f(e){return r.BV.profile(e)}function m(e,t){return r.BV.tidy(e,t)}function g(e){(0,i.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function y(e){return r.BV.keep(e)}function b(e){return r.BV.time(e)}function x(e){return r.BV.setBackend(e)}function v(){return r.BV.ready()}function w(){return r.BV.backendName}function k(e){r.BV.removeBackend(e)}function N(e){return r.BV.findBackend(e)}function S(e){return r.BV.findBackendFactory(e)}function I(e,t,n=1){return r.BV.registerBackend(e,t,n)}function T(){return r.BV.backend}function C(e,t){(0,s.OB)().setPlatform(e,t)}(0,a.FZ)(l)},633:function(e,t,n){"use strict";n.d(t,{UQ:function(){return o},cb:function(){return p},fN:function(){return l},h7:function(){return c},pn:function(){return d},ti:function(){return u}});var r=n(7097),s=n(4077),a=n(3740),i=n(569);function o(e){return i.hu(i.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=(0,a._1)(t,"x","tf.grad","string_or_numeric"),o=null!=n?(0,a._1)(n,"dy","tf.grad"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(s)),[s],o);return null!=o&&i.k5(t.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),h(n),n[0]}))}}function u(e){return i.hu(i.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{i.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=(0,a.sI)(t,"args","tf.grads","string_or_numeric"),o=null!=n?(0,a._1)(n,"dy","tf.grads"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(...s)),s,o);return null!=o&&i.k5(t.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(n),n}))}}function c(e){return i.hu(i.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{i.hu(t instanceof s.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),i.hu(null==n||n instanceof s.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:a,value:o}=r.BV.gradients((()=>e(t)),[t],n);return h(a),{grad:a[0],value:o}}}function l(e){return i.hu(i.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{i.hu(Array.isArray(t)&&t.every((e=>e instanceof s.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),i.hu(null==n||n instanceof s.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const a=r.BV.gradients((()=>e(...t)),t,n);return null!=n&&i.k5(a.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(a.grads),a}}function d(e,t){i.hu(i.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),i.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof s._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in r.BV.registeredVariables)t.push(r.BV.registeredVariables[e])}const a=n?t.filter((e=>!e.trainable)):null,o=t.length;t=t.filter((e=>e.trainable)),i.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`));const{value:u,grads:c}=r.BV.gradients(e,t,null,!0);i.hu(c.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),i.hu(0===u.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`));const l={};return t.forEach(((e,t)=>{null!=c[t]&&(l[e.name]=c[t])})),null!=a&&a.forEach((e=>l[e.name]=null)),{value:u,grads:l}}function p(e){return r.BV.customGrad(e)}function h(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},8081:function(e,t,n){"use strict";n.r(t),n.d(t,{Abs:function(){return yt.SYM},Acos:function(){return yt.VGw},Acosh:function(){return yt.SpW},AdadeltaOptimizer:function(){return $e},AdagradOptimizer:function(){return Re},AdamOptimizer:function(){return Oe},AdamaxOptimizer:function(){return Be},Add:function(){return yt.mm_},AddN:function(){return yt.Xze},All:function(){return yt.oT6},Any:function(){return yt.IKK},ArgMax:function(){return yt.sJF},ArgMin:function(){return yt.aJk},Asin:function(){return yt.M2y},Asinh:function(){return yt.qw7},Atan:function(){return yt.jMg},Atan2:function(){return yt.QCc},Atanh:function(){return yt.Oyi},AvgPool:function(){return yt.JhU},AvgPool3D:function(){return yt._k9},AvgPool3DGrad:function(){return yt.IMb},AvgPoolGrad:function(){return yt.ROF},BatchMatMul:function(){return yt.XLW},BatchToSpaceND:function(){return yt.zws},Bincount:function(){return yt.zvY},BitwiseAnd:function(){return yt.hCO},BroadcastArgs:function(){return yt.eEB},BroadcastTo:function(){return yt.Ly9},Cast:function(){return yt.RFZ},Ceil:function(){return yt.gJX},ClipByValue:function(){return yt.xnO},Complex:function(){return yt.Zz9},ComplexAbs:function(){return yt.yj2},Concat:function(){return yt.Eh3},Conv2D:function(){return yt.mhS},Conv2DBackpropFilter:function(){return yt.wUP},Conv2DBackpropInput:function(){return yt.wm},Conv3D:function(){return yt.x12},Conv3DBackpropFilterV2:function(){return yt.o2y},Conv3DBackpropInputV2:function(){return yt.ik2},Cos:function(){return yt.mc4},Cosh:function(){return yt.TR1},CropAndResize:function(){return yt.VcC},Cumprod:function(){return yt.Byc},Cumsum:function(){return yt.iHb},DataStorage:function(){return hr.JL},DenseBincount:function(){return yt.QRR},DepthToSpace:function(){return yt.T0n},DepthwiseConv2dNative:function(){return yt.cie},DepthwiseConv2dNativeBackpropFilter:function(){return yt.sL$},DepthwiseConv2dNativeBackpropInput:function(){return yt.y7R},Diag:function(){return yt.$w},Dilation2D:function(){return yt.p4S},Dilation2DBackpropFilter:function(){return yt.Vn9},Dilation2DBackpropInput:function(){return yt.ekb},Draw:function(){return yt.hGc},ENV:function(){return b.Vi},Einsum:function(){return yt.$g6},Elu:function(){return yt.SX0},EluGrad:function(){return yt.HEU},Environment:function(){return b.qA},Equal:function(){return yt.hdR},Erf:function(){return yt.Omj},Exp:function(){return yt.NEP},ExpandDims:function(){return yt.YFo},Expm1:function(){return yt.Y0y},FFT:function(){return yt.vwp},Fill:function(){return yt.deh},FlipLeftRight:function(){return yt.Uyb},Floor:function(){return yt.OR},FloorDiv:function(){return yt.jeX},FromPixels:function(){return yt.eBW},FusedBatchNorm:function(){return yt.sHE},FusedConv2D:function(){return yt._V0},FusedDepthwiseConv2D:function(){return yt.luS},GatherNd:function(){return yt.q1x},GatherV2:function(){return yt.qi_},Greater:function(){return yt.iZT},GreaterEqual:function(){return yt.Acj},IFFT:function(){return yt.Qg5},Identity:function(){return yt.iJz},Imag:function(){return yt.J_u},IsFinite:function(){return yt.avt},IsInf:function(){return yt.iWB},IsNan:function(){return yt.r7n},KernelBackend:function(){return hr.Zu},LRN:function(){return yt.eZ0},LRNGrad:function(){return yt.Hhh},LeakyRelu:function(){return yt.J$2},Less:function(){return yt.vtC},LessEqual:function(){return yt.CAk},LinSpace:function(){return yt.e7N},Log:function(){return yt.ZbH},Log1p:function(){return yt.kU},LogSoftmax:function(){return yt.qCd},LogicalAnd:function(){return yt.PYm},LogicalNot:function(){return yt.VfG},LogicalOr:function(){return yt.MZg},LogicalXor:function(){return yt.w6g},LowerBound:function(){return yt.qIC},MatrixBandPart:function(){return yt.J7O},Max:function(){return yt.YoZ},MaxPool:function(){return yt.mTV},MaxPool3D:function(){return yt.OAf},MaxPool3DGrad:function(){return yt.OU7},MaxPoolGrad:function(){return yt.OV7},MaxPoolWithArgmax:function(){return yt.vFR},Maximum:function(){return yt.BMI},Mean:function(){return yt.q2K},Min:function(){return yt.c17},Minimum:function(){return yt.q8u},MirrorPad:function(){return yt.jQs},Mod:function(){return yt.Vbg},MomentumOptimizer:function(){return Pe},Multinomial:function(){return yt.NZg},Multiply:function(){return yt.wYn},Neg:function(){return yt.kuV},NonMaxSuppressionV3:function(){return yt.uv1},NonMaxSuppressionV4:function(){return yt.cye},NonMaxSuppressionV5:function(){return yt.W0H},NotEqual:function(){return yt.yQU},OP_SCOPE_SUFFIX:function(){return Zt.zvA},OneHot:function(){return yt.we_},OnesLike:function(){return yt.qWM},Optimizer:function(){return Ae},OptimizerConstructors:function(){return Kt},Pack:function(){return yt.QiL},PadV2:function(){return yt.lyA},Pool:function(){return yt.Kgp},Pow:function(){return yt.pe_},Prelu:function(){return yt.o0g},Prod:function(){return yt.DlI},RMSPropOptimizer:function(){return Ve},RaggedGather:function(){return yt.dDz},RaggedRange:function(){return yt.CQl},RaggedTensorToTensor:function(){return yt.BiW},Range:function(){return yt.e6w},Rank:function(){return Qt.yw},Real:function(){return yt.xJR},RealDiv:function(){return yt.oHH},Reciprocal:function(){return yt.$HU},Reduction:function(){return Yt.I},Relu:function(){return yt.qkr},Relu6:function(){return yt.SbG},Reshape:function(){return yt.HZH},ResizeBilinear:function(){return yt._Yw},ResizeBilinearGrad:function(){return yt.zbQ},ResizeNearestNeighbor:function(){return yt.dpD},ResizeNearestNeighborGrad:function(){return yt.Hmb},Reverse:function(){return yt.mKl},RotateWithOffset:function(){return yt.b9H},Round:function(){return yt.e07},Rsqrt:function(){return yt.bV0},SGDOptimizer:function(){return Le},ScatterNd:function(){return yt.xQA},SearchSorted:function(){return yt.nr8},Select:function(){return yt.PhF},Selu:function(){return yt.oFR},Sigmoid:function(){return yt.a5O},Sign:function(){return yt.i5y},Sin:function(){return yt.RQH},Sinh:function(){return yt.wYB},Slice:function(){return yt.p2w},Softmax:function(){return yt.Gcp},Softplus:function(){return yt.MRv},SpaceToBatchND:function(){return yt.TQc},SparseFillEmptyRows:function(){return yt.O3z},SparseReshape:function(){return yt.nhH},SparseSegmentMean:function(){return yt.w3H},SparseSegmentSum:function(){return yt.ZjV},SparseToDense:function(){return yt.D2d},SplitV:function(){return yt.L8s},Sqrt:function(){return yt.FKq},Square:function(){return yt.bK0},SquaredDifference:function(){return yt._tC},StaticRegexReplace:function(){return yt.e0R},Step:function(){return yt.h8e},StridedSlice:function(){return yt.jQk},StringNGrams:function(){return yt._JP},StringSplit:function(){return yt.s1s},StringToHashBucketFast:function(){return yt.XkS},Sub:function(){return yt.Tr8},Sum:function(){return yt.GBy},Tan:function(){return yt.sEM},Tanh:function(){return yt.MIZ},Tensor:function(){return pe.es},TensorBuffer:function(){return pe.YD},TensorScatterUpdate:function(){return yt.SIB},Tile:function(){return yt.n9L},TopK:function(){return yt.cWu},Transform:function(){return yt.wx7},Transpose:function(){return yt.G3Y},Unique:function(){return yt.kpP},Unpack:function(){return yt.ToN},UnsortedSegmentSum:function(){return yt.Qvg},UpperBound:function(){return yt.XDQ},Variable:function(){return pe._w},ZerosLike:function(){return yt.RuY},_FusedMatMul:function(){return yt.usg},abs:function(){return Zt.WnP},acos:function(){return Zt.Khb},acosh:function(){return Zt.__u},add:function(){return Zt.IHx},addN:function(){return Zt.QBD},all:function(){return Zt.$6P},any:function(){return Zt.YjB},argMax:function(){return Zt.NqF},argMin:function(){return Zt.vHJ},asin:function(){return Zt.ZRM},asinh:function(){return Zt.VfV},atan:function(){return Zt.z4N},atan2:function(){return Zt.fvJ},atanh:function(){return Zt.C80},avgPool:function(){return Zt.wS1},avgPool3d:function(){return Zt.uR5},backend:function(){return fe.y3},backend_util:function(){return d},basicLSTMCell:function(){return Zt.zEQ},batchNorm:function(){return Zt.tgs},batchNorm2d:function(){return Zt.Dxk},batchNorm3d:function(){return Zt.JY5},batchNorm4d:function(){return Zt.p3b},batchToSpaceND:function(){return Zt.E4h},bincount:function(){return Zt.yE8},bitwiseAnd:function(){return Zt.ycw},booleanMaskAsync:function(){return Zt.anm},broadcastArgs:function(){return Zt.XsQ},broadcastTo:function(){return Zt.UFq},broadcast_util:function(){return gt},browser:function(){return o},buffer:function(){return Zt.f3b},cast:function(){return Zt.pju},ceil:function(){return Zt.mDi},clipByValue:function(){return Zt.iUl},clone:function(){return Zt.d9v},complex:function(){return Zt.PYB},concat:function(){return Zt.zoF},concat1d:function(){return Zt.gME},concat2d:function(){return Zt.Izb},concat3d:function(){return Zt.MNy},concat4d:function(){return Zt.ZaL},conv1d:function(){return Zt.PAt},conv2d:function(){return Zt.Tek},conv2dTranspose:function(){return Zt.bc},conv3d:function(){return Zt.pdZ},conv3dTranspose:function(){return Zt.$QV},copyRegisteredKernels:function(){return bt.T3},cos:function(){return Zt.mCk},cosh:function(){return Zt.f9Y},cosineWindow:function(){return Zt.mew},cumprod:function(){return Zt.$Gn},cumsum:function(){return Zt.zbp},customGrad:function(){return we.cb},denseBincount:function(){return Zt.ppE},deprecationWarn:function(){return fe.MX},depthToSpace:function(){return Zt.nTT},depthwiseConv2d:function(){return Zt.B10},device_util:function(){return r},diag:function(){return Zt.Ka3},dilation2d:function(){return Zt.WmZ},disableDeprecationWarnings:function(){return fe.cF},dispose:function(){return fe.B9},disposeVariables:function(){return fe.N8},div:function(){return Zt.hiC},divNoNan:function(){return Zt.NTj},dot:function(){return Zt.AKD},dropout:function(){return Zt.rvX},einsum:function(){return Zt.WYO},elu:function(){return Zt.pyx},enableDebugMode:function(){return fe.R},enableProdMode:function(){return fe.G4},enclosingPowerOfTwo:function(){return Zt.GRh},engine:function(){return fe.SR},ensureShape:function(){return Zt.EDe},env:function(){return b.OB},equal:function(){return Zt.DgJ},erf:function(){return Zt.qNN},euclideanNorm:function(){return Zt.d2q},exp:function(){return Zt.Qqt},expandDims:function(){return Zt.dt4},expm1:function(){return Zt.t$B},eye:function(){return Zt.iyy},fft:function(){return Zt.kp_},fill:function(){return Zt.hlL},findBackend:function(){return fe.x3},findBackendFactory:function(){return fe.ze},floor:function(){return Zt.GWj},floorDiv:function(){return Zt.qPi},fused:function(){return Zt.imm},gather:function(){return Zt.Iqj},gatherND:function(){return Zt.dbB},gather_util:function(){return u},getBackend:function(){return fe.N_},getGradient:function(){return bt.uk},getKernel:function(){return bt.pI},getKernelsForBackend:function(){return bt.tr},grad:function(){return we.UQ},grads:function(){return we.ti},greater:function(){return Zt.pjt},greaterEqual:function(){return Zt.brS},ifft:function(){return Zt.Sxn},imag:function(){return Zt.asL},image:function(){return Zt.BHj},inTopKAsync:function(){return Zt.V3u},io:function(){return a},irfft:function(){return Zt.wx0},isFinite:function(){return Zt.xVT},isInf:function(){return Zt.UWc},isNaN:function(){return Zt.i2d},keep:function(){return fe.Cn},kernel_impls:function(){return p},leakyRelu:function(){return Zt.hi7},less:function(){return Zt.d9m},lessEqual:function(){return Zt.zN1},linalg:function(){return Zt.$r2},linspace:function(){return Zt.SX3},localResponseNormalization:function(){return Zt.G9k},log:function(){return Zt.cM7},log1p:function(){return Zt.Krr},logSigmoid:function(){return Zt.e_t},logSoftmax:function(){return Zt.CmS},logSumExp:function(){return Zt.l_t},logicalAnd:function(){return Zt.HvI},logicalNot:function(){return Zt.hJK},logicalOr:function(){return Zt.K5V},logicalXor:function(){return Zt.egP},losses:function(){return Zt.MB5},lowerBound:function(){return Zt.eab},matMul:function(){return Zt.OI3},math:function(){return i},max:function(){return Zt.Fp7},maxPool:function(){return Zt._sB},maxPool3d:function(){return Zt.YQQ},maxPoolWithArgmax:function(){return Zt.Ip$},maximum:function(){return Zt.gWQ},mean:function(){return Zt.J69},memory:function(){return fe.sq},meshgrid:function(){return Zt.ry_},min:function(){return Zt.VV$},minimum:function(){return Zt.LTh},mirrorPad:function(){return Zt.VdP},mod:function(){return Zt.wQq},moments:function(){return Zt.Gi7},movingAverage:function(){return Zt.p_},mul:function(){return Zt.dC7},multiRNNCell:function(){return Zt.rq4},multinomial:function(){return Zt.SJ_},neg:function(){return Zt.W76},nextFrame:function(){return tn},norm:function(){return Zt.KOy},notEqual:function(){return Zt.Quu},oneHot:function(){return Zt.lfX},ones:function(){return Zt.iUs},onesLike:function(){return Zt.JpU},op:function(){return Zt.op},outerProduct:function(){return Zt.N2O},pad:function(){return Zt.vku},pad1d:function(){return Zt.pNR},pad2d:function(){return Zt.koy},pad3d:function(){return Zt.t1L},pad4d:function(){return Zt.lGY},pool:function(){return Zt.d_R},pow:function(){return Zt.sQ3},prelu:function(){return Zt.AL3},print:function(){return Zt.S0v},prod:function(){return Zt.WVs},profile:function(){return fe.N5},raggedGather:function(){return Zt.$gW},raggedRange:function(){return Zt.VT$},raggedTensorToTensor:function(){return Zt.N89},rand:function(){return Zt.TN_},randomGamma:function(){return Zt.wzB},randomNormal:function(){return Zt.nGf},randomStandardNormal:function(){return Zt.ruB},randomUniform:function(){return Zt.LGj},randomUniformInt:function(){return Zt.pe5},range:function(){return Zt.w6H},ready:function(){return fe.Cd},real:function(){return Zt.kwC},reciprocal:function(){return Zt.M25},registerBackend:function(){return fe.jq},registerGradient:function(){return bt.Li},registerKernel:function(){return bt.wC},relu:function(){return Zt.UYe},relu6:function(){return Zt.btT},removeBackend:function(){return fe.cj},reshape:function(){return Zt.XLQ},reverse:function(){return Zt.GYS},reverse1d:function(){return Zt.SDf},reverse2d:function(){return Zt.diP},reverse3d:function(){return Zt.sx7},reverse4d:function(){return Zt.mG2},rfft:function(){return Zt.QEs},round:function(){return Zt.NMM},rsqrt:function(){return Zt.bp0},scalar:function(){return Zt.iD$},scatterND:function(){return Zt.snQ},scatter_util:function(){return $t},searchSorted:function(){return Zt.zcT},selu:function(){return Zt.U8D},separableConv2d:function(){return Zt.U_I},serialization:function(){return s},setBackend:function(){return fe.CQ},setPlatform:function(){return fe.VY},setdiff1dAsync:function(){return Zt.ODp},sigmoid:function(){return Zt.XD2},sign:function(){return Zt.Xxe},signal:function(){return Zt.tdS},sin:function(){return Zt.O$l},sinh:function(){return Zt.R_K},slice:function(){return Zt.tPi},slice1d:function(){return Zt.jZU},slice2d:function(){return Zt.SmN},slice3d:function(){return Zt.CnO},slice4d:function(){return Zt.p0P},slice_util:function(){return _t},softmax:function(){return Zt.XAC},softplus:function(){return Zt.Wvh},spaceToBatchND:function(){return Zt.fBT},sparse:function(){return Zt.rVs},sparseToDense:function(){return Zt.ers},spectral:function(){return Zt.uN7},split:function(){return Zt.Vl2},sqrt:function(){return Zt._b3},square:function(){return Zt.h62},squaredDifference:function(){return Zt.$i},squeeze:function(){return Zt.L9e},stack:function(){return Zt.knu},step:function(){return Zt.Nbs},stridedSlice:function(){return Zt.NXj},string:function(){return Zt.Z_8},sub:function(){return Zt.luU},sum:function(){return Zt.Smz},sumOutType:function(){return Qt.z4},tan:function(){return Zt.ORZ},tanh:function(){return Zt.AEp},tensor:function(){return Zt.XeE},tensor1d:function(){return Zt.RRF},tensor2d:function(){return Zt.odF},tensor3d:function(){return Zt.wOQ},tensor4d:function(){return Zt.yXz},tensor5d:function(){return Zt.Bfx},tensor6d:function(){return Zt.xZs},tensorScatterUpdate:function(){return Zt.Pg0},tensor_util:function(){return Rt},test_util:function(){return c},tidy:function(){return fe.lu},tile:function(){return Zt.Gg6},time:function(){return fe.XV},topk:function(){return Zt.hg7},train:function(){return Jt},transpose:function(){return Zt.p4s},truncatedNormal:function(){return Zt.Xu6},unique:function(){return Zt.Two},unregisterGradient:function(){return bt.bt},unregisterKernel:function(){return bt.nE},unsortedSegmentSum:function(){return Zt.pUJ},unstack:function(){return Zt.HHK},upcastType:function(){return Qt.x8},upperBound:function(){return Zt.GaM},util:function(){return Ft},valueAndGrad:function(){return we.h7},valueAndGrads:function(){return we.fN},variable:function(){return Zt.VD$},variableGrads:function(){return we.pn},version_core:function(){return Xt},where:function(){return Zt.arb},whereAsync:function(){return Zt.itS},zeros:function(){return Zt.lls},zerosLike:function(){return Zt.P84}});var r={};n.r(r),n.d(r,{isBrowser:function(){return y},isMobile:function(){return g},mockIsMobile:function(){return m}});var s={};n.r(s),n.d(s,{Serializable:function(){return Ie},SerializationMap:function(){return Te},getRegisteredName:function(){return Ee},registerClass:function(){return Ce}});var a={};n.r(a),n.d(a,{CompositeArrayBuffer:function(){return T.w},browserFiles:function(){return je},browserHTTPRequest:function(){return nt},concatenateArrayBuffers:function(){return v.JY},copyModel:function(){return te},decodeWeights:function(){return v.dI},decodeWeightsStream:function(){return v.r},encodeWeights:function(){return v.yz},fromMemory:function(){return it},fromMemorySync:function(){return ot},getLoadHandlers:function(){return I},getModelArtifactsForJSON:function(){return v.jN},getModelArtifactsForJSONSync:function(){return v.ji},getModelArtifactsInfoForJSON:function(){return v.Q},getSaveHandlers:function(){return S},getWeightSpecs:function(){return v.hu},http:function(){return tt},isHTTPScheme:function(){return Je},listModels:function(){return J},loadWeights:function(){return Qe},moveModel:function(){return ne},registerLoadRouter:function(){return N},registerSaveRouter:function(){return k},removeModel:function(){return ee},weightsLoaderFactory:function(){return Ze},withSaveHandler:function(){return ut},withSaveHandlerSync:function(){return ct}});var i={};n.r(i),n.d(i,{confusionMatrix:function(){return mt}});var o={};n.r(o),n.d(o,{draw:function(){return Ct},fromPixels:function(){return Et},fromPixelsAsync:function(){return St},toPixels:function(){return Tt}});var u={};n.r(u),n.d(u,{prepareAndValidate:function(){return At}});var c={};n.r(c),n.d(c,{TEST_EPSILON_FLOAT16:function(){return Ot},createVideoElement:function(){return jt},encodeStrings:function(){return Ht},expectArrayBuffersEqual:function(){return Gt},expectArraysClose:function(){return Mt},expectArraysEqual:function(){return Pt},expectNumbersClose:function(){return Vt},expectPromiseToFail:function(){return Lt},expectValuesInRange:function(){return Ut},play:function(){return qt},testEpsilon:function(){return zt}});var l={};n.r(l),n.d(l,{collectGatherOpShapeInfo:function(){return ur},computeOutShape:function(){return or},segOpComputeOptimalWindowSize:function(){return ir}});var d={};n.r(d),n.d(d,{ERF_A1:function(){return Nn},ERF_A2:function(){return Sn},ERF_A3:function(){return In},ERF_A4:function(){return Tn},ERF_A5:function(){return Cn},ERF_P:function(){return kn},PARALLELIZE_THRESHOLD:function(){return hn},RowPartitionType:function(){return an},SELU_SCALE:function(){return wn.$},SELU_SCALEALPHA:function(){return wn.y},applyActivation:function(){return un.QH},assertAndGetBroadcastShape:function(){return gt.assertAndGetBroadcastShape},assertAxesAreInnerMostDims:function(){return nn.lB},assertParamsConsistent:function(){return rn},assignToTypedArray:function(){return Dn},axesAreInnerMostDims:function(){return nn.YB},calculateShapes:function(){return $t.calculateShapes},checkEinsumDimSizes:function(){return Un},checkPadOnDimRoundingMode:function(){return on.m},combineLocations:function(){return nn.Vh},combineRaggedTensorToTensorShapes:function(){return cn},complexWithEvenIndex:function(){return _n},complexWithOddIndex:function(){return Rn},computeConv2DInfo:function(){return on.Ix},computeConv3DInfo:function(){return on.jw},computeDefaultPad:function(){return on.aO},computeDilation2DInfo:function(){return on.Rf},computeOptimalWindowSize:function(){return fn},computeOutAndReduceShapes:function(){return nn.kz},computeOutShape:function(){return sn},computePool2DInfo:function(){return on.Xw},computePool3DInfo:function(){return on.pl},convertConv2DDataFormat:function(){return on.sl},decodeEinsumEquation:function(){return Vn},eitherStridesOrDilationsAreOne:function(){return on.jT},expandShapeToKeepDim:function(){return nn.rv},exponent:function(){return Mn},exponents:function(){return On},fromStringArrayToUint8:function(){return lr},fromUint8ToStringArray:function(){return cr},getAxesPermutation:function(){return nn.Q3},getBroadcastDims:function(){return gt.getBroadcastDims},getComplexWithIndex:function(){return Fn},getEinsumComputePath:function(){return Gn},getEinsumPermutation:function(){return Wn},getFusedBiasGradient:function(){return un.pf},getFusedDyActivation:function(){return un.Fr},getImageCenter:function(){return mn},getInnerMostAxes:function(){return nn.sY},getPermuted:function(){return yn},getRaggedRank:function(){return dn},getReductionAxes:function(){return gt.getReductionAxes},getReshaped:function(){return gn},getReshapedPermuted:function(){return bn},getRowPartitionTypesHelper:function(){return ln},getSliceBeginCoords:function(){return xn},getSliceSize:function(){return vn},getSparseFillEmptyRowsIndicesDenseShapeMismatch:function(){return Xn},getSparseFillEmptyRowsNegativeIndexErrorMessage:function(){return Kn},getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:function(){return Qn},getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:function(){return Jn},getSparseReshapeInputOutputMismatchErrorMessage:function(){return tr},getSparseReshapeInputOutputMultipleErrorMessage:function(){return er},getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:function(){return Zn},getSparseReshapeNegativeOutputDimErrorMessage:function(){return Yn},getSparseSegmentReductionIndicesOutOfRangeErrorMessage:function(){return ar},getSparseSegmentReductionNegativeSegmentIdsErrorMessage:function(){return nr},getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:function(){return rr},getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:function(){return sr},getUndoAxesPermutation:function(){return nn.LJ},isIdentityPermutation:function(){return Hn},log:function(){return En.c},mergeRealAndImagArrays:function(){return An},prepareAndValidate:function(){return At},prepareSplitSize:function(){return qn},segment_util:function(){return l},shouldFuse:function(){return un.uy},slice_util:function(){return _t},splitRealAndImagArrays:function(){return $n},stridesOrDilationsArePositive:function(){return on.U3},tupleValuesAreOne:function(){return on.I0},upcastType:function(){return Qt.x8},validateDefaultValueShape:function(){return pn},validateInput:function(){return $t.validateInput},validateUpdateShape:function(){return $t.validateUpdateShape},warn:function(){return En.Z}});var p={};n.r(p),n.d(p,{nonMaxSuppressionV3Impl:function(){return dr.GP},nonMaxSuppressionV4Impl:function(){return dr.qP},nonMaxSuppressionV5Impl:function(){return dr.pA},whereImpl:function(){return pr.Z}});var h=n(7097);let f;function m(e){f=e}function g(e){if(void 0!==f)return f;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function y(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var b=n(2885);const x=(0,b.OB)();x.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),x.registerFlag("IS_BROWSER",(()=>y())),x.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),x.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),x.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),x.registerFlag("PROD",(()=>!1)),x.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>x.getBool("DEBUG"))),x.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),x.registerFlag("IS_TEST",(()=>!1)),x.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>x.getBool("DEBUG"))),x.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),x.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),x.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));var v=n(1989);class w{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==w.instance&&(w.instance=new w),w.instance}static registerSaveRouter(e){w.getInstance().saveRouters.push(e)}static registerLoadRouter(e){w.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return w.getHandlers(e,"save")}static getLoadHandlers(e,t){return w.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?w.getInstance().loadRouters:w.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const k=e=>w.registerSaveRouter(e),N=e=>w.registerLoadRouter(e),S=e=>w.getSaveHandlers(e),I=(e,t)=>w.getLoadHandlers(e,t);var T=n(574);const C="tensorflowjs",E="models_store",A="model_info_store";function $(){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function _(e){const t=e.result;t.createObjectStore(E,{keyPath:"modelPath"}),t.createObjectStore(A,{keyPath:"modelPath"})}class R{constructor(e){if(this.indexedDB=$(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(C,1);r.onupgradeneeded=()=>_(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(E,"readonly"),r=t.objectStore(E).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{t.weightData=T.w.join(t.weightData);const r=(0,v.Q)(t),i=s.transaction(A,"readwrite");let o,u,c=i.objectStore(A);try{o=c.put({modelPath:this.modelPath,modelArtifactsInfo:r})}catch(a){return n(a)}o.onsuccess=()=>{u=s.transaction(E,"readwrite");const o=u.objectStore(E);let l;try{l=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r})}catch(a){return n(a)}l.onsuccess=()=>e({modelArtifactsInfo:r}),l.onerror=e=>{c=i.objectStore(A);const t=c.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(l.error)),t.onerror=e=>(s.close(),n(l.error))}},o.onerror=e=>(s.close(),n(o.error)),i.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}R.URL_SCHEME="indexeddb://";const F=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(R.URL_SCHEME)?(t=e.slice(R.URL_SCHEME.length),new R(t)):null;var t};w.registerSaveRouter(F),w.registerLoadRouter(F);class D{constructor(){this.indexedDB=$()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(C,1);n.onupgradeneeded=()=>_(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(A,"readonly"),a=s.objectStore(A).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(R.URL_SCHEME)?t.slice(R.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(C,1);r.onupgradeneeded=()=>_(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(A,"readwrite"),i=a.objectStore(A),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{u=s.transaction(E,"readwrite");const r=u.objectStore(E).delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}var O=n(569);const M="/",z="tensorflowjs_models",B="info",L="model_topology",P="weight_specs",V="weight_data",W="model_metadata";function U(e){return{info:[z,e,B].join(M),topology:[z,e,L].join(M),weightSpecs:[z,e,P].join(M),weightData:[z,e,V].join(M),modelMetadata:[z,e,W].join(M)}}function G(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function H(e){const t=e.split(M);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(M)}class j{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=U(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=(0,v.Q)(e),a=T.w.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,(0,v._n)(a));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:s}}catch(t){throw G(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=(0,v.n7)(a),t}}j.URL_SCHEME="localstorage://";const q=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(j.URL_SCHEME)?(t=e.slice(j.URL_SCHEME.length),new j(t)):null;var t};w.registerSaveRouter(q),w.registerLoadRouter(q);class X{constructor(){(0,O.hu)((0,b.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,O.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=z+M,n=M+B;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[H(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=U(e=(t=e).startsWith(j.URL_SCHEME)?t.slice(j.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return G(n),r}}const K="://";class Q{constructor(){this.managers={}}static getInstance(){return null==Q.instance&&(Q.instance=new Q),Q.instance}static registerManager(e,t){(0,O.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(K)&&(e=e.slice(0,e.indexOf(K))),(0,O.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=Q.getInstance();(0,O.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Q.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Q.getInstance().managers)}}function Z(e){if(-1===e.indexOf(K))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Q.getSchemes().join(",")}`);return{scheme:e.split(K)[0],path:e.split(K)[1]}}async function Y(e,t,n=!1){(0,O.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=w.getLoadHandlers(e);(0,O.hu)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,O.hu)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=w.getSaveHandlers(t);(0,O.hu)(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,O.hu)(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Z(e).scheme,u=Z(e).path,c=o===Z(e).scheme,l=await s.load();n&&c&&await Q.getManager(o).removeModel(u);const d=await i.save(l);return n&&!c&&await Q.getManager(o).removeModel(u),d.modelArtifactsInfo}async function J(){const e=Q.getSchemes(),t={};for(const n of e){const e=await Q.getManager(n).listModels();for(const r in e){t[n+K+r]=e[r]}}return t}async function ee(e){const t=Z(e);return Q.getManager(t.scheme).removeModel(t.path)}async function te(e,t){return Y(e,t,!1)}async function ne(e,t){return Y(e,t,!0)}var re=n(9742);class se{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&(0,b.OB)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}isTypedArray(e){return(0,re.j)(e)}}if((0,b.OB)().get("IS_BROWSER")){(0,b.OB)().setPlatform("browser",new se);try{Q.registerManager(j.URL_SCHEME,new X)}catch(fr){}try{Q.registerManager(R.URL_SCHEME,new D)}catch(fr){}}const ae=()=>n(5410);let ie;class oe{constructor(){this.util=n(8628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,b.OB)().global.fetch?(0,b.OB)().global.fetch(e,t):(null==ie&&(ie=ae()),ie(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}}(0,b.OB)().get("IS_NODE")&&!(0,b.OB)().get("IS_BROWSER")&&(0,b.OB)().setPlatform("node",new oe);var ue=n(2657),ce=n(2271),le=n(8723),de=n(9798),pe=n(4077);(0,h.wv)();const he={buffer:ue.f,cast:ce.p,clone:le.d,print:de.S};(0,pe.Vp)(he);var fe=n(4368),me=n(6407),ge=n(1274),ye=n(4841),be=n(3261),xe=n(248),ve=n(6577),we=n(633),ke=n(9494);const Ne=new Map,Se=new Map;class Ie{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Te{constructor(){this.classNameMap={}}static getMap(){return null==Te.instance&&(Te.instance=new Te),Te.instance}static register(e){Te.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ce(e,t,n){(0,O.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,O.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,O.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const r=t+">"+n;return Te.register(e),Ne.set(r,e),Se.set(e,r),e}function Ee(e){return Se.has(e)?Se.get(e):e.className}class Ae extends Ie{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return(0,fe.B9)(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,we.pn)(e,t)}dispose(){null!=this.iterations_&&(0,fe.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,ke.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ae,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class $e extends Ae{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=h.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,fe.lu)((()=>(0,ve.P)(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,fe.lu)((()=>(0,ve.P)(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;(0,fe.lu)((()=>{const e=(0,me.I)((0,ye.d)(a,this.rho),(0,ye.d)((0,xe.h)(s),1-this.rho)),t=(0,ye.d)((0,ge.h)((0,be._)((0,me.I)(i,this.epsilon)),(0,be._)((0,me.I)(a,this.epsilon))),s),n=(0,me.I)((0,ye.d)(i,this.rho),(0,ye.d)((0,xe.h)(t),1-this.rho));a.assign(e),i.assign(n);const o=(0,me.I)((0,ye.d)(t,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,fe.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,fe.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}var _e=n(4006);class Re extends Ae{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,fe.lu)((()=>(0,_e.h)(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;(0,fe.lu)((()=>{const e=(0,me.I)(a,(0,xe.h)(s));a.assign(e);const t=(0,me.I)((0,ye.d)((0,ge.h)(s,(0,be._)((0,me.I)(e,h.BV.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,fe.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}var Fe=n(3453),De=n(827);class Oe extends Ae{static get className(){return"Adam"}constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,fe.lu)((()=>{this.accBeta1=(0,ke.i)(t).variable(),this.accBeta2=(0,ke.i)(n).variable()})),null==r&&(this.epsilon=h.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,fe.lu)((()=>{const n=(0,De.l)(1,this.accBeta1),r=(0,De.l)(1,this.accBeta2);t.forEach(((t,s)=>{const a=h.BV.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:(0,fe.lu)((()=>(0,ve.P)(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:(0,fe.lu)((()=>(0,ve.P)(a).variable(false)))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,c=(0,me.I)((0,ye.d)(o,this.beta1),(0,ye.d)(i,1-this.beta1)),l=(0,me.I)((0,ye.d)(u,this.beta2),(0,ye.d)((0,xe.h)(i),1-this.beta2)),d=(0,ge.h)(c,n),p=(0,ge.h)(l,r);o.assign(c),u.assign(l);const f=(0,me.I)((0,ye.d)((0,ge.h)(d,(0,me.I)((0,be._)(p),this.epsilon)),-this.learningRate),a);a.assign(f)})),this.accBeta1.assign((0,ye.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,ye.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,fe.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,fe.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,fe.lu)((()=>{this.accBeta1.assign((0,Fe.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,Fe.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}var Me=n(6235),ze=n(632);class Be extends Ae{static get className(){return"Adamax"}constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,fe.lu)((()=>{this.iteration=(0,ke.i)(0).variable(),this.accBeta1=(0,ke.i)(t).variable()})),null==r&&(this.epsilon=h.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,fe.lu)((()=>{const n=(0,De.l)(1,this.accBeta1),r=(0,ge.h)(-this.learningRate,(0,me.I)((0,ye.d)(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=h.BV.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:(0,ve.P)(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:(0,ve.P)(a).variable(false)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,c=(0,me.I)((0,ye.d)(o,this.beta1),(0,ye.d)(i,1-this.beta1)),l=(0,ye.d)(u,this.beta2),d=(0,Me.W)(i),p=(0,ze.g)(l,d);o.assign(c),u.assign(p);const f=(0,me.I)((0,ye.d)((0,ge.h)(r,n),(0,ge.h)(c,(0,me.I)(p,this.epsilon))),a);a.assign(f)})),this.iteration.assign((0,me.I)(this.iteration,1)),this.accBeta1.assign((0,ye.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,fe.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,fe.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class Le extends Ae{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=h.BV.registeredVariables[t];(0,fe.lu)((()=>{const e=(0,me.I)((0,ye.d)(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,fe.Cn)((0,ke.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Pe extends Le{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,ke.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,fe.lu)((()=>(0,ve.P)(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&(0,fe.lu)((()=>{let e;const t=(0,me.I)((0,ye.d)(this.m,s),a);e=this.useNesterov?(0,me.I)((0,ye.d)(this.c,(0,me.I)(a,(0,ye.d)(t,this.m))),r):(0,me.I)((0,ye.d)(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,fe.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Ve extends Ae{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=h.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,fe.lu)((()=>(0,ve.P)(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,fe.lu)((()=>(0,ve.P)(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,fe.lu)((()=>(0,ve.P)(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;(0,fe.lu)((()=>{const e=(0,me.I)((0,ye.d)(i,this.decay),(0,ye.d)((0,xe.h)(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=(0,me.I)((0,ye.d)(t,this.decay),(0,ye.d)(a,1-this.decay)),u=(0,ge.h)((0,ye.d)(a,this.learningRate),(0,be._)((0,De.l)(e,(0,me.I)((0,xe.h)(s),this.epsilon)))),c=(0,me.I)((0,ye.d)(o,this.momentum),u);i.assign(e),t.assign(s),o.assign(c);const l=(0,De.l)(r,c);r.assign(l)}else{const e=(0,me.I)((0,ye.d)(i,this.decay),(0,ye.d)((0,xe.h)(a),1-this.decay)),t=(0,me.I)((0,ye.d)(o,this.momentum),(0,ge.h)((0,ye.d)(a,this.learningRate),(0,be._)((0,me.I)(e,this.epsilon))));i.assign(e),o.assign(t);const n=(0,De.l)(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,fe.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,fe.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,fe.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const We=[$e,Re,Oe,Be,Pe,Ve,Le];function Ue(e){return new Promise((e=>setTimeout(e))).then(e)}class Ge{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ge.URL_SCHEME)&&(e=e.slice(Ge.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=T.w.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r=(0,v.Yd)(e,t),s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=s,await Ue((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await Ue((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:(0,v.Q)(e)}}}}Ge.URL_SCHEME="downloads://";class He{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=(0,v.jN)(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const a of e)t.push(...a.weights),n.push(...a.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>(0,v.EZ)(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=(0,v.EZ)(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function je(e){return new He(e)}function qe(e,t,n,r){!function(e){(0,O.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,O.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,O.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,O.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++s/e.length*(r-n);return t(i),a})),a))))}w.registerSaveRouter((e=>(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ge.URL_SCHEME)?function(e="model"){return new Ge(e)}(e.slice(Ge.URL_SCHEME.length)):null));var Xe=n(5771);async function Ke(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,b.OB)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await qe(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await qe(s,t.onProgress,.5,1)}async function Qe(e,t="",n,r){return Ze((e=>Ke(e,{requestInit:r})))(e,t,n)}function Ze(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},i=null!=r?r.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,c=Xe.J[u]*O.NA(e.shape),l=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:c})};null!=r?r.forEach(((t,n)=>{t===e.name&&(l(),i[n]=!0)})):l(),o.push(e.name),n+=c}))})),!i.every((e=>e))){const e=r.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),c=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;c.push(t)}))}));const l=await e(c),d={};let p=0;return u.forEach((e=>{const n=t[e].paths.length,r=new T.w(l.slice(p,p+n));a[e].forEach((e=>{const t=r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),n=(0,v.dI)(t,[e.manifestEntry]);for(const r in n)d[r]=n[r]})),p+=n})),d}}class Ye{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,O.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,b.OB)().platform.fetch,(0,O.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,O.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r=(0,v.Yd)(e,n);if(t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=T.w.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:(0,v.Q)(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(s){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){if(this.loadOptions.streamWeights)return this.loadStream();const e=await this.loadModelJSON();return(0,v.jN)(e,(e=>this.loadWeights(e)))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=(0,v.hu)(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const r=null==t.fetchFunc?(0,b.OB)().platform.fetch:t.fetchFunc;let s,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var i;a<e.length;){if(!s){const n=(await r(e[a],t.requestInit,{isBinary:!0})).body;s=n.getReader()}const{done:o,value:u}=await s.read();if(!o)return void n.enqueue(u);a++,s=void 0,null===(i=t.onProgress)||void 0===i||i.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=[],i=[];for(const o of e)for(const e of o.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(s+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[(0,v.hu)(e),await Ke(t,this.loadOptions)]}}function Je(e){return null!=e.match(Ye.URL_SCHEME_REGEX)}Ye.URL_SCHEME_REGEX=/^https?:\/\//;const et=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Je(e))):Je(e),n)return tt(e,t)}return null};function tt(e,t){return new Ye(e,t)}function nt(e,t){return tt(e,t)}w.registerSaveRouter(et),w.registerLoadRouter(et);class rt{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class st{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class at{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function it(e,t,n,r){return new at(ot(...arguments))}function ot(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new rt(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new rt({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new rt({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function ut(e){return new st(e)}function ct(e){return new st(e)}var lt=n(3740),dt=n(8687),pt=n(6708),ht=n(2668),ft=n(9065);const mt=(0,ht.op)({confusionMatrix_:function(e,t,n){const r=(0,lt._1)(e,"labels","confusionMatrix"),s=(0,lt._1)(t,"predictions","confusionMatrix");O.hu(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),O.hu(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),O.hu(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),O.hu(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),O.hu(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=(0,pt.l)((0,ce.p)(r,"int32"),n),i=(0,pt.l)((0,ce.p)(s,"int32"),n),o=(0,ft.p)(a),u=(0,dt.O)(o,i);return(0,ce.p)(u,"int32")}});var gt=n(2200),yt=n(9121),bt=n(6151),xt=n(9906);let vt,wt=!1;function kt(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=(0,bt.pI)(yt.eBW,h.BV.backendName)){const n={pixels:e},r={numChannels:t};return h.BV.runKernel(yt.eBW,n,r)}const[u,c]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let l,d;if(i)l=e.getContext("2d").getImageData(0,0,u,c).data;else if(r||n)l=e.data;else if(a||s||o){if(null==vt)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");vt=new OffscreenCanvas(1,1).getContext("2d")}else vt=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});vt.canvas.width=u,vt.canvas.height=c,vt.drawImage(e,0,0,u,c),l=vt.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(l);else{const e=u*c;d=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)d[n*t+e]=l[4*n+e]}const p=[c,u,t];return(0,xt.w)(d,p,"int32")}function Nt(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function St(e,t=3){let n=null;if((0,b.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&Nt(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(r){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return kt(n,t)}function It(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function Tt(e,t){let n=(0,lt._1)(e,"img","toPixels");if(!(e instanceof pe.es)){const e=n;n=(0,ce.p)(e,"int32"),e.dispose()}It(n);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2],i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let c=0;c<r*s;++c){const e=[0,0,0,255];for(let r=0;r<a;r++){const t=i[c*a+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[r]=t*o}const t=4*c;u[t+0]=Math.round(e[0]),u[t+1]=Math.round(e[1]),u[t+2]=Math.round(e[2]),u[t+3]=Math.round(e[3])}if(null!=t){if(!wt){null!=(0,bt.pI)(yt.hGc,h.BV.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),wt=!0)}t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}function Ct(e,t,n){let r=(0,lt._1)(e,"img","draw");if(!(e instanceof pe.es)){const e=r;r=(0,ce.p)(e,"int32"),e.dispose()}It(r),function(e){const t=(null==e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==n?void 0:n.imageOptions);const s={image:r},a={canvas:t,options:n};h.BV.runKernel(yt.hGc,s,a)}const Et=(0,ht.op)({fromPixels_:kt});function At(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===(0,O.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let d=0;d<s.length-1;++d)i*=s[d];const o=e.shape,u=s.slice();u.pop();let c=1;for(let d=a;d<n;++d)c*=o[d],u.push(o[d]);const l=[...(0,O.e3)(e.shape).map((e=>e/c)),1].slice(0,a);return[u,i,c,l]}var $t=n(3028),_t=n(7650),Rt=n(747),Ft=n(9122);const Dt=.001,Ot=.1;function Mt(e,t,n){return null==n&&(n=zt()),Bt(e,t,((e,t)=>Wt(e,t,n)))}function zt(){return 32===h.BV.backend.floatPrecision()?Dt:Ot}function Bt(e,t,n){let r=!0;if(((0,Ft.isTypedArray)(e)||(0,Ft.isTypedArray)(t))&&(r=!1),(0,Ft.isTypedArray)(e)&&(0,Ft.isTypedArray)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,lt.C)(e),r=(0,lt.C)(t);if(!(0,O.cO)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=(0,Ft.isTypedArray)(e)?e:(0,Ft.flatten)(e),a=(0,Ft.isTypedArray)(t)?t:(0,Ft.flatten)(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let i=0;i<a.length;++i){const e=s[i],t=a[i];if(!n(e,t))throw new Error(`Arrays differ: actual[${i}] = ${e}, expected[${i}] = ${t}.\nActual:   ${s}.\nExpected: ${a}.`)}"undefined"!=typeof expect&&expect().nothing()}function Lt(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function Pt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,O.HD)(e)||(0,O.HD)(e[0])||(0,O.HD)(t)||(0,O.HD)(t[0])?Bt(e,n,((e,t)=>e==t)):Bt(e,t,((e,t)=>Wt(e,t,0)))}function Vt(e,t,n){if(null==n&&(n=zt()),!Wt(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Wt(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Ut(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function Gt(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let s=0;s<r.length;s++)if(n[s]!==r[s])throw new Error(`Expected ArrayBuffer value at ${s} to be ${r[s]} but got ${n[s]} instead`)}function Ht(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Ht(n):e[t]=(0,Ft.encodeString)(n)}return e}function jt(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function qt(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}const Xt="4.15.0";class Kt{static sgd(e){return new Le(e)}static momentum(e,t,n=!1){return new Pe(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new Ve(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Oe(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new $e(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new Be(e,t,n,r,s)}static adagrad(e,t=.1){return new Re(e,t)}}var Qt=n(1221),Zt=n(1336),Yt=n(9876);const Jt=Kt,en="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function tn(){return new Promise((e=>en((()=>e()))))}var nn=n(3591);function rn(e,t){const n=e[0].length;e.forEach(((e,t)=>{O.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),O.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)O.hu(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function sn(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var an,on=n(2582),un=n(9323);function cn(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],i=r[r.length-n.length+s],o=r[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${o}`)}else r[i]=a}return r}function ln(e){const t={FIRST_DIM_SIZE:an.FIRST_DIM_SIZE,VALUE_ROWIDS:an.VALUE_ROWIDS,ROW_LENGTHS:an.ROW_LENGTHS,ROW_SPLITS:an.ROW_SPLITS,ROW_LIMITS:an.ROW_LIMITS,ROW_STARTS:an.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function dn(e){return 0===e.length?0:e[0]===an.FIRST_DIM_SIZE?e.length-1:e.length}function pn(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(an||(an={}));const hn=30;function fn(e){return e<=hn?e:(0,O.jP)(e,Math.floor(Math.sqrt(e)))}function mn(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function gn(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function yn(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function bn(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let a=1;a<e.length;++a)a<=t.length?r?s.push(t[a-1]*e[a]):s.push(e[a]/t[a-1]):s.push(e[a]);return s}function xn(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function vn(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}var wn=n(3179);const kn=.3275911,Nn=.254829592,Sn=-.284496736,In=1.421413741,Tn=-1.453152027,Cn=1.061405429;var En=n(4706);function An(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function $n(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function _n(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=0;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function Rn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=2;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function Fn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Dn(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function On(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Mn(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const zn="->",Bn=/->/g,Ln=",",Pn="...";function Vn(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Bn,"").length)/zn.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${zn}").`);const[r,s]=e.split(zn);(0,O.hu)(-1===r.indexOf(Pn),(()=>`The ellipsis notation ("${Pn}") is not supported yet.`));const a=r.split(Ln),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let d=0;d<s.length;++d){const e=s[d];if(!a.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let d=0;d<r.length;++d){const e=r[d];-1===o.indexOf(e)&&e!==Ln&&o.push(e)}const u=new Array(a.length);for(let d=0;d<i;++d){if(new Set(a[d].split("")).size!==a[d].length)throw new Error(`Found duplicate axes in input component ${a[d]}. Support for duplicate axes in input is not implemented yet.`);u[d]=[];for(let e=0;e<a[d].length;++e)u[d].push(o.indexOf(a[d][e]))}const c=o.length,l=[];for(let d=s.length;d<c;++d)l.push(d);return{allDims:o,summedDims:l,idDims:u}}function Wn(e,t){let n=new Array(e);n.fill(-1);for(let s=0;s<t.length;++s)n[t[s]]=s;const r=[];for(let s=0;s<e;++s)-1===n[s]&&r.push(s);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Un(e,t,n){const r=new Array(e);for(let s=0;s<n.length;++s){const e=n[s].shape;for(let n=0;n<t[s].length;++n)void 0===r[t[s][n]]?r[t[s][n]]=e[n]:(0,O.hu)(r[t[s][n]]===e[n],(()=>`Expected dimension ${r[t[s][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`))}}function Gn(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let i=0;i<s;++i)r.push([]);const a=[];for(let i=0;i<n.length;++i){const e=jn(t,n[i]);for(const t of e)-1===a.indexOf(t)&&(r[i].push(t),a.push(t))}return{path:n,steps:r}}function Hn(e){return e.every(((e,t)=>e===t))}function jn(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function qn(e,t,n=0){let r=[];if("number"==typeof t)(0,O.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const s=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,O.hu)(s<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const r=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-r}(0,O.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Xn(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Kn(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Qn(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Zn(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Yn(e,t){return`size ${e} must be non-negative, not ${t}`}function Jn(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function er(e,t){return`Input to reshape is a SparseTensor with ${(0,O.NA)(e)}\n  dense values, but the requested shape requires a multiple of ${(0,O.NA)(t)}. inputShape=${e} outputShape= ${t}`}function tr(e,t){return`Input to reshape is a tensor with ${(0,O.NA)(e)} dense values, but the requested shape has ${(0,O.NA)(t)}. inputShape=${e} outputShape=${t}`}function nr(){return"segment ids must be >= 0"}function rr(){return"segment ids are not increasing"}function sr(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function ar(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function ir(e,t){let n,r=!1;for(e<=hn?(n=e,r=!0):n=(0,O.jP)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=(0,O.jP)(e,n+1);return n}function or(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function ur(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let d=0;d<r;++d)if(e.shape[d]!==t.shape[d])throw new Error(`x.shape[${d}]: ${e.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`);const i=e.shape[n],o=[];let u=1,c=1,l=1;for(let d=0;d<r;++d)o.push(e.shape[d]),u*=e.shape[d];for(let d=r;d<n;d++)o.push(e.shape[d]),c*=e.shape[d];for(let d=r;d<s;d++)o.push(t.shape[d]);for(let d=n+1;d<a;d++)o.push(e.shape[d]),l*=e.shape[d];return{batchSize:u,sliceSize:l,outerSize:c,dimSize:i,outputShape:o}}function cr(e){try{return e.map((e=>(0,Ft.decodeString)(e)))}catch(fr){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${fr}`)}}function lr(e){return e.map((e=>(0,Ft.encodeString)(e)))}var dr=n(3337),pr=n(8333),hr=n(8713);!function(){for(const e of We)Ce(e)}()},574:function(e,t,n){"use strict";n.d(t,{w:function(){return s}});var r=n(9122);class s{static join(e){return new s(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>r.isTypedArray(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const r=e[n];n!==e.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const s=t+r.byteLength;this.shards.push({buffer:r,start:t,end:s}),t=s}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const r=new ArrayBuffer(t-e),s=new Uint8Array(r);let a=0;for(let i=n;i<this.shards.length;i++){const n=this.shards[i],r=e+a-n.start,o=a,u=Math.min(t,n.end)-n.start,c=new Uint8Array(n.buffer,r,u-r);if(s.set(c,o),a+=c.length,t<n.end)break}return r}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,r=e.length;for(;n<=r;){const s=Math.floor((r-n)/2)+n,a=t(e[s]);if(0===a)return s;a<0?r=s:n=s+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}},1989:function(e,t,n){"use strict";n.d(t,{EZ:function(){return S},JY:function(){return N},Q:function(){return E},Yd:function(){return I},_n:function(){return w},dI:function(){return p},hu:function(){return A},jN:function(){return C},ji:function(){return T},n7:function(){return k},r:function(){return y},yz:function(){return d}});var r=n(1661),s=n(701),a=n(569),i=n(5771),o=n(574),u=n(4368),c=n(2885);const l=4;async function d(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+l*t.length,r=new Uint8Array(n);let s=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,s),s+=l,r.set(e,s),s+=e.length}e(r)}));r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:b(await Promise.all(r)),specs:n}}function p(e,t){const n=new o.w(e),r={};let s=0;for(const a of t){const e=h(a,((e,t)=>n.slice(s+e,s+t)));r[a.name]=m(a,n.slice(s,s+e)),s+=e}return r}function h(e,t){const n=(0,a.NA)(e.shape);let r;if("quantization"in e){const t=e.quantization;r=i.J[t.dtype]}else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=l+new Uint32Array(t(e,e+l))[0];return e}r=i.J[e.dtype]}return n*r}async function f(e,t){const n=(0,a.NA)(e.shape);let r;if("quantization"in e){const t=e.quantization;r=i.J[t.dtype]}else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=l+new Uint32Array(await t(e,e+l))[0];return e}r=i.J[e.dtype]}return n*r}function m(e,t){const n=e.name,o=e.dtype,u=e.shape,c=(0,a.NA)(u);let d,p=0;if("quantization"in e){const r=e.quantization;if("uint8"===r.dtype||"uint16"===r.dtype){if(!("min"in r)||!("scale"in r))throw new Error(`Weight ${e.name} with quantization ${r.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==r.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${r.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${e.name} is quantized with ${r.dtype} which only supports weights of type float32 not ${o}.`)}const s=i.J[r.dtype],a="uint8"===r.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===o)if("uint8"===r.dtype||"uint16"===r.dtype){d=new Float32Array(a.length);for(let e=0;e<a.length;e++){const t=a[e];d[e]=t*r.scale+r.min}}else{if("float16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type float32.`);{const e=function(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const s=r[i],o=e[n[s>>10]+(1023&s)]+t[s>>10];a[i]=o}return new Float32Array(s)}}();d=e(a)}}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${n}': ${o}`);if("uint8"!==r.dtype&&"uint16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type int32.`);d=new Int32Array(a.length);for(let e=0;e<a.length;e++){const t=a[e];d[e]=Math.round(t*r.scale+r.min)}}p+=c*s}else if("string"===o){const n=(0,a.NA)(e.shape);d=[];for(let e=0;e<n;e++){const e=new Uint32Array(t.slice(p,p+l))[0];p+=l;const n=new Uint8Array(t.slice(p,p+e));d.push(n),p+=e}}else{const e=i.J[o];if("float32"===o)d=new Float32Array(t);else if("int32"===o)d=new Int32Array(t);else{if("bool"!==o){if("complex64"===o){d=new Float32Array(t);const e=new Float32Array(d.length/2),n=new Float32Array(d.length/2);for(let t=0;t<e.length;t++)e[t]=d[2*t],n[t]=d[2*t+1];const a=(0,s.X)(e,u,"float32"),i=(0,s.X)(n,u,"float32"),o=(0,r.P)(a,i);return a.dispose(),i.dispose(),o}throw new Error(`Unsupported dtype in weight '${n}': ${o}`)}d=new Uint8Array(t)}p+=c*e}return(0,s.X)(d,u,o)}async function g(e,t,n){let r=new Uint8Array(t);for(;r.byteLength<n;){const{done:t,value:s}=await e.read();if(t&&null==s){const e=n-r.byteLength;throw new Error(`Reader is done but ${e} bytes are still expected`)}const a=new Uint8Array(r.length+s.byteLength);a.set(r,0),a.set(new Uint8Array(s),r.length),r=a}return r.buffer}async function y(e,t){const n={},r=e.getReader();let s=new ArrayBuffer(0);for(const i of t){const e=await f(i,(async(e,t)=>(s=await g(r,s,t),s.slice(e,t))));s=await g(r,s,e);const t=s.slice(0,e);s=s.slice(e);const o=m(i,t);if(n[i.name]=o,"webgpu"===(0,u.N_)()){const e=(0,u.y3)();"uploadToGPU"in e&&(0,a.NA)(o.shape)>=(0,c.OB)().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(o.dataId)}}return n}function b(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const x="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function v(e){return x?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function w(e){if(x)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,s=t.length;r<s;r++)n+=String.fromCharCode(t[r]);return btoa(n)}function k(e){if(x){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}function N(e){return o.w.join(e)}function S(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function I(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function T(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function C(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),T(e,n,r)}function E(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:v(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:v(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new o.w(e.weightData).byteLength}}function A(e){const t=[];for(const n of e)t.push(...n.weights);return t}},5771:function(e,t,n){"use strict";n.d(t,{J:function(){return r}});const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},9121:function(e,t,n){"use strict";n.d(t,{$HU:function(){return bt},$g6:function(){return te},$w:function(){return K},Acj:function(){return be},BMI:function(){return Ve},BiW:function(){return mt},Byc:function(){return V},CAk:function(){return Ce},CQl:function(){return ft},D2d:function(){return Kt},DlI:function(){return pt},Eh3:function(){return R},FKq:function(){return Pt},G3Y:function(){return ln},GBy:function(){return Vt},Gcp:function(){return Gt},HEU:function(){return re},HZH:function(){return vt},Hhh:function(){return Be},Hmb:function(){return kt},IKK:function(){return c},IMb:function(){return v},J$2:function(){return Ie},J7O:function(){return Le},J_u:function(){return we},JhU:function(){return y},Kgp:function(){return ct},L8s:function(){return Ut},Ly9:function(){return I},M2y:function(){return p},MIZ:function(){return an},MRv:function(){return Lt},MZg:function(){return Fe},NEP:function(){return ie},NZg:function(){return Ye},O3z:function(){return Ht},OAf:function(){return Ge},OR:function(){return pe},OU7:function(){return He},OV7:function(){return Ue},Omj:function(){return se},Oyi:function(){return m},PYm:function(){return _e},PhF:function(){return Rt},QCc:function(){return g},QRR:function(){return G},Qg5:function(){return ve},QiL:function(){return ot},Qvg:function(){return hn},RFZ:function(){return C},ROF:function(){return b},RQH:function(){return Ot},RuY:function(){return mn},SIB:function(){return $t},SX0:function(){return ne},SYM:function(){return r},SbG:function(){return It},SpW:function(){return a},T0n:function(){return H},TQc:function(){return Wt},TR1:function(){return P},ToN:function(){return pn},Tr8:function(){return rn},Uyb:function(){return de},VGw:function(){return s},Vbg:function(){return Ze},VcC:function(){return U},VfG:function(){return Re},Vn9:function(){return Y},W0H:function(){return st},XDQ:function(){return fn},XLW:function(){return w},XkS:function(){return nn},Xze:function(){return o},Y0y:function(){return ue},YFo:function(){return oe},YoZ:function(){return Pe},ZbH:function(){return Ae},ZjV:function(){return Xt},Zz9:function(){return $},_JP:function(){return en},_V0:function(){return vn},_Yw:function(){return Nt},_k9:function(){return x},_tC:function(){return Qt},a5O:function(){return Bt},aJk:function(){return d},avt:function(){return ke},b9H:function(){return bn},bK0:function(){return Zt},bV0:function(){return Et},c17:function(){return Xe},cWu:function(){return un},cie:function(){return j},cye:function(){return rt},dDz:function(){return ht},deh:function(){return le},dpD:function(){return wt},e07:function(){return Ct},e0R:function(){return Yt},e6w:function(){return gt},e7N:function(){return Ee},eBW:function(){return yn},eEB:function(){return T},eZ0:function(){return ze},ekb:function(){return Z},gJX:function(){return E},h8e:function(){return gn},hCO:function(){return S},hGc:function(){return J},hdR:function(){return ae},i5y:function(){return zt},iHb:function(){return W},iJz:function(){return xe},iWB:function(){return Ne},iZT:function(){return ye},ik2:function(){return B},jMg:function(){return f},jQk:function(){return Jt},jQs:function(){return Qe},jeX:function(){return he},kU:function(){return $e},kpP:function(){return dn},kuV:function(){return et},luS:function(){return wn},lyA:function(){return ut},mKl:function(){return Tt},mTV:function(){return We},mc4:function(){return L},mhS:function(){return F},mm_:function(){return i},n9L:function(){return on},nhH:function(){return jt},nr8:function(){return _t},o0g:function(){return dt},o2y:function(){return z},oFR:function(){return Ft},oHH:function(){return ee},oT6:function(){return u},p2w:function(){return Dt},p4S:function(){return Q},pe_:function(){return lt},q1x:function(){return ge},q2K:function(){return qe},q8u:function(){return Ke},qCd:function(){return Oe},qIC:function(){return Me},qWM:function(){return at},qi_:function(){return me},qkr:function(){return xt},qw7:function(){return h},r7n:function(){return Se},s1s:function(){return tn},sEM:function(){return sn},sHE:function(){return fe},sJF:function(){return l},sL$:function(){return q},usg:function(){return xn},uv1:function(){return nt},vFR:function(){return je},vtC:function(){return Te},vwp:function(){return ce},w3H:function(){return qt},w6g:function(){return De},wUP:function(){return D},wYB:function(){return Mt},wYn:function(){return Je},we_:function(){return it},wm:function(){return O},wx7:function(){return cn},x12:function(){return M},xJR:function(){return yt},xQA:function(){return At},xnO:function(){return A},y7R:function(){return X},yQU:function(){return tt},yj2:function(){return _},zbQ:function(){return St},zvY:function(){return N},zws:function(){return k}});const r="Abs",s="Acos",a="Acosh",i="Add",o="AddN",u="All",c="Any",l="ArgMax",d="ArgMin",p="Asin",h="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",x="AvgPool3D",v="AvgPool3DGrad",w="BatchMatMul",k="BatchToSpaceND",N="Bincount",S="BitwiseAnd",I="BroadcastTo",T="BroadcastArgs",C="Cast",E="Ceil",A="ClipByValue",$="Complex",_="ComplexAbs",R="Concat",F="Conv2D",D="Conv2DBackpropFilter",O="Conv2DBackpropInput",M="Conv3D",z="Conv3DBackpropFilterV2",B="Conv3DBackpropInputV2",L="Cos",P="Cosh",V="Cumprod",W="Cumsum",U="CropAndResize",G="DenseBincount",H="DepthToSpace",j="DepthwiseConv2dNative",q="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",K="Diag",Q="Dilation2D",Z="Dilation2DBackpropInput",Y="Dilation2DBackpropFilter",J="Draw",ee="RealDiv",te="Einsum",ne="Elu",re="EluGrad",se="Erf",ae="Equal",ie="Exp",oe="ExpandDims",ue="Expm1",ce="FFT",le="Fill",de="FlipLeftRight",pe="Floor",he="FloorDiv",fe="FusedBatchNorm",me="GatherV2",ge="GatherNd",ye="Greater",be="GreaterEqual",xe="Identity",ve="IFFT",we="Imag",ke="IsFinite",Ne="IsInf",Se="IsNan",Ie="LeakyRelu",Te="Less",Ce="LessEqual",Ee="LinSpace",Ae="Log",$e="Log1p",_e="LogicalAnd",Re="LogicalNot",Fe="LogicalOr",De="LogicalXor",Oe="LogSoftmax",Me="LowerBound",ze="LRN",Be="LRNGrad",Le="MatrixBandPart",Pe="Max",Ve="Maximum",We="MaxPool",Ue="MaxPoolGrad",Ge="MaxPool3D",He="MaxPool3DGrad",je="MaxPoolWithArgmax",qe="Mean",Xe="Min",Ke="Minimum",Qe="MirrorPad",Ze="Mod",Ye="Multinomial",Je="Multiply",et="Neg",tt="NotEqual",nt="NonMaxSuppressionV3",rt="NonMaxSuppressionV4",st="NonMaxSuppressionV5",at="OnesLike",it="OneHot",ot="Pack",ut="PadV2",ct="Pool",lt="Pow",dt="Prelu",pt="Prod",ht="RaggedGather",ft="RaggedRange",mt="RaggedTensorToTensor",gt="Range",yt="Real",bt="Reciprocal",xt="Relu",vt="Reshape",wt="ResizeNearestNeighbor",kt="ResizeNearestNeighborGrad",Nt="ResizeBilinear",St="ResizeBilinearGrad",It="Relu6",Tt="Reverse",Ct="Round",Et="Rsqrt",At="ScatterNd",$t="TensorScatterUpdate",_t="SearchSorted",Rt="Select",Ft="Selu",Dt="Slice",Ot="Sin",Mt="Sinh",zt="Sign",Bt="Sigmoid",Lt="Softplus",Pt="Sqrt",Vt="Sum",Wt="SpaceToBatchND",Ut="SplitV",Gt="Softmax",Ht="SparseFillEmptyRows",jt="SparseReshape",qt="SparseSegmentMean",Xt="SparseSegmentSum",Kt="SparseToDense",Qt="SquaredDifference",Zt="Square",Yt="StaticRegexReplace",Jt="StridedSlice",en="StringNGrams",tn="StringSplit",nn="StringToHashBucketFast",rn="Sub",sn="Tan",an="Tanh",on="Tile",un="TopK",cn="Transform",ln="Transpose",dn="Unique",pn="Unpack",hn="UnsortedSegmentSum",fn="UpperBound",mn="ZerosLike",gn="Step",yn="FromPixels",bn="RotateWithOffset",xn="_FusedMatMul",vn="FusedConv2D",wn="FusedDepthwiseConv2D"},6151:function(e,t,n){"use strict";n.d(t,{Li:function(){return p},T3:function(){return m},bt:function(){return f},nE:function(){return h},pI:function(){return u},tr:function(){return l},uk:function(){return c},wC:function(){return d}});var r=n(2885),s=n(5938),a=n(4706);const i=(0,s.R)("kernelRegistry",(()=>new Map)),o=(0,s.R)("gradRegistry",(()=>new Map));function u(e,t){const n=g(e,t);return i.get(n)}function c(e){return o.get(e)}function l(e){const t=i.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function d(e){const{kernelName:t,backendName:n}=e,r=g(t,n);i.has(r)&&a.Z(`The kernel '${t}' for backend '${n}' is already registered`),i.set(r,e)}function p(e){const{kernelName:t}=e;o.has(t)&&(0,r.OB)().getBool("DEBUG")&&a.Z(`Overriding the gradient for '${t}'`),o.set(t,e)}function h(e,t){const n=g(e,t);if(!i.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);i.delete(n)}function f(e){if(!o.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);o.delete(e)}function m(e,t){l(e).forEach((e=>{d(Object.assign({},e,{backendName:t}))}))}function g(e,t){return`${t}_${e}`}},4706:function(e,t,n){"use strict";n.d(t,{Z:function(){return s},c:function(){return a}});var r=n(2885);function s(...e){(0,r.OB)().getBool("IS_TEST")||(0,r.OB)().getBool("PROD")||console.warn(...e)}function a(...e){(0,r.OB)().getBool("IS_TEST")||(0,r.OB)().getBool("PROD")||console.log(...e)}},6235:function(e,t,n){"use strict";n.d(t,{W:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({abs_:function(e){const t=(0,a._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.BV.runKernel(s.yj2,e)}{const e={x:t};return r.BV.runKernel(s.SYM,e)}}})},7839:function(e,t,n){"use strict";n.d(t,{K:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({acos_:function(e){const t={x:(0,a._1)(e,"x","acos")};return r.BV.runKernel(s.VGw,t)}})},1470:function(e,t,n){"use strict";n.d(t,{_:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({acosh_:function(e){const t={x:(0,a._1)(e,"x","acosh")};return r.BV.runKernel(s.SpW,t)}})},6407:function(e,t,n){"use strict";n.d(t,{I:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({add_:function(e,t){let n=(0,i._1)(e,"a","add"),o=(0,i._1)(t,"b","add");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.mm_,u)}})},781:function(e,t,n){"use strict";n.d(t,{$:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({all_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","all","bool")},o={axis:t,keepDims:n};return r.BV.runKernel(s.oT6,i,o)}})},2998:function(e,t,n){"use strict";n.d(t,{Y:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({any_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","any","bool")},o={axis:t,keepDims:n};return r.BV.runKernel(s.IKK,i,o)}})},47:function(e,t,n){"use strict";n.d(t,{N:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({argMax_:function(e,t=0){const n={x:(0,a._1)(e,"x","argMax")},i={axis:t};return r.BV.runKernel(s.sJF,n,i)}})},7394:function(e,t,n){"use strict";n.d(t,{v:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({argMin_:function(e,t=0){const n={x:(0,a._1)(e,"x","argMin")},i={axis:t};return r.BV.runKernel(s.aJk,n,i)}})},2421:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({asin_:function(e){const t={x:(0,a._1)(e,"x","asin")};return r.BV.runKernel(s.M2y,t)}})},1891:function(e,t,n){"use strict";n.d(t,{V:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({asinh_:function(e){const t={x:(0,a._1)(e,"x","asinh")};return r.BV.runKernel(s.qw7,t)}})},7037:function(e,t,n){"use strict";n.d(t,{z:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({atan_:function(e){const t={x:(0,a._1)(e,"x","atan")};return r.BV.runKernel(s.jMg,t)}})},9812:function(e,t,n){"use strict";n.d(t,{f:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({atan2_:function(e,t){let n=(0,i._1)(e,"a","atan2"),o=(0,i._1)(t,"b","atan2");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.QCc,u)}})},369:function(e,t,n){"use strict";n.d(t,{C:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({atanh_:function(e){const t={x:(0,a._1)(e,"x","atanh")};return r.BV.runKernel(s.Oyi,t)}})},5176:function(e,t,n){"use strict";n.d(t,{w:function(){return d}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2271),u=n(2582),c=n(2668),l=n(4968);const d=(0,c.op)({avgPool_:function(e,t,n,c,d){const p=(0,a._1)(e,"x","avgPool","float32");i.hu(u.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let h=p,f=!1;3===p.rank&&(f=!0,h=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.hu(4===h.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${h.rank}.`)),u.m("avgPool",c,d);const m={x:h},g={filterSize:t,strides:n,pad:c,dimRoundingMode:d};let y=r.BV.runKernel(s.JhU,m,g);return y=(0,o.p)(y,p.dtype),f?(0,l.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},3591:function(e,t,n){"use strict";n.d(t,{LJ:function(){return l},Q3:function(){return c},Vh:function(){return a},YB:function(){return s},kz:function(){return i},lB:function(){return u},rv:function(){return o},sY:function(){return d}});var r=n(569);function s(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function a(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function i(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function o(e,t){return a(e,t.map((e=>1)),t)}function u(e,t,n){r.hu(s(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function c(e,t){if(s(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function l(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function d(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}},8441:function(e,t,n){"use strict";n.d(t,{E:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({batchToSpaceND_:function(e,t,n){const o=(0,a._1)(e,"x","batchToSpaceND"),u=t.reduce(((e,t)=>e*t));i.hu(o.rank>=1+t.length,(()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`)),i.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i.hu(o.shape[0]%u==0,(()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${u}`));const c={x:o},l={blockShape:t,crops:n};return r.BV.runKernel(s.zws,c,l)}})},7505:function(e,t,n){"use strict";n.d(t,{t:function(){return u}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(4968);const u=(0,n(2668).op)({batchNorm_:function(e,t,n,u,c,l){null==l&&(l=.001);const d=(0,a._1)(e,"x","batchNorm"),p=(0,a._1)(t,"mean","batchNorm"),h=(0,a._1)(n,"variance","batchNorm");let f,m;null!=c&&(f=(0,a._1)(c,"scale","batchNorm")),null!=u&&(m=(0,a._1)(u,"offset","batchNorm")),i.hu(p.rank===h.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i.hu(null==m||p.rank===m.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i.hu(null==f||p.rank===f.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g={x:function(e){let t;return t=0===e.rank||1===e.rank?(0,o.X)(e,[1,1,1,e.size]):2===e.rank?(0,o.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(d),scale:f,offset:m,mean:p,variance:h},y={varianceEpsilon:l},b=r.BV.runKernel(s.sHE,g,y);return(0,o.X)(b,d.shape)}})},8247:function(e,t,n){"use strict";n.d(t,{U:function(){return l}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(8723),u=n(2668),c=n(4968);const l=(0,u.op)({broadcastTo_:function(e,t){let n=(0,a._1)(e,"broadcastTo","x");const u=n.shape;if((0,i.Mu)(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,c.X)(n,e)}const l=n.shape,d=Array.from(t);for(let r=t.length-1;r>=0;r--)if(l[r]===t[r])d[r]=1;else if(1!==n.shape[r])throw new Error(`broadcastTo(): [${u}] cannot be broadcast to [${t}].`);if(0===d.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,o.d)(n);const p={x:n},h={reps:d};return r.BV.runKernel(s.n9L,p,h)}})},2200:function(e,t,n){"use strict";function r(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function s(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function a(e,t){const n=Math.max(e.length,t.length),r=new Array(n);for(let s=0;s<n;s++){let a=e[e.length-s-1];null==a&&(a=1);let i=t[t.length-s-1];if(null==i&&(i=1),1===a)r[n-s-1]=i;else if(1===i)r[n-s-1]=a;else{if(a!==i){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}r[n-s-1]=a}}return r}n.r(t),n.d(t,{assertAndGetBroadcastShape:function(){return a},getBroadcastDims:function(){return r},getReductionAxes:function(){return s}})},2657:function(e,t,n){"use strict";n.d(t,{f:function(){return a}});var r=n(4077),s=n(569);function a(e,t="float32",n){return t=t||"float32",s.Mu(e),new r.YD(e,t,n)}},2271:function(e,t,n){"use strict";n.d(t,{p:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({cast_:function(e,t){const n=(0,a._1)(e,"x","cast");if(!i.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const o={x:n},u={dtype:t};return r.BV.runKernel(s.RFZ,o,u)}})},6825:function(e,t,n){"use strict";n.d(t,{m:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({ceil_:function(e){const t={x:(0,a._1)(e,"x","ceil","float32")};return r.BV.runKernel(s.gJX,t)}})},2279:function(e,t,n){"use strict";n.d(t,{i:function(){return u}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(4006);const u=(0,n(2668).op)({clipByValue_:function(e,t,n){const u=(0,a._1)(e,"x","clipByValue");if(i.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return(0,o.h)(u.shape,t,u.dtype);const c={x:u},l={clipValueMin:t,clipValueMax:n};return r.BV.runKernel(s.xnO,c,l)}})},8723:function(e,t,n){"use strict";n.d(t,{d:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({clone_:function(e){const t={x:(0,a._1)(e,"x","clone","string_or_numeric")};return r.BV.runKernel(s.iJz,t)}})},1661:function(e,t,n){"use strict";n.d(t,{P:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({complex_:function(e,t){const n=(0,a._1)(e,"real","complex"),o=(0,a._1)(t,"imag","complex");i.k5(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const u={real:n,imag:o};return r.BV.runKernel(s.Zz9,u)}})},6884:function(e,t,n){"use strict";n.d(t,{z:function(){return u}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(8723);const u=(0,n(2668).op)({concat_:function(e,t=0){(0,i.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,a.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,o.d)(n[0]);const u=n,c={axis:t};return r.BV.runKernel(s.Eh3,u,c)}})},1355:function(e,t,n){"use strict";n.d(t,{P:function(){return c}});var r=n(3740),s=n(569),a=n(4794),i=n(2582),o=n(2668),u=n(4968);const c=(0,o.op)({conv1d_:function(e,t,n,o,c="NWC",l=1,d){const p=(0,r._1)(e,"x","conv1d"),h=(0,r._1)(t,"filter","conv1d");let f=p,m=!1;2===p.rank&&(m=!0,f=(0,u.X)(p,[1,p.shape[0],p.shape[1]])),s.hu(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),s.hu(3===h.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${h.rank}.`)),i.m("conv1d",o,d),s.hu(f.shape[2]===h.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${h.shape[1]}.`)),s.hu(i.jT(n,l),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${l}'`)),s.hu(i.U3(l),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),s.hu(i.U3(n),(()=>"Error in conv1D: Stride should be larger than 0.")),s.hu("NWC"===c,(()=>`Error in conv1d: got dataFormat of ${c} but only NWC is currently supported.`));const g=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),y=(0,u.X)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,n],x=[1,l],v=(0,a.T)(y,g,b,o,"NHWC",x,d);return m?(0,u.X)(v,[v.shape[2],v.shape[3]]):(0,u.X)(v,[v.shape[0],v.shape[2],v.shape[3]])}})},4794:function(e,t,n){"use strict";n.d(t,{T:function(){return l}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2582),u=n(2668),c=n(4968);const l=(0,u.op)({conv2d_:function(e,t,n,u,l="NHWC",d=[1,1],p){const h=(0,a._1)(e,"x","conv2d","float32"),f=(0,a._1)(t,"filter","conv2d","float32");let m=h,g=!1;3===h.rank&&(g=!0,m=(0,c.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.hu(4===m.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`)),o.m("conv2d",u,p);const y="NHWC"===l?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`)),i.hu(o.jT(n,d),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${d}'`)),i.hu(o.U3(d),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),i.hu(o.U3(n),(()=>"Error in conv2D: Strides should be larger than 0."));const b={x:m,filter:f},x={strides:n,pad:u,dataFormat:l,dilations:d,dimRoundingMode:p},v=r.BV.runKernel(s.mhS,b,x);return g?(0,c.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},6013:function(e,t,n){"use strict";n.d(t,{p:function(){return c}});var r=n(7097),s=n(9121),a=n(569),i=n(2582),o=n(2668),u=n(4968);const c=(0,o.op)({conv2DBackpropFilter_:function(e,t,n,o,c,l="NHWC",d){let p=e;3===e.rank&&(p=(0,u.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=(0,u.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),a.hu(4===p.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${p.shape}.`)),a.hu(4===h.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${h.shape}.`)),a.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const f="NHWC"===l?p.shape[3]:p.shape[1],m="NHWC"===l?h.shape[3]:h.shape[1];a.hu(f===n[2],(()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${n[2]}.`)),a.hu(m===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${n[3]}).`)),i.m("conv2dDerFilter",c,d);const g={x:p,dy:h},y={strides:o,pad:c,dataFormat:l,dimRoundingMode:d,filterShape:n};return r.BV.runKernel(s.wUP,g,y)}})},9832:function(e,t,n){"use strict";n.d(t,{_:function(){return c}});var r=n(7097),s=n(9121),a=n(569),i=n(2582),o=n(2668),u=n(4968);const c=(0,o.op)({conv2DBackpropInput_:function(e,t,n,o,c,l="NHWC",d){a.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let p=e,h=t,f=!1;3===t.rank&&(f=!0,h=(0,u.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),p=[1,e[0],e[1],e[2]]),a.hu(4===p.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${p.length}.`)),a.hu(4===h.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${h.rank}`)),a.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const m="NHWC"===l?p[3]:p[1],g="NHWC"===l?h.shape[3]:h.shape[1];a.hu(m===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${m}) must match input depth for filter ${n.shape[2]}.`)),a.hu(g===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${n.shape[3]}.`)),i.m("conv2dDerInput",c,d);const y={dy:h,filter:n},b={strides:o,pad:c,dataFormat:l,dimRoundingMode:d,inputShape:p},x=r.BV.runKernel(s.wm,y,b);return f?(0,u.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}})},1405:function(e,t,n){"use strict";n.d(t,{b:function(){return a}});var r=n(3740),s=n(9832);const a=(0,n(2668).op)({conv2dTranspose_:function(e,t,n,a,i,o){const u=(0,r._1)(e,"x","conv2dTranspose"),c=(0,r._1)(t,"filter","conv2dTranspose");return(0,s._)(n,u,c,a,i,"NHWC",o)}})},7594:function(e,t,n){"use strict";n.d(t,{_:function(){return u}});var r=n(7097),s=n(9121),a=n(569),i=n(2668),o=n(4968);const u=(0,i.op)({conv3DBackpropInput_:function(e,t,n,i,u){a.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let c=e,l=t,d=!1;4===t.rank&&(d=!0,l=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),c=[1,e[0],e[1],e[2],e[3]]);const p=c[4],h=l.shape[4];a.hu(5===c.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${c.length}.`)),a.hu(5===l.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${l.rank}`)),a.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),a.hu(p===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[3]}.`)),a.hu(h===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[4]}.`));const f={dy:l,filter:n},m={pad:u,strides:i,inputShape:c},g=r.BV.runKernel(s.ik2,f,m);return d?(0,o.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},2582:function(e,t,n){"use strict";n.d(t,{I0:function(){return f},Ix:function(){return o},Rf:function(){return s},U3:function(){return g},Xw:function(){return a},aO:function(){return c},jT:function(){return m},jw:function(){return u},m:function(){return b},pl:function(){return i},sl:function(){return y}});var r=n(569);function s(e,t,n,r,s="NHWC",a){return o(e,[...t,e[3]],n,a,r,null,null,y(s))}function a(e,t,n,r,s,a,i="channelsLast"){const[u,c]=l(t);let d;if("channelsLast"===i)d=[u,c,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);d=[u,c,e[1],e[1]]}return o(e,d,n,r,s,a,!1,i)}function i(e,t,n,r,s,a,i="NDHWC"){const[o,c,l]=d(t);let p,h;if("NDHWC"===i)h="channelsLast",p=[o,c,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",p=[o,c,l,e[1],e[1]]}return u(e,p,n,r,s,!1,h,a)}function o(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,d,f,m]=[-1,-1,-1,-1];if("channelsLast"===o)[u,d,f,m]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,m,d,f]=e}const[g,y,,b]=t,[x,v]=l(n),[w,k]=l(r),N=p(g,w),S=p(y,k),{padInfo:I,outHeight:T,outWidth:C}=function(e,t,n,r,s,a,i,o,u){let l,d,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=c(e,t,n));const a=e[0],i=e[1],o=h((a-t+2*r)/n+1,s),u=h((i-t+2*r)/n+1,s);return[o,u]}([t,n],a,r,e,o);d=s[0],p=s[1]}else if("same"===e){d=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(d-1)*r+a-t),o=Math.max(0,(p-1)*s+i-n),u=Math.floor(e/2),c=e-u,h=Math.floor(o/2);l={top:u,bottom:c,left:h,right:o-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},d=Math.ceil((t-a+1)/r),p=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const c="channelsLast"===u?e[1][0]:e[2][0],f="channelsLast"===u?e[1][1]:e[2][1],m="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];l={top:c,bottom:f,left:m,right:g,type:0===c&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},d=h((t-a+c+f)/r+1,o),p=h((n-i+m+g)/s+1,o)}}return{padInfo:l,outHeight:d,outWidth:p}}(s,d,f,x,v,N,S,a,o),E=i?b*m:b;let A;return"channelsFirst"===o?A=[u,E,T,C]:"channelsLast"===o&&(A=[u,T,C,E]),{batchSize:u,dataFormat:o,inHeight:d,inWidth:f,inChannels:m,outHeight:T,outWidth:C,outChannels:E,padInfo:I,strideHeight:x,strideWidth:v,filterHeight:g,filterWidth:y,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationHeight:w,dilationWidth:k,inShape:e,outShape:A,filterShape:t}}function u(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,f,m,g]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,g,l,f,m]=e}const[y,b,x,,v]=t,[w,k,N]=d(n),[S,I,T]=d(r),C=p(y,S),E=p(b,I),A=p(x,T),{padInfo:$,outDepth:_,outHeight:R,outWidth:F}=function(e,t,n,r,s,a,i,o,u,l,d){let p,f,m,g;"valid"===e&&(e=0);if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const y=function(e,t,n,r,s,a){null==s&&(s=c(e,t[0],r[0]));const i=[0,0,0,n];for(let o=0;o<3;o++)e[o]+2*s>=t[o]&&(i[o]=h((e[o]-t[o]+2*s)/r[o]+1,a));return i}([t,n,r,1],[o,u,l],1,[s,a,i],e,d);f=y[0],m=y[1],g=y[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{f=Math.ceil(t/s),m=Math.ceil(n/a),g=Math.ceil(r/i);const e=(f-1)*s+o-t,c=(m-1)*a+u-n,d=(g-1)*i+l-r,h=Math.floor(e/2),y=e-h,b=Math.floor(c/2),x=c-b,v=Math.floor(d/2);p={top:b,bottom:x,left:v,right:d-v,front:h,back:y,type:"SAME"}}}return{padInfo:p,outDepth:f,outHeight:m,outWidth:g}}(s,l,f,m,w,k,N,C,E,A,o),D=a?v*g:v;let O;return"channelsFirst"===i?O=[u,D,_,R,F]:"channelsLast"===i&&(O=[u,_,R,F,D]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:f,inWidth:m,inChannels:g,outDepth:_,outHeight:R,outWidth:F,outChannels:D,padInfo:$,strideDepth:w,strideHeight:k,strideWidth:N,filterDepth:y,filterHeight:b,filterWidth:x,effectiveFilterDepth:C,effectiveFilterHeight:E,effectiveFilterWidth:A,dilationDepth:S,dilationHeight:I,dilationWidth:T,inShape:e,outShape:O,filterShape:t}}function c(e,t,n,r=1){const s=p(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function l(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function d(e){return"number"==typeof e?[e,e,e]:e}function p(e,t){return t<=1?e:e+(e-1)*(t-1)}function h(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function f(e){const[t,n,r]=l(e);return 1===t&&1===n&&1===r}function m(e,t){return f(e)||f(t)}function g(e){return l(e).every((e=>e>0))}function y(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function b(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)r.hu(r.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{r.hu(r.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}},173:function(e,t,n){"use strict";n.d(t,{m:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({cos_:function(e){const t={x:(0,a._1)(e,"x","cos","float32")};return r.BV.runKernel(s.mc4,t)}})},2699:function(e,t,n){"use strict";n.d(t,{f:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({cosh_:function(e){const t={x:(0,a._1)(e,"x","cosh","float32")};return r.BV.runKernel(s.TR1,t)}})},9640:function(e,t,n){"use strict";n.d(t,{$:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({cumprod_:function(e,t=0,n=!1,i=!1){const o={x:(0,a._1)(e,"x","cumprod")},u={axis:t,exclusive:n,reverse:i};return r.BV.runKernel(s.Byc,o,u)}})},7405:function(e,t,n){"use strict";n.d(t,{z:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({cumsum_:function(e,t=0,n=!1,i=!1){const o={x:(0,a._1)(e,"x","cumsum")},u={axis:t,exclusive:n,reverse:i};return r.BV.runKernel(s.iHb,o,u)}})},9112:function(e,t,n){"use strict";n.d(t,{n:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({depthToSpace_:function(e,t,n="NHWC"){const o=(0,a._1)(e,"x","depthToSpace","float32"),u="NHWC"===n?o.shape[1]:o.shape[2],c="NHWC"===n?o.shape[2]:o.shape[3],l="NHWC"===n?o.shape[3]:o.shape[1];i.hu(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),i.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t}  for depthToSpace with input shape\n    ${o.shape}`)),i.hu(c*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${c} and ${t} for depthToSpace with input shape\n        ${o.shape}`)),i.hu(l%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${l} for depthToSpace with input shape ${o.shape}`));const d={x:o},p={blockSize:t,dataFormat:n};return r.BV.runKernel(s.T0n,d,p)}})},4718:function(e,t,n){"use strict";n.d(t,{B:function(){return l}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2582),u=n(2668),c=n(4968);const l=(0,u.op)({depthwiseConv2d_:function(e,t,n,u,l="NHWC",d=[1,1],p){const h=(0,a._1)(e,"x","depthwiseConv2d","float32"),f=(0,a._1)(t,"filter","depthwiseConv2d","float32");let m=h,g=!1;3===h.rank&&(g=!0,m=(0,c.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.hu(4===m.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`));const y="NHWC"===l?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${y}) must match the inChannels dimension in filter ${f.shape[2]}.`)),o.m("depthwiseConv2d",u,p);const b={x:m,filter:f},x={strides:n,pad:u,dataFormat:l,dilations:d,dimRoundingMode:p},v=r.BV.runKernel(s.cie,b,x);return g?(0,c.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},8098:function(e,t,n){"use strict";n.d(t,{z:function(){return o}});var r=n(7097),s=n(9121),a=n(2668),i=n(4968);const o=(0,a.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,o,u=[1,1],c){let l=e;3===e.rank&&(l=(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=t;3===d.rank&&(d=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={x:l,dy:d},h={strides:a,pad:o,dimRoundingMode:c,dilations:u,filterShape:n};return r.BV.runKernel(s.sL$,p,h)}})},4375:function(e,t,n){"use strict";n.d(t,{v:function(){return o}});var r=n(7097),s=n(9121),a=n(2668),i=n(4968);const o=(0,a.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,o,u=[1,1],c){let l=t,d=!1;3===t.rank&&(d=!0,l=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={dy:l,filter:n},h={strides:a,pad:o,dimRoundingMode:c,dilations:u,inputShape:e},f=r.BV.runKernel(s.y7R,p,h);return d?(0,i.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},557:function(e,t,n){"use strict";n.d(t,{W:function(){return c}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const c=(0,o.op)({dilation2d_:function(e,t,n,o,c=[1,1],l="NHWC"){const d=(0,a._1)(e,"x","dilation2d"),p=(0,a._1)(t,"filter","dilation2d");i.hu(3===d.rank||4===d.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${d.rank}.`)),i.hu(3===p.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${p.rank}.`)),i.hu("NHWC"===l,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${l}`));let h=d,f=!1;3===d.rank&&(h=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]]),f=!0),i.hu(h.shape[3]===p.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${h.shape[3]} vs ${p.shape[2]}`));const m={x:h,filter:p},g={strides:n,pad:o,dilations:c},y=r.BV.runKernel(s.p4S,m,g);return f?(0,u.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1274:function(e,t,n){"use strict";n.d(t,{h:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(9165);const u=(0,n(2668).op)({div_:function(e,t){let n=(0,i._1)(e,"a","div"),u=(0,i._1)(t,"b","div");if([n,u]=(0,a.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return(0,o.q)(n,u);const c={a:n,b:u};return r.BV.runKernel(s.oHH,c,{})}})},9322:function(e,t,n){"use strict";n.d(t,{N:function(){return l}});var r=n(747),s=n(3740),a=n(1274),i=n(6477),o=n(2668),u=n(5912),c=n(6577);const l=(0,o.op)({divNoNan_:function(e,t){let n=(0,s._1)(e,"a","div"),o=(0,s._1)(t,"b","div");[n,o]=(0,r.makeTypesMatch)(n,o);const l=(0,a.h)(n,o),d=(0,c.P)(l),p=(0,i.D)(o,d);return(0,u.a)(p,d,l)}})},548:function(e,t,n){"use strict";n.d(t,{A:function(){return u}});var r=n(3740),s=n(569),a=n(8687),i=n(2668),o=n(4968);const u=(0,i.op)({dot_:function(e,t){const n=(0,r._1)(e,"t1","dot"),i=(0,r._1)(t,"t2","dot");s.hu(!(1!==n.rank&&2!==n.rank||1!==i.rank&&2!==i.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${i.rank}.`));const u=1===n.rank?n.size:n.shape[1],c=1===i.rank?i.size:i.shape[0];if(s.hu(u===c,(()=>`Error in dot: inner dimensions of inputs must match, but got ${u} and ${c}.`)),1===n.rank&&1===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[-1,1]),r=(0,a.O)(e,t);return(0,o.X)(r,[])}if(1===n.rank&&2===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[i.shape[0],i.shape[1]]),r=(0,a.O)(e,t);return(0,o.X)(r,[r.size])}if(2===n.rank&&1===i.rank){const e=(0,o.X)(i,[-1,1]),t=(0,a.O)(n,e);return(0,o.X)(t,[t.size])}{const e=(0,o.X)(i,[i.shape[0],i.shape[1]]);return(0,a.O)(n,e)}}})},3233:function(e,t,n){"use strict";n.d(t,{p:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({elu_:function(e){const t={x:(0,a._1)(e,"x","elu","float32")};return r.BV.runKernel(s.SX0,t)}})},6477:function(e,t,n){"use strict";n.d(t,{D:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({equal_:function(e,t){let n=(0,i._1)(e,"a","equal","string_or_numeric"),u=(0,i._1)(t,"b","equal","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s.hdR,c)}})},4650:function(e,t,n){"use strict";n.d(t,{q:function(){return u}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2271);const u=(0,n(2668).op)({erf_:function(e){let t=(0,a._1)(e,"x","erf");i.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,o.p)(t,"float32"));const n={x:t};return r.BV.runKernel(s.Omj,n)}})},1954:function(e,t,n){"use strict";n.d(t,{d:function(){return s}});var r=n(3561);const s=(0,n(2668).op)({euclideanNorm_:function(e,t=null,n=!1){return(0,r.K)(e,"euclidean",t,n)}})},4842:function(e,t,n){"use strict";n.d(t,{Q:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({exp_:function(e){const t={x:(0,a._1)(e,"x","exp")};return r.BV.runKernel(s.NEP,t)}})},1300:function(e,t,n){"use strict";n.d(t,{d:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({expandDims_:function(e,t=0){const n=(0,a._1)(e,"x","expandDims","string_or_numeric");i.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const o={input:n},u={dim:t};return r.BV.runKernel(s.YFo,o,u)}})},3426:function(e,t,n){"use strict";n.d(t,{t:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({expm1_:function(e){const t={x:(0,a._1)(e,"x","expm1")};return r.BV.runKernel(s.Y0y,t)}})},4006:function(e,t,n){"use strict";n.d(t,{h:function(){return i}});var r=n(7097),s=n(9121),a=n(569);function i(e,t,n){(0,a.Mu)(e);const i={shape:e,value:t,dtype:n=n||(0,a.D2)(t)};return r.BV.runKernel(s.deh,{},i)}},6943:function(e,t,n){"use strict";n.d(t,{G:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({floor_:function(e){const t={x:(0,a._1)(e,"x","floor","float32")};return r.BV.runKernel(s.OR,t)}})},9165:function(e,t,n){"use strict";n.d(t,{q:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({floorDiv_:function(e,t){let n=(0,i._1)(e,"a","floorDiv"),o=(0,i._1)(t,"b","floorDiv");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.jeX,u)}})},9323:function(e,t,n){"use strict";n.d(t,{Fr:function(){return f},QH:function(){return g},pf:function(){return m},uy:function(){return y}});var r=n(2200),s=n(3233),a=n(9133),i=n(4841),o=n(8151),u=n(7409),c=n(3582),l=n(4968),d=n(625),p=n(1901),h=n(5475);function f(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,i.d)(e,(0,p.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function m(e,t){let n=t;const s=r.getReductionAxes(e.shape,t.shape);return s.length>0&&(n=(0,h.S)(n,s)),(0,l.X)(n,e.shape)}function g(e,t,n,r){if("linear"===t)return e;if("relu"===t)return(0,u.U)(e);if("elu"===t)return(0,s.p)(e);if("relu6"===t)return(0,c.b)(e);if("prelu"===t)return(0,o.A)(e,n);if("leakyrelu"===t)return(0,a.h)(e,r);if("sigmoid"===t)return(0,d.X)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},4926:function(e,t,n){"use strict";n.d(t,{I:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({gather_:function(e,t,n=0,i=0){const o={x:(0,a._1)(e,"x","gather"),indices:(0,a._1)(t,"indices","gather","int32")},u={axis:n,batchDims:i};return r.BV.runKernel(s.qi_,o,u)}})},636:function(e,t,n){"use strict";n.d(t,{p:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({greater_:function(e,t){let n=(0,i._1)(e,"a","greater","string_or_numeric"),u=(0,i._1)(t,"b","greater","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s.iZT,c)}})},7630:function(e,t,n){"use strict";n.d(t,{b:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({greaterEqual_:function(e,t){let n=(0,i._1)(e,"a","greaterEqual","string_or_numeric"),u=(0,i._1)(t,"b","greaterEqual","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s.Acj,c)}})},4386:function(e,t,n){"use strict";n.d(t,{a:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({imag_:function(e){const t={input:(0,a._1)(e,"input","imag")};return r.BV.runKernel(s.J_u,t)}})},3305:function(e,t,n){"use strict";n.d(t,{I:function(){return c}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const c=(0,o.op)({resizeBilinear_:function(e,t,n=!1,o=!1){const c=(0,a._1)(e,"images","resizeBilinear");i.hu(3===c.rank||4===c.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${c.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i.hu(!1===o||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let l=c,d=!1;3===c.rank&&(d=!0,l=(0,u.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const[]=t,p={images:l},h={alignCorners:n,halfPixelCenters:o,size:t},f=r.BV.runKernel(s._Yw,p,h);return d?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},5098:function(e,t,n){"use strict";n.d(t,{j:function(){return c}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const c=(0,o.op)({resizeNearestNeighbor_:function(e,t,n=!1,o=!1){const c=(0,a._1)(e,"images","resizeNearestNeighbor");i.hu(3===c.rank||4===c.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${c.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i.hu("float32"===c.dtype||"int32"===c.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i.hu(!1===o||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let l=c,d=!1;3===c.rank&&(d=!0,l=(0,u.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const[]=t,p={images:l},h={alignCorners:n,halfPixelCenters:o,size:t},f=r.BV.runKernel(s.dpD,p,h);return d?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3963:function(e,t,n){"use strict";n.d(t,{x:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({isFinite_:function(e){const t={x:(0,a._1)(e,"x","isFinite")};return r.BV.runKernel(s.avt,t)}})},4365:function(e,t,n){"use strict";n.d(t,{U:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({isInf_:function(e){const t={x:(0,a._1)(e,"x","isInf")};return r.BV.runKernel(s.iWB,t)}})},6230:function(e,t,n){"use strict";n.d(t,{i:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({isNaN_:function(e){const t={x:(0,a._1)(e,"x","isNaN")};return r.BV.runKernel(s.r7n,t)}})},9133:function(e,t,n){"use strict";n.d(t,{h:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({leakyRelu_:function(e,t=.2){const n={x:(0,a._1)(e,"x","leakyRelu")},i={alpha:t};return r.BV.runKernel(s.J$2,n,i)}})},6573:function(e,t,n){"use strict";n.d(t,{d:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({less_:function(e,t){let n=(0,i._1)(e,"a","less","string_or_numeric"),u=(0,i._1)(t,"b","less","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s.vtC,c)}})},624:function(e,t,n){"use strict";n.d(t,{z:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({lessEqual_:function(e,t){let n=(0,i._1)(e,"a","lessEqual","string_or_numeric"),u=(0,i._1)(t,"b","lessEqual","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s.CAk,c)}})},9648:function(e,t,n){"use strict";n.d(t,{G:function(){return c}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const c=(0,o.op)({localResponseNormalization_:function(e,t=5,n=1,o=1,c=.5){const l=(0,a._1)(e,"x","localResponseNormalization");i.hu(4===l.rank||3===l.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${l.rank}.`)),i.hu(i.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let d=l,p=!1;3===l.rank&&(p=!0,d=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const h={x:d},f={depthRadius:t,bias:n,alpha:o,beta:c},m=r.BV.runKernel(s.eZ0,h,f);return p?(0,u.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},2597:function(e,t,n){"use strict";n.d(t,{c:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({log_:function(e){const t={x:(0,a._1)(e,"x","log","float32")};return r.BV.runKernel(s.ZbH,t)}})},7474:function(e,t,n){"use strict";n.d(t,{K:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({log1p_:function(e){const t={x:(0,a._1)(e,"x","log1p")};return r.BV.runKernel(s.kU,t)}})},3888:function(e,t,n){"use strict";n.d(t,{e:function(){return l}});var r=n(633),s=n(3740),a=n(4841),i=n(7370),o=n(2668),u=n(625),c=n(3694);const l=(0,o.op)({logSigmoid_:function(e){const t=(0,s._1)(e,"x","logSigmoid");return(0,r.cb)((e=>({value:(0,i.W)((0,c.W)((0,i.W)(e))),gradFunc:t=>(0,a.d)(t,(0,u.X)((0,i.W)(e)))})))(t)}})},1510:function(e,t,n){"use strict";n.d(t,{C:function(){return h}});var r=n(633),s=n(3740),a=n(2271),i=n(4842),o=n(2597),u=n(3307),c=n(4841),l=n(2668),d=n(827),p=n(5475);const h=(0,l.op)({logSoftmax_:function(e,t=-1){const n=(0,s._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return(0,r.cb)(((e,n)=>{const r=(0,u.F)(e,t,!0),s=(0,d.l)(e,r),l=(0,d.l)((0,a.p)(s,"float32"),(0,o.c)((0,p.S)((0,i.Q)(s),t,!0)));n([l]);return{value:l,gradFunc:(e,n)=>{const[r]=n,s=(0,i.Q)(r);return(0,d.l)(e,(0,c.d)((0,p.S)(e,t,!0),s))}}}))(n)}})},1391:function(e,t,n){"use strict";n.d(t,{l:function(){return f}});var r=n(3740),s=n(569),a=n(6407),i=n(3591),o=n(4842),u=n(2597),c=n(3307),l=n(2668),d=n(4968),p=n(827),h=n(5475);const f=(0,l.op)({logSumExp_:function(e,t=null,n=!1){const l=(0,r._1)(e,"x","logSumExp"),f=(0,s.EC)(t,l.shape),m=(0,c.F)(l,f,!0),g=(0,p.l)(l,m),y=(0,o.Q)(g),b=(0,h.S)(y,f),x=(0,u.c)(b),v=(0,a.I)((0,d.X)(m,x.shape),x);if(n){const e=(0,i.rv)(v.shape,f);return(0,d.X)(v,e)}return v}})},2856:function(e,t,n){"use strict";n.d(t,{H:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(2200);const o=(0,n(2668).op)({logicalAnd_:function(e,t){const n=(0,a._1)(e,"a","logicalAnd","bool"),o=(0,a._1)(t,"b","logicalAnd","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const u={a:n,b:o};return r.BV.runKernel(s.PYm,u)}})},8651:function(e,t,n){"use strict";n.d(t,{h:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({logicalNot_:function(e){const t={x:(0,a._1)(e,"x","logicalNot","bool")};return r.BV.runKernel(s.VfG,t)}})},5750:function(e,t,n){"use strict";n.d(t,{K:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(2200);const o=(0,n(2668).op)({logicalOr_:function(e,t){const n=(0,a._1)(e,"a","logicalOr","bool"),o=(0,a._1)(t,"b","logicalOr","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const u={a:n,b:o};return r.BV.runKernel(s.MZg,u)}})},596:function(e,t,n){"use strict";n.d(t,{e:function(){return u}});var r=n(3740),s=n(2200),a=n(2856),i=n(8651),o=n(5750);const u=(0,n(2668).op)({logicalXor_:function(e,t){const n=(0,r._1)(e,"a","logicalXor","bool"),u=(0,r._1)(t,"b","logicalXor","bool");return(0,s.assertAndGetBroadcastShape)(n.shape,u.shape),(0,a.H)((0,o.K)(e,t),(0,i.h)((0,a.H)(e,t)))}})},9876:function(e,t,n){"use strict";var r;n.d(t,{I:function(){return r}}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},8687:function(e,t,n){"use strict";n.d(t,{O:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({matMul_:function(e,t,n=!1,o=!1){let u=(0,i._1)(e,"a","matMul"),c=(0,i._1)(t,"b","matMul");[u,c]=(0,a.makeTypesMatch)(u,c);const l={a:u,b:c},d={transposeA:n,transposeB:o};return r.BV.runKernel(s.XLW,l,d)}})},3307:function(e,t,n){"use strict";n.d(t,{F:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({max_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","max")},o={reductionIndices:t,keepDims:n};return r.BV.runKernel(s.YoZ,i,o)}})},1174:function(e,t,n){"use strict";n.d(t,{_:function(){return l}});var r=n(7097),s=n(9121),a=n(3740),i=n(569),o=n(2582),u=n(2668),c=n(4968);const l=(0,u.op)({maxPool_:function(e,t,n,u,l){const d=(0,a._1)(e,"x","maxPool");let p=d,h=!1;3===d.rank&&(h=!0,p=(0,c.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.hu(4===p.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${p.rank}.`)),i.hu(o.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),o.m("maxPool",u,l);const f={x:p},m={filterSize:t,strides:n,pad:u,dimRoundingMode:l},g=r.BV.runKernel(s.mTV,f,m);return h?(0,c.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},632:function(e,t,n){"use strict";n.d(t,{g:function(){return c}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200),u=n(2271);const c=(0,n(2668).op)({maximum_:function(e,t){let n=(0,i._1)(e,"a","maximum"),c=(0,i._1)(t,"b","maximum");[n,c]=(0,a.makeTypesMatch)(n,c),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),c=(0,u.p)(c,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,c.shape);const l={a:n,b:c};return r.BV.runKernel(s.BMI,l)}})},5130:function(e,t,n){"use strict";n.d(t,{J:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({mean_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","mean")},o={axis:t,keepDims:n};return r.BV.runKernel(s.q2K,i,o)}})},5735:function(e,t,n){"use strict";n.d(t,{V:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({min_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","min")},o={axis:t,keepDims:n};return r.BV.runKernel(s.c17,i,o)}})},4513:function(e,t,n){"use strict";n.d(t,{L:function(){return c}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200),u=n(2271);const c=(0,n(2668).op)({minimum_:function(e,t){let n=(0,i._1)(e,"a","minimum"),c=(0,i._1)(t,"b","minimum");[n,c]=(0,a.makeTypesMatch)(n,c),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),c=(0,u.p)(c,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,c.shape);const l={a:n,b:c};return r.BV.runKernel(s.q8u,l)}})},1483:function(e,t,n){"use strict";n.d(t,{V:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({mirrorPad_:function(e,t,n){i.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const o=(0,a._1)(e,"x","mirrorPad");if(0===o.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i.hu(t.length===o.rank,(()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`));const u="reflect"===n?1:0;for(let r=0;r<o.rank;r++)i.hu(2===t[r].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i.hu(t[r][0]>=0&&t[r][0]<=o.shape[r]-u&&t[r][1]>=0&&t[r][1]<=o.shape[r]-u,(()=>`Padding in dimension ${r} cannot be greater than or equal to ${o.shape[r]-u} or less than 0 for input of shape ${o.shape}`));const c={paddings:t,mode:n},l={x:o};return r.BV.runKernel(s.jQs,l,c)}})},5228:function(e,t,n){"use strict";n.d(t,{w:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({mod_:function(e,t){let n=(0,i._1)(e,"a","mod"),o=(0,i._1)(t,"b","mod");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.Vbg,u)}})},4841:function(e,t,n){"use strict";n.d(t,{d:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({mul_:function(e,t){let n=(0,i._1)(e,"a","mul"),o=(0,i._1)(t,"b","mul");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.wYn,u)}})},7370:function(e,t,n){"use strict";n.d(t,{W:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({neg_:function(e){const t={x:(0,a._1)(e,"x","neg")};return r.BV.runKernel(s.kuV,t)}})},3561:function(e,t,n){"use strict";n.d(t,{K:function(){return y}});var r=n(3740),s=n(569),a=n(6235),i=n(3591),o=n(3307),u=n(5735),c=n(2668),l=n(3453),d=n(4968),p=n(9494),h=n(3261),f=n(248),m=n(5475);function g(e,t,n=null){if(0===e.rank)return(0,a.W)(e);if(1!==e.rank&&null===n)return g((0,d.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,m.S)((0,a.W)(e),n);if(t===1/0)return(0,o.F)((0,a.W)(e),n);if(t===-1/0)return(0,u.V)((0,a.W)(e),n);if("euclidean"===t||2===t)return(0,h._)((0,m.S)((0,l.s)((0,a.W)(e),(0,p.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,o.F)((0,m.S)((0,a.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,o.F)((0,m.S)((0,a.W)(e),n[1]),n[0]);if(t===-1/0)return(0,u.V)((0,m.S)((0,a.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,h._)((0,m.S)((0,f.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const y=(0,c.op)({norm_:function(e,t="euclidean",n=null,a=!1){const o=g(e=(0,r._1)(e,"x","norm"),t,n);let u=o.shape;if(a){const t=(0,s.EC)(n,e.shape);u=i.rv(o.shape,t)}return(0,d.X)(o,u)}})},6500:function(e,t,n){"use strict";n.d(t,{Q:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({notEqual_:function(e,t){let n=(0,i._1)(e,"a","notEqual","string_or_numeric"),u=(0,i._1)(t,"b","notEqual","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s.yQU,c)}})},6708:function(e,t,n){"use strict";n.d(t,{l:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({oneHot_:function(e,t,n=1,i=0,o="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const u={indices:(0,a._1)(e,"indices","oneHot","int32")},c={dtype:o,depth:t,onValue:n,offValue:i};return r.BV.runKernel(s.we_,u,c)}})},4917:function(e,t,n){"use strict";n.d(t,{i:function(){return o}});var r=n(7097),s=n(569),a=n(1661),i=n(723);function o(e,t="float32"){if((0,s.Mu)(e),"complex64"===t){const t=o(e,"float32"),n=(0,i.l)(e,"float32");return(0,a.P)(t,n)}const n=(0,s.p8)((0,s.NA)(e),t);return r.BV.makeTensor(n,e,t)}},7846:function(e,t,n){"use strict";n.d(t,{J:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({onesLike_:function(e){const t={x:(0,a._1)(e,"x","onesLike")};return r.BV.runKernel(s.qWM,t)}})},2668:function(e,t,n){"use strict";n.d(t,{op:function(){return i},z:function(){return a}});var r=n(7097),s=n(569);const a="__op";function i(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const i=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=a;const o=(...e)=>{r.BV.startScope(n);try{const t=i(...e);return(0,s.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),r.BV.endScope(t),t}catch(t){throw r.BV.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}},1336:function(e,t,n){"use strict";n.d(t,{zvA:function(){return p.z},WnP:function(){return s.W},Khb:function(){return a.K},__u:function(){return i._},IHx:function(){return o.I},QBD:function(){return h},$6P:function(){return f.$},YjB:function(){return m.Y},NqF:function(){return g.N},vHJ:function(){return y.v},ZRM:function(){return b.Z},VfV:function(){return x.V},z4N:function(){return v.z},fvJ:function(){return w.f},C80:function(){return k.C},wS1:function(){return N.w},uR5:function(){return C},zEQ:function(){return D},tgs:function(){return M.t},Dxk:function(){return z},JY5:function(){return B},p3b:function(){return L},E4h:function(){return O.E},yE8:function(){return P},ycw:function(){return V},anm:function(){return nr},XsQ:function(){return W},UFq:function(){return U.U},f3b:function(){return G.f},pju:function(){return S.p},mDi:function(){return H.m},iUl:function(){return j.i},d9v:function(){return q.d},PYB:function(){return X.P},zoF:function(){return E.z},gME:function(){return K},Izb:function(){return Q},MNy:function(){return Z},ZaL:function(){return Y},PAt:function(){return J.P},Tek:function(){return ee.T},bc:function(){return te.b},pdZ:function(){return ne},$QV:function(){return se},mCk:function(){return ae.m},f9Y:function(){return ie.f},mew:function(){return pr},$Gn:function(){return oe.$},zbp:function(){return ue.z},ppE:function(){return ce},nTT:function(){return le.n},B10:function(){return de.B},Ka3:function(){return pe},WmZ:function(){return he.W},hiC:function(){return fe.h},NTj:function(){return me.N},AKD:function(){return ge.A},rvX:function(){return lr},WYO:function(){return ye},pyx:function(){return be.p},GRh:function(){return dr},EDe:function(){return xe},DgJ:function(){return ve.D},qNN:function(){return we.q},d2q:function(){return ke.d},Qqt:function(){return Ne.Q},dt4:function(){return Se.d},t$B:function(){return Ie.t},iyy:function(){return Ce},kp_:function(){return wn.k},hlL:function(){return Ee.h},GWj:function(){return Ae.G},qPi:function(){return $e.q},imm:function(){return r},Iqj:function(){return _e.I},dbB:function(){return cr},pjt:function(){return Re.p},brS:function(){return Fe.b},Sxn:function(){return kn.S},asL:function(){return De.a},BHj:function(){return gs},V3u:function(){return hr},wx0:function(){return Nn.w},xVT:function(){return Oe.x},UWc:function(){return Me.U},i2d:function(){return ze.i},hi7:function(){return Be.h},d9m:function(){return Le.d},zN1:function(){return Pe.z},$r2:function(){return ys},SX3:function(){return Ve},G9k:function(){return We.G},cM7:function(){return Ue.c},Krr:function(){return Ge.K},e_t:function(){return He.e},CmS:function(){return je.C},l_t:function(){return qe.l},HvI:function(){return Xe.H},hJK:function(){return Ke.h},K5V:function(){return Qe.K},egP:function(){return Ze.e},MB5:function(){return bs},eab:function(){return et},OI3:function(){return A.O},Fp7:function(){return tt.F},_sB:function(){return nt._},YQQ:function(){return rt},Ip$:function(){return st},gWQ:function(){return at.g},J69:function(){return it.J},ry_:function(){return ct},VV$:function(){return lt.V},LTh:function(){return dt.L},VdP:function(){return pt.V},wQq:function(){return ht.w},Gi7:function(){return yt},p_:function(){return ir},dC7:function(){return $.d},rq4:function(){return bt},SJ_:function(){return xt},W76:function(){return vt.W},KOy:function(){return sr.K},Quu:function(){return wt.Q},lfX:function(){return kt.l},iUs:function(){return ot.i},JpU:function(){return Nt.J},op:function(){return p.op},N2O:function(){return St},vku:function(){return It.v},pNR:function(){return Tt},koy:function(){return Ct},t1L:function(){return Et},lGY:function(){return At},d_R:function(){return $t.d},sQ3:function(){return _t.s},AL3:function(){return Rt.A},S0v:function(){return Ft.S},WVs:function(){return Dt.W},$gW:function(){return Ot},VT$:function(){return Mt},N89:function(){return zt},TN_:function(){return Bt},wzB:function(){return Ut},nGf:function(){return Gt},ruB:function(){return Ht},LGj:function(){return jt},pe5:function(){return qt},w6H:function(){return Xt},kwC:function(){return Kt.k},M25:function(){return Qt.M},UYe:function(){return Zt.U},btT:function(){return Yt.b},XLQ:function(){return T.X},GYS:function(){return Jt.G},SDf:function(){return en},diP:function(){return tn},sx7:function(){return nn},mG2:function(){return rn},QEs:function(){return Sn.Q},NMM:function(){return sn.N},bp0:function(){return an.b},iD$:function(){return on.i},snQ:function(){return or},zcT:function(){return Je},U8D:function(){return un.U},U_I:function(){return cn.U},ODp:function(){return ln},XD2:function(){return _.X},Xxe:function(){return dn.X},tdS:function(){return ms},O$l:function(){return pn.O},R_K:function(){return hn.R},tPi:function(){return R.t},jZU:function(){return fn},SmN:function(){return mn},CnO:function(){return gn},p0P:function(){return yn},XAC:function(){return bn.X},Wvh:function(){return xn.W},fBT:function(){return vn.f},rVs:function(){return xs},ers:function(){return ur},uN7:function(){return fs},Vl2:function(){return In.V},_b3:function(){return Tn._},h62:function(){return mt.h},$i:function(){return Cn.$},L9e:function(){return En.L},knu:function(){return An.k},Nbs:function(){return $n.N},NXj:function(){return _n.N},Z_8:function(){return vs},luU:function(){return gt.l},Smz:function(){return Rn.S},ORZ:function(){return Fn.O},AEp:function(){return F.A},XeE:function(){return Dn.X},RRF:function(){return Mn},odF:function(){return zn},wOQ:function(){return Bn.w},yXz:function(){return Ln},Bfx:function(){return Pn},xZs:function(){return Vn},Pg0:function(){return Un},Gg6:function(){return Te.G},hg7:function(){return Gn.h},p4s:function(){return rr.p},Xu6:function(){return Hn},Two:function(){return jn.T},pUJ:function(){return qn.p},HHK:function(){return Xn.H},GaM:function(){return Kn},VD$:function(){return Qn},arb:function(){return Zn.a},itS:function(){return Jn},lls:function(){return er.l},P84:function(){return tr.P}});var r={};n.r(r),n.d(r,{conv2d:function(){return xr},depthwiseConv2d:function(){return kr},matMul:function(){return Nr}});var s=n(6235),a=n(7839),i=n(1470),o=n(6407),u=n(7097),c=n(9121),l=n(3740),d=n(569),p=n(2668);const h=(0,p.op)({addN_:function(e){d.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),d.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,l._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!d.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return u.BV.runKernel(c.Xze,r)}});var f=n(781),m=n(2998),g=n(47),y=n(7394),b=n(2421),x=n(1891),v=n(7037),w=n(9812),k=n(369),N=n(5176),S=n(2271),I=n(2582),T=n(4968);const C=(0,p.op)({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const i=(0,l._1)(e,"x","avgPool3d","float32");let o=i,p=!1;4===i.rank&&(p=!0,o=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),d.hu(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),d.hu("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),d.hu("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),(0,I.m)("avgPool3d",r,s);const h={x:o},f={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let m=u.BV.runKernel(c._k9,h,f);return m=(0,S.p)(m,o.dtype),p?(0,T.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});var E=n(6884),A=n(8687),$=n(4841),_=n(625),R=n(2676),F=n(1869);const D=(0,p.op)({basicLSTMCell_:function(e,t,n,r,s,a){const i=(0,l._1)(e,"forgetBias","basicLSTMCell"),u=(0,l._1)(t,"lstmKernel","basicLSTMCell"),c=(0,l._1)(n,"lstmBias","basicLSTMCell"),d=(0,l._1)(r,"data","basicLSTMCell"),p=(0,l._1)(s,"c","basicLSTMCell"),h=(0,l._1)(a,"h","basicLSTMCell"),f=(0,E.z)([d,h],1),m=(0,A.O)(f,u),g=(0,o.I)(m,c),y=g.shape[0],b=g.shape[1]/4,x=[y,b],v=(0,R.t)(g,[0,0],x),w=(0,R.t)(g,[0,b],x),k=(0,R.t)(g,[0,2*b],x),N=(0,R.t)(g,[0,3*b],x),S=(0,o.I)((0,$.d)((0,_.X)(v),(0,F.A)(w)),(0,$.d)(p,(0,_.X)((0,o.I)(i,k))));return[S,(0,$.d)((0,F.A)(S),(0,_.X)(N))]}});var O=n(8441),M=n(7505);const z=(0,p.op)({batchNorm2d_:function(e,t,n,r,s,a){const i=(0,l._1)(e,"x","batchNorm"),o=(0,l._1)(t,"mean","batchNorm"),u=(0,l._1)(n,"variance","batchNorm");let c,p;return null!=s&&(c=(0,l._1)(s,"scale","batchNorm")),null!=r&&(p=(0,l._1)(r,"offset","batchNorm")),d.hu(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),d.hu(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),d.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&d.hu(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=p&&d.hu(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,u,p,c,a)}});const B=(0,p.op)({batchNorm3d_:function(e,t,n,r,s,a){const i=(0,l._1)(e,"x","batchNorm"),o=(0,l._1)(t,"mean","batchNorm"),u=(0,l._1)(n,"variance","batchNorm");let c,p;return null!=s&&(c=(0,l._1)(s,"scale","batchNorm")),null!=r&&(p=(0,l._1)(r,"offset","batchNorm")),d.hu(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),d.hu(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),d.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&d.hu(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=p&&d.hu(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,u,p,c,a)}});const L=(0,p.op)({batchNorm4d_:function(e,t,n,r,s,a){const i=(0,l._1)(e,"x","batchNorm"),o=(0,l._1)(t,"mean","batchNorm"),u=(0,l._1)(n,"variance","batchNorm");let c,p;return null!=s&&(c=(0,l._1)(s,"scale","batchNorm")),null!=r&&(p=(0,l._1)(r,"offset","batchNorm")),d.hu(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),d.hu(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),d.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&d.hu(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=p&&d.hu(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,u,p,c,a)}});const P=(0,p.op)({bincount_:function(e,t,n){const r=(0,l._1)(e,"x","bincount"),s=(0,l._1)(t,"weights","bincount");d.hu("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),d.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),d.hu(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},i={size:n};return u.BV.runKernel(c.zvY,a,i)}});const V=(0,p.op)({bitwiseAnd_:function(e,t){const n=(0,l._1)(e,"x","bitwiseAnd"),r=(0,l._1)(t,"y","bitwiseAnd");if(!(0,d.cO)(n.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${r.shape}`);if("int32"!==n.dtype||"int32"!==r.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${r.dtype}`);const s={a:n,b:r};return u.BV.runKernel(c.hCO,s)}});const W=(0,p.op)({broadcastArgs_:function(e,t){const n=(0,l._1)(e,"s0","broadcastArgs","int32"),r=(0,l._1)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return u.BV.runKernel(c.eEB,s)}});var U=n(8247),G=n(2657),H=n(6825),j=n(2279),q=n(8723),X=n(1661);const K=(0,p.op)({concat1d_:function(e){return(0,E.z)(e,0)}});const Q=(0,p.op)({concat2d_:function(e,t){return(0,E.z)(e,t)}});const Z=(0,p.op)({concat3d_:function(e,t){return(0,E.z)(e,t)}});const Y=(0,p.op)({concat4d_:function(e,t){return(0,E.z)(e,t)}});var J=n(1355),ee=n(4794),te=n(1405);const ne=(0,p.op)({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=(0,l._1)(e,"x","conv3d"),o=(0,l._1)(t,"filter","conv3d");let p=i,h=!1;4===i.rank&&(h=!0,p=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),d.hu(5===p.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${p.rank}.`)),d.hu(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),d.hu(p.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),d.hu((0,I.jT)(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),d.hu("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`)),d.hu((0,I.U3)(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),d.hu((0,I.U3)(n),(()=>"Error in conv3D: Strides should be larger than 0."));const f={x:p,filter:o},m={strides:n,pad:r,dataFormat:s,dilations:a},g=u.BV.runKernel(c.x12,f,m);return h?(0,T.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}});var re=n(7594);const se=(0,p.op)({conv3dTranspose_:function(e,t,n,r,s){const a=(0,l._1)(e,"x","conv3dTranspose"),i=(0,l._1)(t,"filter","conv3dTranspose");return(0,re._)(n,a,i,r,s)}});var ae=n(173),ie=n(2699),oe=n(9640),ue=n(7405);const ce=(0,p.op)({denseBincount_:function(e,t,n,r=!1){const s=(0,l._1)(e,"x","denseBincount"),a=(0,l._1)(t,"weights","denseBincount");d.hu("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),d.hu(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),d.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),d.hu(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const i={x:s,weights:a},o={size:n,binaryOutput:r};return u.BV.runKernel(c.QRR,i,o)}});var le=n(9112),de=n(4718);const pe=(0,p.op)({diag_:function(e){const t={x:(0,l._1)(e,"x","diag")};return u.BV.runKernel(c.$w,t)}});var he=n(557),fe=n(1274),me=n(9322),ge=n(548);const ye=(0,p.op)({einsum_:function(e,...t){const n=t.map(((e,t)=>(0,l._1)(e,`tensors${t}`,"einsum"))),r={equation:e};return u.BV.runKernel(c.$g6,n,r)}});var be=n(3233);const xe=(0,p.op)({ensureShape_:function(e,t){const n=(0,l._1)(e,"x","ensureShape","string_or_numeric");if(!(0,d.DK)(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});var ve=n(6477),we=n(4650),ke=n(1954),Ne=n(4842),Se=n(1300),Ie=n(3426),Te=n(7501);const Ce=(0,p.op)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=(0,G.f)([e,t],r),a=e<=t?e:t;for(let o=0;o<a;++o)s.set(1,o,o);const i=(0,T.X)(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return(0,Te.G)((0,Se.d)(i,0),[n[0],1,1]);if(2===n.length)return(0,Te.G)((0,Se.d)((0,Se.d)(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,Te.G)((0,Se.d)((0,Se.d)((0,Se.d)(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Ee=n(4006),Ae=n(6943),$e=n(9165),_e=n(4926),Re=n(636),Fe=n(7630),De=n(4386),Oe=n(3963),Me=n(4365),ze=n(6230),Be=n(9133),Le=n(6573),Pe=n(624);function Ve(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return u.BV.runKernel(c.e7N,{},r)}var We=n(9648),Ue=n(2597),Ge=n(7474),He=n(3888),je=n(1510),qe=n(1391),Xe=n(2856),Ke=n(8651),Qe=n(5750),Ze=n(596);const Ye=2147483648;const Je=(0,p.op)({searchSorted_:function(e,t,n="left"){const r=(0,l._1)(e,"sortedSequence","searchSorted"),s=(0,l._1)(t,"values","searchSorted"),a=r.shape[r.shape.length-1],i=s.shape[s.shape.length-1],o=(0,T.X)(r,[-1,a]),p=(0,T.X)(s,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==p.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,d.NA)(p.shape)>=Ye)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=Ye)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const h={sortedSequence:o,values:p},f={side:n};return u.BV.runKernel(c.nr8,h,f)}});function et(e,t){return Je(e,t,"left")}var tt=n(3307),nt=n(1174);const rt=(0,p.op)({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const i=(0,l._1)(e,"x","maxPool3d");let o=i,p=!1;4===i.rank&&(p=!0,o=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),d.hu(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),d.hu("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),(0,I.m)("maxPool3d",r,s);const h={x:o},f={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},m=u.BV.runKernel(c.OAf,h,f);return p?(0,T.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});const st=(0,p.op)({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:(0,l._1)(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},o=u.BV.runKernel(c.vFR,a,i);return{result:o[0],indexes:o[1]}}});var at=n(632),it=n(5130),ot=n(4917),ut=n(4077);function ct(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=(0,l._1)(e,"x","meshgrid",e instanceof ut.es?e.dtype:"float32");if(void 0===t)return[r];let s=(0,l._1)(t,"y","meshgrid",t instanceof ut.es?t.dtype:"float32");const a=(0,d.NA)(r.shape),i=(0,d.NA)(s.shape);return"xy"===n?(r=(0,T.X)(r,[1,-1]),s=(0,T.X)(s,[-1,1]),[(0,A.O)((0,ot.i)([i,1],r.dtype),r),(0,A.O)(s,(0,ot.i)([1,a],s.dtype))]):(r=(0,T.X)(r,[-1,1]),s=(0,T.X)(s,[1,-1]),[(0,A.O)(r,(0,ot.i)([1,i],r.dtype)),(0,A.O)((0,ot.i)([a,1],s.dtype),s)])}var lt=n(5735),dt=n(4513),pt=n(1483),ht=n(5228),ft=n(3591),mt=n(248),gt=n(827);const yt=(0,p.op)({moments_:function(e,t=null,n=!1){e=(0,l._1)(e,"x","moments");const r=(0,d.EC)(t,e.shape),s=(0,it.J)(e,r,n);let a=s.shape;n||(a=(0,ft.rv)(s.shape,r));const i=(0,mt.h)((0,gt.l)((0,S.p)(e,"float32"),(0,T.X)(s,a)));return{mean:s,variance:(0,it.J)(i,r,n)}}});const bt=(0,p.op)({multiRNNCell_:function(e,t,n,r){const s=(0,l._1)(t,"data","multiRNNCell"),a=(0,l.sI)(n,"c","multiRNNCell"),i=(0,l.sI)(r,"h","multiRNNCell");let o=s;const u=[];for(let l=0;l<e.length;l++){const t=e[l](o,a[l],i[l]);u.push(t[0]),u.push(t[1]),o=t[1]}const c=[],d=[];for(let l=0;l<u.length;l+=2)c.push(u[l]),d.push(u[l+1]);return[c,d]}});const xt=(0,p.op)({multinomial_:function(e,t,n,r=!1){const s=(0,l._1)(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?(0,T.X)(s,[1,-1]):s},d={numSamples:t,seed:n,normalized:r},p=u.BV.runKernel(c.NZg,o,d);return 1===i?(0,T.X)(p,[p.size]):p}});var vt=n(7370),wt=n(6500),kt=n(6708),Nt=n(7846);const St=(0,p.op)({outerProduct_:function(e,t){const n=(0,l._1)(e,"v1","outerProduct"),r=(0,l._1)(t,"v2","outerProduct");d.hu(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=(0,T.X)(n,[-1,1]),a=(0,T.X)(r,[1,-1]);return(0,A.O)(s,a)}});var It=n(9682);const Tt=(0,p.op)({pad1d_:function(e,t,n=0){return(0,d.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,It.v)(e,[t],n)}});const Ct=(0,p.op)({pad2d_:function(e,t,n=0){return(0,d.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}});const Et=(0,p.op)({pad3d_:function(e,t,n=0){return(0,d.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}});const At=(0,p.op)({pad4d_:function(e,t,n=0){return(0,d.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}});var $t=n(5860),_t=n(3453),Rt=n(8151),Ft=n(9798),Dt=n(9451);const Ot=(0,p.op)({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>(0,l._1)(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:(0,l._1)(t,"paramsDenseValues","raggedGather"),indices:(0,l._1)(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},i=u.BV.runKernel(c.dDz,s,a);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}});const Mt=(0,p.op)({raggedRange_:function(e,t,n){const r=(0,l._1)(e,"starts","raggedRange"),s={starts:r,limits:(0,l._1)(t,"limits","raggedRange",r.dtype),deltas:(0,l._1)(n,"deltas","raggedRange",r.dtype)},a=u.BV.runKernel(c.CQl,s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const zt=(0,p.op)({raggedTensorToTensor_:function(e,t,n,r,s){const a=(0,l._1)(e,"shape","raggedTensorToTensor","int32"),i=(0,l._1)(t,"values","raggedTensorToTensor"),o={shape:a,values:i,defaultValue:(0,l._1)(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:r.map(((e,t)=>(0,l._1)(e,`tensors${t}`,"raggedTensorToTensor","int32")))},d={rowPartitionTypes:s};return u.BV.runKernel(c.BiW,o,d)}});const Bt=(0,p.op)({rand_:function(e,t,n){(0,d.Mu)(e);const r=(0,d.NA)(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let a=0;a<r;a++)s[a]=t();return u.BV.makeTensor(s,e,n)}});var Lt=n(6377);class Pt{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Lt.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Vt{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Lt.alea(s.toString()),this.randn=new Pt(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Wt{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Lt.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ut=(0,p.op)({randomGamma_:function(e,t,n=1,r="float32",s){if((0,d.Mu)(e),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Vt(t,n,r,s),i=(0,G.f)(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const Gt=(0,p.op)({randomNormal_:function(e,t=0,n=1,r,s){if((0,d.Mu)(e),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Pt(t,n,r,!1,s),i=(0,G.f)(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const Ht=(0,p.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Gt(e,0,1,t,n)}});const jt=(0,p.op)({randomUniform_:function(e,t=0,n=1,r="float32",s){(0,d.Mu)(e);const a=(0,G.f)(e,r),i=new Wt(t,n,null,s);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});const qt=(0,p.op)({randomUniformInt_:function(e,t,n,r){return jt(e,t,n,"int32",r)}});function Xt(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return u.BV.runKernel(c.e6w,{},s)}var Kt=n(766),Qt=n(9036),Zt=n(7409),Yt=n(3582),Jt=n(7486);const en=(0,p.op)({reverse1d_:function(e){const t=(0,l._1)(e,"x","reverse");return d.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,Jt.G)(t,0)}});const tn=(0,p.op)({reverse2d_:function(e,t){const n=(0,l._1)(e,"x","reverse");return d.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,Jt.G)(n,t)}});const nn=(0,p.op)({reverse3d_:function(e,t){const n=(0,l._1)(e,"x","reverse");return d.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,Jt.G)(n,t)}});const rn=(0,p.op)({reverse4d_:function(e,t){const n=(0,l._1)(e,"x","reverse");return d.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,Jt.G)(n,t)}});var sn=n(7809),an=n(2634),on=n(9494),un=n(5503),cn=n(8678);const ln=async function(e,t){const n=(0,l._1)(e,"x","setdiff1d"),r=(0,l._1)(t,"y","setdiff1d");d.hu(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),d.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),d.hu(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let l=0;l<s.length;l++)i.has(s[l])||o++;const u=new ut.YD([o],n.dtype),c=new ut.YD([o],"int32");for(let l=0,d=0;l<s.length;l++)i.has(s[l])||(u.values[d]=s[l],c.values[d]=l,d++);return[u.toTensor(),c.toTensor()]};var dn=n(4434),pn=n(9331),hn=n(3254);const fn=(0,p.op)({slice1d_:function(e,t,n){const r=(0,l._1)(e,"x","slice1d");return d.hu(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),(0,R.t)(r,[t],[n])}});const mn=(0,p.op)({slice2d_:function(e,t,n){const r=(0,l._1)(e,"x","slice2d");return d.hu(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),(0,R.t)(r,t,n)}});const gn=(0,p.op)({slice3d_:function(e,t,n){const r=(0,l._1)(e,"x","slice3d");return d.hu(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),(0,R.t)(r,t,n)}});const yn=(0,p.op)({slice4d_:function(e,t,n){const r=(0,l._1)(e,"x","slice4d");return d.hu(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),(0,R.t)(r,t,n)}});var bn=n(682),xn=n(3694),vn=n(7918),wn=n(7020),kn=n(8447),Nn=n(4415),Sn=n(3710),In=n(8644),Tn=n(3261),Cn=n(5265),En=n(9590),An=n(2991),$n=n(1901),_n=n(5158),Rn=n(5475),Fn=n(1173),Dn=n(701),On=n(7852);function Mn(e,t){(0,d.Cq)(e);const n=(0,l.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,On.H)(e,null,n,t)}function zn(e,t,n){if((0,d.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=(0,l.C)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,On.H)(e,t,r,n)}var Bn=n(9906);function Ln(e,t,n){if((0,d.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=(0,l.C)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,On.H)(e,t,r,n)}function Pn(e,t,n){if((0,d.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=(0,l.C)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,On.H)(e,t,r,n)}function Vn(e,t,n){if((0,d.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=(0,l.C)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,(0,On.H)(e,t,r,n)}var Wn=n(3028);const Un=(0,p.op)({tensorScatterUpdate_:function(e,t,n){const r=(0,l._1)(e,"tensor","tensorScatterupdate"),s=(0,l._1)(t,"indices","tensorScatterupdate","int32"),a=(0,l._1)(n,"updates","tensorScatterupdate");if(Wn.validateInput(a,s,r.shape),r.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${a.dtype}.`);const i={tensor:r,indices:s,updates:a};return u.BV.runKernel(c.SIB,i,{})}});var Gn=n(3243);const Hn=(0,p.op)({truncatedNormal_:function(e,t=0,n=1,r,s){if((0,d.Mu)(e),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Pt(t,n,r,!0,s),i=(0,G.f)(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});var jn=n(9608),qn=n(8749),Xn=n(4136);function Kn(e,t){return Je(e,t,"right")}function Qn(e,t=!0,n,r){return u.BV.makeVariable(e,t,n,r)}var Zn=n(5912),Yn=n(8333);const Jn=async function(e){const t=(0,l._1)(e,"condition","whereAsync","bool"),n=await t.data(),r=(0,Yn.Z)(t.shape,n);return e!==t&&t.dispose(),r};var er=n(723),tr=n(6577);const nr=async function(e,t,n){const r=(0,l._1)(e,"tensor","boolMask"),s=(0,l._1)(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;d.hu(i>0,(()=>"mask cannot be scalar")),d.k5(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let l=a;l<a+i;l++)u*=o[l];const c=o.slice(0,a).concat([u],o.slice(a+i)),p=(0,T.X)(r,c),h=(0,T.X)(s,[-1]),f=await Jn(h),m=(0,En.L)(f,[1]),g=(0,_e.I)(p,m,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),m.dispose(),p.dispose(),h.dispose(),f.dispose(),g};var rr=n(9065),sr=n(3561),ar=n(747);const ir=(0,p.op)({movingAverage_:function(e,t,n,r,s=!0){const a=(0,l._1)(e,"v","movingAverage"),i=(0,l._1)(t,"x","movingAverage"),u=(0,l._1)(n,"decay","movingAverage");(0,ar.assertTypesMatch)(a,i),d.hu(d.cO(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const c=(0,on.i)(1),p=(0,gt.l)(c,u);let h=(0,$.d)((0,gt.l)(i,a),p);if(s){d.hu(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=(0,l._1)(r,"step","movingAverage");h=(0,fe.h)(h,(0,gt.l)(c,(0,_t.s)(u,e)))}return(0,o.I)(a,h)}});const or=(0,p.op)({scatterND_:function(e,t,n){(0,d.Mu)(n);const r=(0,l._1)(e,"indices","scatterND","int32"),s=(0,l._1)(t,"updates","scatterND");Wn.validateInput(s,r,n);const a={indices:r,updates:s},i={shape:n};return u.BV.runKernel(c.xQA,a,i)}});const ur=(0,p.op)({sparseToDense_:function(e,t,n,r=0){(0,d.Mu)(n);const s=(0,l._1)(e,"sparseIndices","sparseToDense","int32"),a=(0,l._1)(t,"sparseValues","sparseToDense","string_or_numeric"),i=(0,l._1)(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},p={outputShape:n};return u.BV.runKernel(c.D2d,o,p)}});const cr=(0,p.op)({gatherND_:function(e,t){const n=(0,l._1)(t,"indices","gatherND","int32"),r={params:(0,l._1)(e,"x","gatherND","string_or_numeric"),indices:n};return u.BV.runKernel(c.q1x,r)}});const lr=(0,p.op)({dropout_:function(e,t,n,r){const s=(0,l._1)(e,"x","dropout");if(d.hu("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),d.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ut.es?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(d.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),i=1-t,u=(0,fe.h)((0,Ae.G)((0,o.I)(jt(a,0,1,"float32",r),i)),i);return(0,$.d)(s,u)}});function dr(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function pr(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return Mn(s,"float32")}const hr=async function(e,t,n=1){const r=(0,l._1)(e,"predictions","inTopK"),s=(0,l._1)(t,"targets","inTopK");(0,d.hu)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),(0,d.hu)(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),(0,d.k5)(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];(0,d.hu)(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await r.data(),o=await s.data(),[u,c]=[i.length/a,a],p=(0,d.WP)("bool",u);for(let l=0;l<u;l++){const e=l*c,t=i.subarray(e,e+c),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort(((e,t)=>t.value-e.value)),p[l]=0;for(let s=0;s<n;s++)if(r[s].index===o[l]){p[l]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),(0,Dn.X)(p,s.shape,"bool")};var fr=n(633),mr=n(2200),gr=n(6013),yr=n(9832),br=n(9323);const xr=(0,p.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:p,activation:h="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(h=h||"linear",!1===(0,br.uy)(u.BV.state.gradientDepth,h)){d.hu("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let u=(0,ee.T)(e,t,n,r,s,a,i);return null!=p&&(u=(0,o.I)(u,p)),(0,br.QH)(u,h,f,m)}const g=(0,l._1)(e,"x","conv2d","float32"),y=(0,l._1)(t,"filter","conv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,T.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),d.hu(4===b.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${b.rank}.`)),d.hu(4===y.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${y.rank}.`)),I.m("fused conv2d",r,i);const v="NHWC"===s?b.shape[3]:b.shape[1];d.hu(y.shape[2]===v,(()=>`Error in conv2d: depth of input (${v}) must match input depth for filter ${y.shape[2]}.`)),d.hu(I.jT(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const w=I.Ix(b.shape,y.shape,n,a,r,i);let k,N;if(null!=p&&(k=(0,l._1)(p,"bias","fused conv2d"),[k]=(0,ar.makeTypesMatch)(k,g),"NHWC"===s?mr.assertAndGetBroadcastShape(w.outShape,k.shape):(d.hu(k.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${k.shape.length}.`)),d.hu(0===k.shape.length||k.shape[0]===w.outChannels||1===k.shape[0],(()=>`Error in fused conv2d: bias shape (${k.shape}) is not compatible with the number of output channels (${w.outChannels})`)))),null!=f){const e=f.shape;if(d.hu(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)d.hu(1===e[0]||e[0]===w.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${w.outChannels}).`));else if(3===e.length)try{mr.assertAndGetBroadcastShape(e,w.outShape)}catch(A){const t=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${w.outShape}).`;throw Error(t)}N=(0,l._1)(f,"prelu weights","fused conv2d")}const S=(e,t)=>{d.hu("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[i,o,u,c]=t,l=(0,br.Fr)(e,u,h);d.hu(I.I0(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[(0,yr._)(o.shape,l,i,n,r),(0,gr.p)(o,l,i.shape,n,r)];if(null!=c){const e=(0,br.pf)(c,l);p.push(e)}return p},C={x:b,filter:y,bias:k,preluActivationWeights:N},E={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:h,leakyreluAlpha:m};if(null==p){const e=(0,fr.cb)(((e,t,n)=>{let r=u.BV.runKernel(c._V0,C,E);return n([t,e,r]),x&&(r=(0,T.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:S}}));return e(b,y)}{const e=(0,fr.cb)(((e,t,n,r)=>{let s=u.BV.runKernel(c._V0,C,E);return r([t,e,s,n]),x&&(s=(0,T.X)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:S}}));return e(b,y,k)}}});var vr=n(8098),wr=n(4375);const kr=(0,p.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:p,activation:h="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(!1===(0,br.uy)(u.BV.state.gradientDepth,h)){let u=(0,de.B)(e,t,n,r,s,a,i);return null!=p&&(u=(0,o.I)(u,p)),(0,br.QH)(u,h,f,m)}const g=(0,l._1)(e,"x","depthwiseConv2d","float32"),y=(0,l._1)(t,"filter","depthwiseConv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,T.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),d.hu(4===b.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`)),d.hu(4===y.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`)),d.hu(b.shape[3]===y.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`)),null==a&&(a=[1,1]),d.hu(I.jT(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),I.m("fused depthwiseConv2d",r,i);const v=I.Ix(b.shape,y.shape,n,a,r,i,!0);let w,k;null!=p&&(w=(0,l._1)(p,"bias","fused conv2d"),[w]=(0,ar.makeTypesMatch)(w,g),mr.assertAndGetBroadcastShape(v.outShape,w.shape)),null!=f&&(k=(0,l._1)(f,"prelu weights","fused depthwiseConv2d"));const N=(e,t)=>{d.hu(I.I0(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,o,u,c]=t,l=(0,br.Fr)(e,u,h),p=(0,wr.v)(o.shape,l,s,n,r,a,i),f=(0,vr.z)(o,l,s.shape,n,r,a,i);if(null!=c){return[p,f,(0,br.pf)(w,l)]}return[p,f]},S={x:b,filter:y,bias:w,preluActivationWeights:k},C={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:h,leakyreluAlpha:m};if(null==p){const e=(0,fr.cb)(((e,t,n)=>{let r=u.BV.runKernel(c.luS,S,C);return n([t,e,r]),x&&(r=(0,T.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:N}}));return e(b,y)}{const e=(0,fr.cb)(((e,t,n,r)=>{let s=u.BV.runKernel(c.luS,S,C);return r([t,e,s,n]),x&&(s=(0,T.X)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:N}}));return e(b,y,w)}}});const Nr=(0,p.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:p=.2}){if(!1===(0,br.uy)(u.BV.state.gradientDepth,a)){let u=(0,A.O)(e,t,n,r);return null!=s&&(u=(0,o.I)(u,s)),(0,br.QH)(u,a,i,p)}let h=(0,l._1)(e,"a","fused matMul"),f=(0,l._1)(t,"b","fused matMul");[h,f]=(0,ar.makeTypesMatch)(h,f);const m=n?h.shape[h.rank-2]:h.shape[h.rank-1],g=r?f.shape[f.rank-1]:f.shape[f.rank-2],y=n?h.shape[h.rank-1]:h.shape[h.rank-2],b=r?f.shape[f.rank-2]:f.shape[f.rank-1],x=h.shape.slice(0,-2),v=f.shape.slice(0,-2),w=d.NA(x),k=d.NA(v);d.hu(m===g,(()=>`Error in fused matMul: inner shapes (${m}) and (${g}) of Tensors with shapes ${h.shape} and ${f.shape} and transposeA=${n} and transposeB=${r} must match.`));const N=mr.assertAndGetBroadcastShape(h.shape.slice(0,-2),f.shape.slice(0,-2)).concat([y,b]),S=n?(0,T.X)(h,[w,m,y]):(0,T.X)(h,[w,y,m]),I=r?(0,T.X)(f,[k,b,g]):(0,T.X)(f,[k,g,b]);let C,E;null!=s&&(C=(0,l._1)(s,"bias","fused matMul"),[C]=(0,ar.makeTypesMatch)(C,h),mr.assertAndGetBroadcastShape(N,C.shape)),null!=i&&(E=(0,l._1)(i,"prelu weights","fused matMul"));const $=(e,t)=>{const[i,o,u,c]=t,l=(0,br.Fr)((0,T.X)(e,u.shape),u,a);let d,p;if(n||r?!n&&r?(d=(0,A.O)(l,o,!1,!1),p=(0,A.O)(l,i,!0,!1)):n&&!r?(d=(0,A.O)(o,l,!1,!0),p=(0,A.O)(i,l,!1,!1)):(d=(0,A.O)(o,l,!0,!0),p=(0,A.O)(l,i,!0,!0)):(d=(0,A.O)(l,o,!1,!0),p=(0,A.O)(i,l,!0,!1)),null!=s){return[d,p,(0,br.pf)(c,l)]}return[d,p]},_={a:S,b:I,bias:C,preluActivationWeights:E},R={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:p};if(null==s){const e=(0,fr.cb)(((e,t,n)=>{const r=u.BV.runKernel(c.usg,_,R);return n([e,t,r]),{value:(0,T.X)(r,N),gradFunc:$}}));return e(S,I)}{const e=(0,fr.cb)(((e,t,n,r)=>{const s=u.BV.runKernel(c.usg,_,R);return r([e,t,s,n]),{value:(0,T.X)(s,N),gradFunc:$}}));return e(S,I,C)}}});const Sr=(0,p.op)({hammingWindow_:function(e){return pr(e,.54,.46)}});const Ir=(0,p.op)({hannWindow_:function(e){return pr(e,.5,.5)}});const Tr=(0,p.op)({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push((0,R.t)(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=(0,E.z)([(0,R.t)(e,a,t-r),(0,Ee.h)([r],s)]);i.push(o),a+=n}return 0===i.length?zn([],[0,t]):(0,T.X)((0,E.z)(i),[i.length,t])}});const Cr=(0,p.op)({stft_:function(e,t,n,r,s=Ir){null==r&&(r=dr(t));const a=Tr(e,t,n),i=(0,$.d)(a,s(t));return(0,Sn.Q)(i,r)}});const Er=(0,p.op)({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=(0,l._1)(e,"image","cropAndResize"),o=(0,l._1)(t,"boxes","cropAndResize","float32"),p=(0,l._1)(n,"boxInd","cropAndResize","int32"),h=o.shape[0];d.hu(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),d.hu(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${o.shape}.`)),d.hu(1===p.rank&&p.shape[0]===h,(()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${o.shape}.`)),d.hu(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),d.hu(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),d.hu("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const f={image:i,boxes:o,boxInd:p},m={method:s,extrapolationValue:a,cropSize:r};return u.BV.runKernel(c.VcC,f,m)}});const Ar=(0,p.op)({flipLeftRight_:function(e){const t=(0,l._1)(e,"image","flipLeftRight","float32");d.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return u.BV.runKernel(c.Uyb,n,{})}});const $r=(0,p.op)({grayscaleToRGB_:function(e){const t=(0,l._1)(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];d.hu(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),d.hu(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,(0,Te.G)(t,s)}});const _r=(0,p.op)({rgbToGrayscale_:function(e){const t=(0,l._1)(e,"image","RGBToGrayscale"),n=t.rank-1,r=t.shape[n];d.hu(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),d.hu(3===r,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${r}.`));const s=t.dtype,a=(0,S.p)(t,"float32"),i=Mn([.2989,.587,.114]);let o;switch(t.rank){case 2:o=ye("ij,j->i",a,i);break;case 3:o=ye("ijk,k->ij",a,i);break;case 4:o=ye("ijkl,l->ijk",a,i);break;case 5:o=ye("ijklm,m->ijkl",a,i);break;case 6:o=ye("ijklmn,n->ijklm",a,i);break;default:throw new Error("Not a valid tensor rank.")}return o=(0,Se.d)(o,-1),(0,S.p)(o,s)}});const Rr=(0,p.op)({rotateWithOffset_:function(e,t,n=0,r=.5){const s=(0,l._1)(e,"image","rotateWithOffset","float32");d.hu(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:t,fillValue:n,center:r};return u.BV.runKernel(c.b9H,a,i)}});function Fr(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),d.hu(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),d.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),d.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),d.hu(1===t.rank,(()=>"scores must be a 1D tensor")),d.hu(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),d.hu(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Dr=(0,p.op)({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=(0,l._1)(e,"boxes","nonMaxSuppression","float32"),i=(0,l._1)(t,"scores","nonMaxSuppression","float32"),o=Fr(a,i,n,r,s),d={maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold};return u.BV.runKernel(c.uv1,{boxes:a,scores:i},d)}});var Or=n(3337);const Mr=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=(0,l._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,l._1)(t,"scores","nonMaxSuppressionAsync"),o=Fr(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),c=u[0],d=u[1],{selectedIndices:p}=(0,Or.GP)(c,d,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),Mn(p,"int32")};const zr=(0,p.op)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=(0,l._1)(e,"boxes","nonMaxSuppression"),o=(0,l._1)(t,"scores","nonMaxSuppression"),d=Fr(i,o,n,r,s,a),p={boxes:i,scores:o},h={maxOutputSize:n=d.maxOutputSize,iouThreshold:r=d.iouThreshold,scoreThreshold:s=d.scoreThreshold,softNmsSigma:a=d.softNmsSigma},f=u.BV.runKernel(c.W0H,p,h);return{selectedIndices:f[0],selectedScores:f[1]}}});const Br=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=(0,l._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,l._1)(t,"scores","nonMaxSuppressionAsync"),u=Fr(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const c=await Promise.all([i.data(),o.data()]),d=c[0],p=c[1],{selectedIndices:h,selectedScores:f}=(0,Or.pA)(d,p,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Mn(h,"int32"),selectedScores:Mn(f)}};const Lr=(0,p.op)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=(0,l._1)(e,"boxes","nonMaxSuppression"),o=(0,l._1)(t,"scores","nonMaxSuppression"),d=Fr(i,o,n,r,s,null),p={boxes:i,scores:o},h={maxOutputSize:d.maxOutputSize,iouThreshold:d.iouThreshold,scoreThreshold:d.scoreThreshold,padToMaxOutputSize:a},f=u.BV.runKernel(c.cye,p,h);return{selectedIndices:f[0],validOutputs:f[1]}}});const Pr=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=(0,l._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,l._1)(t,"scores","nonMaxSuppressionAsync"),u=Fr(i,o,n,r,s,null),c=u.maxOutputSize,d=u.iouThreshold,p=u.scoreThreshold,[h,f]=await Promise.all([i.data(),o.data()]),{selectedIndices:m,validOutputs:g}=(0,Or.qP)(h,f,c,d,p,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Mn(m,"int32"),validOutputs:(0,on.i)(g,"int32")}};var Vr=n(3305),Wr=n(5098);const Ur=(0,p.op)({threshold_:function(e,t="binary",n=!1,r=.5){const s=(0,l._1)(e,"image","threshold"),a=s.shape[0]*s.shape[1];let i,u,c,p,h=(0,$.d)(Mn([r]),255);if(d.hu(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),d.hu(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),d.hu("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),d.hu("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[i,u,c]=(0,In.V)(s,[1,1,1],-1);const e=(0,$.d)(i,.2989),t=(0,$.d)(u,.587),n=(0,$.d)(c,.114);p=(0,o.I)((0,o.I)(e,t),n)}else p=e;if("otsu"===t){h=function(e,t){let n,r,s,a,i,u,c=Mn([-1]),l=Mn([0]),d=Mn([0]);for(let p=0;p<e.size-1;p++){n=(0,R.t)(e,0,p+1),r=(0,R.t)(e,p+1),i=(0,fe.h)((0,Rn.S)(n),t),u=(0,fe.h)((0,Rn.S)(r),t);const h=(0,Rn.S)((0,$.d)(n,Xt(0,n.size)));s=(0,fe.h)(h,(0,Rn.S)(n));const f=(0,Ee.h)(r.shape,n.size),m=(0,o.I)(Xt(0,r.size),f),g=(0,$.d)(r,m);a=(0,fe.h)((0,Rn.S)(g),(0,Rn.S)(r));const y=(0,gt.l)(s,a),b=(0,gt.l)(s,a),x=(0,$.d)(i,u);d=(0,$.d)((0,$.d)(x,y),b);const v=(0,Re.p)(d,l);l=(0,Zn.a)(v,d,l),c=(0,Zn.a)(v,Mn([p]),c)}return c}(P((0,S.p)((0,sn.N)(p),"int32"),(0,Dn.X)([]),256),a)}const f=n?(0,Pe.z)(p,h):(0,Re.p)(p,h);return(0,S.p)((0,$.d)(f,255),"int32")}});const Gr=(0,p.op)({transform_:function(e,t,n="nearest",r="constant",s=0,a){const i=(0,l._1)(e,"image","transform","float32"),o=(0,l._1)(t,"transforms","transform","float32");d.hu(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),d.hu(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),d.hu(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const p={image:i,transforms:o},h={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return u.BV.runKernel(c.wx7,p,h)}});const Hr=(0,p.op)({bandPart_:function(e,t,n){const r=(0,l._1)(e,"a","bandPart");(0,d.hu)(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);let o,u;"number"==typeof t?((0,d.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,d.hu)(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),o=(0,l._1)(t<0?a:t,"numLower","bandPart")):((0,d.hu)("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),o=(0,Zn.a)((0,Le.d)(t,0),a,(0,dt.L)(t,a))),"number"==typeof n?((0,d.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),(0,d.hu)(n<=i,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`)),u=(0,l._1)(n<0?i:n,"numUpper","bandPart")):((0,d.hu)("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),u=(0,Zn.a)((0,Le.d)(n,0),i,(0,dt.L)(n,i)));const c=(0,T.X)(Xt(0,a,1,"int32"),[-1,1]),p=Xt(0,i,1,"int32"),h=(0,gt.l)(c,p),f=(0,Xe.H)((0,Pe.z)(h,o),(0,Fe.b)(h,(0,vt.W)(u))),m=(0,er.l)([a,i],r.dtype);return(0,T.X)((0,An.k)((0,Xn.H)((0,T.X)(r,[-1,a,i])).map((e=>(0,Zn.a)(f,e,m)))),s)}});const jr=(0,p.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,d.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,d.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,In.V)(e,e.shape[0],0).map((e=>(0,En.L)(e,[0])));(0,d.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let s=0;s<e.length;++s)n.push(u.BV.tidy((()=>{let e=r[s];if(s>0)for(let t=0;t<s;++t){const r=(0,$.d)((0,Rn.S)((0,$.d)(n[t],e)),n[t]);e=(0,gt.l)(e,r)}return(0,fe.h)(e,(0,sr.K)(e,"euclidean"))})));return t?(0,An.k)(n,0):n}});var qr=n(4368);function Xr(e,t=!1){return u.BV.tidy((()=>{(0,d.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=Ce(n),a=(0,q.d)(e);const i=zn([[1]],[1,1]);let o=(0,q.d)(i);const c=n>=r?r:n;for(let e=0;e<c;++e){const t=a,c=o,l=s;[o,a,s]=u.BV.tidy((()=>{const t=(0,R.t)(a,[e,e],[n-e,1]),u=(0,sr.K)(t),c=(0,R.t)(a,[e,e],[1,1]),l=(0,Zn.a)((0,Re.p)(c,0),zn([[-1]]),zn([[1]])),d=(0,gt.l)(c,(0,$.d)(l,u)),p=(0,fe.h)(t,d);o=1===p.shape[0]?(0,q.d)(i):(0,E.z)([i,(0,R.t)(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const h=(0,vt.W)((0,fe.h)((0,A.O)(l,d),u)),f=(0,R.t)(a,[e,0],[n-e,r]),m=(0,$.d)(h,o),g=(0,rr.p)(o);if(0===e)a=(0,gt.l)(f,(0,A.O)(m,(0,A.O)(g,f)));else{const t=(0,gt.l)(f,(0,A.O)(m,(0,A.O)(g,f)));a=(0,E.z)([(0,R.t)(a,[0,0],[e,r]),t],0)}const y=(0,rr.p)(m),b=(0,R.t)(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=(0,gt.l)(b,(0,A.O)((0,A.O)(b,o),y));else{const t=(0,gt.l)(b,(0,A.O)((0,A.O)(b,o),y));s=(0,E.z)([(0,R.t)(s,[0,0],[n,e]),t],1)}return[o,a,s]})),(0,qr.B9)([t,c,l])}return!t&&n>r&&(s=(0,R.t)(s,[0,0],[n,r]),a=(0,R.t)(a,[0,0],[r,r])),[s,a]}))}const Kr=(0,p.op)({qr_:function(e,t=!1){if((0,d.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Xr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=(0,Xn.H)((0,T.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=Xr(e,t);s.push(n),a.push(r)}));return[(0,T.X)((0,An.k)(s,0),e.shape),(0,T.X)((0,An.k)(a,0),e.shape)]}}});var Qr=n(9876);const Zr=(0,p.op)({computeWeightedLoss_:function(e,t,n=Qr.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,l._1)(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=(0,l._1)(t,"weights","computeWeightedLoss"));const a=null==s?r:(0,$.d)(r,s);if(n===Qr.I.NONE)return a;if(n===Qr.I.SUM)return(0,Rn.S)(a);if(n===Qr.I.MEAN){if(null==s)return(0,it.J)(a);{const e=r.size/s.size,t=(0,fe.h)((0,Rn.S)(a),(0,Rn.S)(s));return e>1?(0,fe.h)(t,(0,on.i)(e)):t}}if(n===Qr.I.SUM_BY_NONZERO_WEIGHTS){if(null==s)return(0,fe.h)((0,Rn.S)(a),(0,on.i)(r.size));{const e=(0,$.d)(s,(0,ot.i)(r.shape)),t=(0,S.p)((0,Rn.S)((0,wt.Q)(e,(0,on.i)(0))),"float32");return(0,fe.h)((0,Rn.S)(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const Yr=(0,p.op)({absoluteDifference_:function(e,t,n,r=Qr.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,l._1)(e,"labels","absoluteDifference"),i=(0,l._1)(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=(0,l._1)(n,"weights","absoluteDifference")),(0,d.k5)(a.shape,i.shape,"Error in absoluteDifference: ");const u=(0,s.W)((0,gt.l)(a,i));return Zr(u,o,r)}});const Jr=(0,p.op)({cosineDistance_:function(e,t,n,r,s=Qr.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,l._1)(e,"labels","cosineDistance"),i=(0,l._1)(t,"predictions","cosineDistance");let o=null;null!=r&&(o=(0,l._1)(r,"weights","cosineDistance")),(0,d.k5)(a.shape,i.shape,"Error in cosineDistance: ");const u=(0,on.i)(1),c=(0,gt.l)(u,(0,Rn.S)((0,$.d)(a,i),n,!0));return Zr(c,o,s)}});const es=(0,p.op)({hingeLoss_:function(e,t,n,r=Qr.I.SUM_BY_NONZERO_WEIGHTS){let s=(0,l._1)(e,"labels","hingeLoss");const a=(0,l._1)(t,"predictions","hingeLoss");let i=null;null!=n&&(i=(0,l._1)(n,"weights","hingeLoss")),(0,d.k5)(s.shape,a.shape,"Error in hingeLoss: ");const o=(0,on.i)(1);s=(0,gt.l)((0,$.d)((0,on.i)(2),s),o);const u=(0,Zt.U)((0,gt.l)(o,(0,$.d)(s,a)));return Zr(u,i,r)}});const ts=(0,p.op)({huberLoss_:function(e,t,n,r=1,a=Qr.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,l._1)(e,"labels","huberLoss"),u=(0,l._1)(t,"predictions","huberLoss");let c=null;null!=n&&(c=(0,l._1)(n,"weights","huberLoss")),(0,d.k5)(i.shape,u.shape,"Error in huberLoss: ");const p=(0,on.i)(r),h=(0,s.W)((0,gt.l)(u,i)),f=(0,dt.L)(h,p),m=(0,gt.l)(h,f),g=(0,o.I)((0,$.d)((0,on.i)(.5),(0,mt.h)(f)),(0,$.d)(p,m));return Zr(g,c,a)}});const ns=(0,p.op)({logLoss_:function(e,t,n,r=1e-7,s=Qr.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,l._1)(e,"labels","logLoss"),i=(0,l._1)(t,"predictions","logLoss");let u=null;null!=n&&(u=(0,l._1)(n,"weights","logLoss")),(0,d.k5)(a.shape,i.shape,"Error in logLoss: ");const c=(0,on.i)(1),p=(0,on.i)(r),h=(0,vt.W)((0,$.d)(a,(0,Ue.c)((0,o.I)(i,p)))),f=(0,$.d)((0,gt.l)(c,a),(0,Ue.c)((0,o.I)((0,gt.l)(c,i),p))),m=(0,gt.l)(h,f);return Zr(m,u,s)}});const rs=(0,p.op)({meanSquaredError_:function(e,t,n,r=Qr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,l._1)(e,"labels","meanSquaredError"),a=(0,l._1)(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=(0,l._1)(n,"weights","meanSquaredError")),(0,d.k5)(s.shape,a.shape,"Error in meanSquaredError: ");const o=(0,Cn.$)(s,a);return Zr(o,i,r)}});const ss=(0,p.op)({sigmoidCrossEntropy_:function(e,t,n,r=0,a=Qr.I.SUM_BY_NONZERO_WEIGHTS){let i=(0,l._1)(e,"multiClassLabels","sigmoidCrossEntropy");const u=(0,l._1)(t,"logits","sigmoidCrossEntropy");let c=null;if(null!=n&&(c=(0,l._1)(n,"weights","sigmoidCrossEntropy")),(0,d.k5)(i.shape,u.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=(0,on.i)(r),t=(0,on.i)(1),n=(0,on.i)(.5);i=(0,o.I)((0,$.d)(i,(0,gt.l)(t,e)),(0,$.d)(n,e))}const p=function(e,t){const n=(0,l._1)(e,"labels","sigmoidCrossEntropyWithLogits"),r=(0,l._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,d.k5)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=(0,Zt.U)(r),i=(0,$.d)(r,n),u=(0,Ge.K)((0,Ne.Q)((0,vt.W)((0,s.W)(r))));return(0,o.I)((0,gt.l)(a,i),u)}(i,u);return Zr(p,c,a)}});const as=(0,p.op)({softmaxCrossEntropy_:function(e,t,n,r=0,s=Qr.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,l._1)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,l._1)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=(0,l._1)(n,"weights","softmaxCrossEntropy")),(0,d.k5)(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=(0,on.i)(r),t=(0,on.i)(1),n=(0,on.i)(a.shape[1]);a=(0,o.I)((0,$.d)(a,(0,gt.l)(t,e)),(0,fe.h)(e,n))}const c=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=(0,fr.cb)(((e,t,r)=>{const s=(0,qe.l)(t,[n],!0),a=(0,gt.l)((0,S.p)(t,"float32"),s);r([e,a]);const i=(0,vt.W)((0,$.d)(a,e));return{value:(0,Rn.S)(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=(0,ft.rv)(e.shape,[n]);return[(0,$.d)((0,T.X)(e,a),(0,gt.l)((0,S.p)(r,"float32"),(0,Ne.Q)(s))),(0,$.d)((0,T.X)(e,a),(0,gt.l)((0,Ne.Q)(s),(0,S.p)(r,"float32")))]}}}));return r(e,t)}(a,i);return Zr(c,u,s)}});const is=(0,p.op)({sparseFillEmptyRows_:function(e,t,n,r){const s=(0,l._1)(e,"indices","sparseFillEmptyRows","int32"),a=(0,l._1)(t,"values","sparseFillEmptyRows"),i=(0,l._1)(n,"denseShape","sparseFillEmptyRows","int32"),o=(0,l._1)(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const d={indices:s,values:a,denseShape:i,defaultValue:o},p=u.BV.runKernel(c.O3z,d);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}});const os=(0,p.op)({sparseReshape_:function(e,t,n){const r=(0,l._1)(e,"inputIndices","sparseReshape","int32"),s=(0,l._1)(t,"inputShape","sparseReshape","int32"),a=(0,l._1)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:r,inputShape:s,newShape:a},o=u.BV.runKernel(c.nhH,i);return{outputIndices:o[0],outputShape:o[1]}}});const us=(0,p.op)({sparseSegmentMean_:function(e,t,n){const r=(0,l._1)(e,"data","sparseSegmentMean"),s=(0,l._1)(t,"indices","sparseSegmentMean","int32"),a=(0,l._1)(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:r,indices:s,segmentIds:a};return u.BV.runKernel(c.w3H,i)}});const cs=(0,p.op)({sparseSegmentSum_:function(e,t,n){const r=(0,l._1)(e,"data","sparseSegmentSum"),s=(0,l._1)(t,"indices","sparseSegmentSum","int32"),a=(0,l._1)(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:r,indices:s,segmentIds:a};return u.BV.runKernel(c.ZjV,i)}});const ls=(0,p.op)({stringNGrams_:function(e,t,n,r,s,a,i,o){const d=(0,l._1)(e,"data","stringNGrams","string");if("string"!==d.dtype)throw new Error("Data must be of datatype string");if(1!==d.shape.length)throw new Error(`Data must be a vector, saw: ${d.shape}`);const p=(0,l._1)(t,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const h={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:i,preserveShortSequences:o},f={data:d,dataSplits:p},m=u.BV.runKernel(c._JP,f,h);return{nGrams:m[0],nGramsSplits:m[1]}}});const ds=(0,p.op)({stringSplit_:function(e,t,n=!0){const r=(0,l._1)(e,"input","stringSplit","string"),s=(0,l._1)(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},i={input:r,delimiter:s},o=u.BV.runKernel(c.s1s,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const ps=(0,p.op)({stringToHashBucketFast_:function(e,t){const n=(0,l._1)(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return u.BV.runKernel(c.XkS,s,r)}});const hs=(0,p.op)({staticRegexReplace_:function(e,t,n,r=!0){const s=(0,l._1)(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:r};return u.BV.runKernel(c.e0R,{x:s},a)}}),fs={fft:wn.k,ifft:kn.S,rfft:Sn.Q,irfft:Nn.w},ms={hammingWindow:Sr,hannWindow:Ir,frame:Tr,stft:Cr},gs={flipLeftRight:Ar,grayscaleToRGB:$r,resizeNearestNeighbor:Wr.j,resizeBilinear:Vr.I,rgbToGrayscale:_r,rotateWithOffset:Rr,cropAndResize:Er,nonMaxSuppression:Dr,nonMaxSuppressionAsync:Mr,nonMaxSuppressionWithScore:zr,nonMaxSuppressionWithScoreAsync:Br,nonMaxSuppressionPadded:Lr,nonMaxSuppressionPaddedAsync:Pr,threshold:Ur,transform:Gr},ys={bandPart:Hr,gramSchmidt:jr,qr:Kr},bs={absoluteDifference:Yr,computeWeightedLoss:Zr,cosineDistance:Jr,hingeLoss:es,huberLoss:ts,logLoss:ns,meanSquaredError:rs,sigmoidCrossEntropy:ss,softmaxCrossEntropy:as},xs={sparseFillEmptyRows:is,sparseReshape:os,sparseSegmentMean:us,sparseSegmentSum:cs},vs={stringNGrams:ls,stringSplit:ds,stringToHashBucketFast:ps,staticRegexReplace:hs}},9682:function(e,t,n){"use strict";n.d(t,{v:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({pad_:function(e,t,n=0){const i=(0,a._1)(e,"x","pad");if(0===i.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:t,constantValue:n},u={x:i};return r.BV.runKernel(s.lyA,u,o)}})},5860:function(e,t,n){"use strict";n.d(t,{d:function(){return p}});var r=n(3740),s=n(569),a=n(5176),i=n(8441),o=n(2582),u=n(1174),c=n(2668),l=n(4968),d=n(7918);const p=(0,c.op)({pool_:function(e,t,n,c,p,h,f){null==p&&(p=[1,1]),null==h&&(h=1),0===c&&(c="valid");const m=(0,r._1)(e,"x","maxPool");let g=m,y=!1;3===m.rank&&(y=!0,g=(0,l.X)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),s.hu(o.jT(h,p),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${h} and dilations '${p}'`));const b=o.Xw(g.shape,t,h,p,c),x=[b.dilationHeight,b.dilationWidth];let v;v="same"===c?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))),r=n.map((e=>e-1)),s=r.map((e=>Math.floor(e/2))),a=r.map(((e,t)=>e-s[t]));return r.map(((e,t)=>[s[t],a[t]]))}([b.filterHeight,b.filterWidth],x):[[0,0],[0,0]];const w=1===x[0]&&1===x[1],[k,N]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=s.map(((e,t)=>e+i[t])),u=t.map(((e,t)=>[r[t],o[t]])),c=t.map(((e,t)=>[0,i[t]]));return[u,c]}([b.inHeight,b.inWidth],x,v),S=w?c:"valid",I=w?g:(0,d.f)(g,x,k),T=("avg"===n?()=>(0,a.w)(I,t,h,S,f):()=>(0,u._)(I,t,h,S,f))(),C=w?T:(0,i.E)(T,x,N);return y?(0,l.X)(C,[C.shape[1],C.shape[2],C.shape[3]]):C}})},3453:function(e,t,n){"use strict";n.d(t,{s:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({pow_:function(e,t){let n=(0,i._1)(e,"base","pow"),o=(0,i._1)(t,"exp","pow");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.pe_,u)}})},8151:function(e,t,n){"use strict";n.d(t,{A:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({prelu_:function(e,t){const n={x:(0,a._1)(e,"x","prelu"),alpha:(0,a._1)(t,"alpha","prelu")};return r.BV.runKernel(s.o0g,n)}})},9798:function(e,t,n){"use strict";function r(e,t=!1){console.log(e.toString(t))}n.d(t,{S:function(){return r}})},9451:function(e,t,n){"use strict";n.d(t,{W:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(2271);const o=(0,n(2668).op)({prod_:function(e,t=null,n=!1){let o=(0,a._1)(e,"x","prod");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const u={x:o},c={axis:t,keepDims:n};return r.BV.runKernel(s.DlI,u,c)}})},766:function(e,t,n){"use strict";n.d(t,{k:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({real_:function(e){const t={input:(0,a._1)(e,"input","real")};return r.BV.runKernel(s.xJR,t)}})},9036:function(e,t,n){"use strict";n.d(t,{M:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({reciprocal_:function(e){const t={x:(0,a._1)(e,"x","reciprocal")};return r.BV.runKernel(s.$HU,t)}})},7409:function(e,t,n){"use strict";n.d(t,{U:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({relu_:function(e){const t={x:(0,a._1)(e,"x","relu")};return r.BV.runKernel(s.qkr,t)}})},3582:function(e,t,n){"use strict";n.d(t,{b:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({relu6_:function(e){const t={x:(0,a._1)(e,"x","relu6")};return r.BV.runKernel(s.SbG,t)}})},4968:function(e,t,n){"use strict";n.d(t,{X:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({reshape_:function(e,t){const n={x:(0,a._1)(e,"x","reshape","string_or_numeric")},i={shape:t};return r.BV.runKernel(s.HZH,n,i)}})},7486:function(e,t,n){"use strict";n.d(t,{G:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({reverse_:function(e,t){const n={x:(0,a._1)(e,"x","reverse")},i={dims:t};return r.BV.runKernel(s.mKl,n,i)}})},7809:function(e,t,n){"use strict";n.d(t,{N:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({round_:function(e){const t={x:(0,a._1)(e,"x","round")};return r.BV.runKernel(s.e07,t)}})},2634:function(e,t,n){"use strict";n.d(t,{b:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({rsqrt_:function(e){const t={x:(0,a._1)(e,"x","rsqrt","float32")};return r.BV.runKernel(s.bV0,t)}})},9494:function(e,t,n){"use strict";n.d(t,{i:function(){return a}});var r=n(9122),s=n(7852);function a(e,t){if(((0,r.isTypedArray)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,r.isTypedArray)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,s.H)(e,[],[],t)}},3028:function(e,t,n){"use strict";n.r(t),n.d(t,{calculateShapes:function(){return i},validateInput:function(){return a},validateUpdateShape:function(){return s}});var r=n(569);function s(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let i=0;i<s;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-s;++i)if(n.shape[i+s]!==e[i+r])throw new Error(a+` updates.shape[${i+s}] (${n.shape[i+s]}) != shape[${i+s}] (${e[i+s]})`)}function a(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}s(n,t,e)}function i(e,t,n){const s=t.shape.length,a=s>1?t.shape[s-1]:1,i=n.length;let o=1;for(let r=a;r<i;++r)o*=n[r];const u=a<1?1:a;return{sliceRank:a,numUpdates:(0,r.NA)(t.shape)/u,sliceSize:o,strides:[...(0,r.e3)(n.slice(0,a)),1],outputSize:(0,r.NA)(n)}}},5503:function(e,t,n){"use strict";n.d(t,{U:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({selu_:function(e){const t={x:(0,a._1)(e,"x","selu")};return r.BV.runKernel(s.oFR,t)}})},3179:function(e,t,n){"use strict";n.d(t,{$:function(){return s},y:function(){return r}});const r=1.7580993408473768,s=1.0507009873554805},8678:function(e,t,n){"use strict";n.d(t,{U:function(){return c}});var r=n(3740),s=n(569),a=n(4794),i=n(4718),o=n(2668),u=n(4968);const c=(0,o.op)({separableConv2d_:function(e,t,n,o,c,l=[1,1],d="NHWC"){const p=(0,r._1)(e,"x","separableConv2d"),h=(0,r._1)(t,"depthwiseFilter","separableConv2d"),f=(0,r._1)(n,"pointwiseFilter","separableConv2d");let m=p,g=!1;if(3===p.rank&&(g=!0,m=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),"NCHW"===d)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");s.hu(4===m.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`)),s.hu(4===h.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${h.rank}.`)),s.hu(4===f.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${h.rank}.`)),s.hu(1===f.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`)),s.hu(1===f.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`));const y=h.shape[2],b=h.shape[3];s.hu(f.shape[2]===y*b,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${y*b}, but got ${f.shape[2]}.`));const x=(0,i.B)(m,h,o,c,d,l),v=(0,a.T)(x,f,1,"valid",d);return g?(0,u.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},625:function(e,t,n){"use strict";n.d(t,{X:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({sigmoid_:function(e){const t={x:(0,a._1)(e,"x","sigmoid","float32")};return r.BV.runKernel(s.a5O,t)}})},4434:function(e,t,n){"use strict";n.d(t,{X:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({sign_:function(e){const t={x:(0,a._1)(e,"x","sign")};return r.BV.runKernel(s.i5y,t)}})},9331:function(e,t,n){"use strict";n.d(t,{O:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({sin_:function(e){const t={x:(0,a._1)(e,"x","sin","float32")};return r.BV.runKernel(s.RQH,t)}})},3254:function(e,t,n){"use strict";n.d(t,{R:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({sinh_:function(e){const t={x:(0,a._1)(e,"x","sinh")};return r.BV.runKernel(s.wYB,t)}})},2676:function(e,t,n){"use strict";n.d(t,{t:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({slice_:function(e,t,n){const i=(0,a._1)(e,"x","slice","string_or_numeric");if(0===i.rank)throw new Error("Slicing scalar is not possible");const o={x:i},u={begin:t,size:n};return r.BV.runKernel(s.p2w,o,u)}})},7650:function(e,t,n){"use strict";n.r(t),n.d(t,{assertParamsValid:function(){return i},computeFlatOffset:function(){return x},computeOutShape:function(){return u},getNormalizedAxes:function(){return p},isSliceContinous:function(){return b},maskToAxes:function(){return o},parseSliceParams:function(){return v},sliceInfo:function(){return w},startForAxis:function(){return g},startIndicesWithElidedDims:function(){return h},stopForAxis:function(){return y},stopIndicesWithElidedDims:function(){return f},stridesForAxis:function(){return m},stridesWithElidedDims:function(){return c}});var r=n(569);const s=-2,a=-1;function i(e,t,n){const s=e.shape.length;r.hu(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),r.hu(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let a=0;a<s;++a)r.hu(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function o(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function u(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function c(e,t,n,r){const s=[...e];for(let a=s.length;a<r.length;a++)s.push(1);for(let a=0;a<n;a++)0===a?s[t]=1:(s.splice(t,0,1),s.pop());return s}function l(e,t,n){return n<=e?n:n-(t-1)}function d(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function p(e,t,n,r,s,a,i,o,u){const l=e.length;let d=new Array(l),p=new Array(l),b=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;d=h(i,u,l,r,e),p=f(o,u,l,s,e),b=c(a,u,l,e)}else for(let c=0;c<l;c++)d[c]=g(i,r,a,e,c,u),p[c]=y(o,s,a,e,c,u),b[c]=m(a,c,u);return{begin:d,end:p,strides:b}}function h(e,t,n,r,s){const a=[...s],i=d(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const s=l(t,n,o);let i=r[s];e&1<<s&&(i=0),a[o]=i}return a}function f(e,t,n,s,a){const i=[...a],o=d(n,t);for(let r=0;r<i.length;r++)if(o.indexOf(r)>-1)i[r]=Number.MAX_SAFE_INTEGER;else{const a=l(t,n,r);let o=s[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[r]=o}for(let u=0;u<i.length;u++){const e=a[u];i[u]<0&&(i[u]+=e),i[u]=r.uZ(0,i[u],a[u])}return i}function m(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function g(e,t,n,s,a,i){let o=t[a];const u=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const c=s[a];return o<0&&(o+=c),o=r.uZ(0,o,c-1),o}function y(e,t,n,s,a,i){let o=t[a];const u=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const c=s[a];return o<0&&(o+=c),o=u>0?r.uZ(0,o,c):r.uZ(-1,o,c-1),o}function b(e,t,n){let r=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){r=s;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function x(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function v(e,t,n){let s;const a=e.shape.length;let i;return s="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),s.forEach((e=>{r.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),i=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,i=i.map(((t,n)=>t>=0?t:(r.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,i]}function w(e,t,n,r,i,o,u,c,l){let d;if(null==r?(d=new Array(t.length),d.fill(1)):d=r,null!=u&&0!=(u&u-1))throw new Error("Multiple ellipses in slice is not allowed.");let p=!1;const h={dims:d.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:d.slice(),beginMask:i,endMask:o,ellipsisMask:u,newAxisMask:c,shrinkAxisMask:l};for(let s=0;s<h.dims;s++)p&&0!=(1<<s&c)&&h.numAddAxisAfterEllipsis++,1<<s&u&&(p=!0);p||(h.ellipsisMask|=1<<h.dims,h.dims++);const f={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(s),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(a),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(h,f);let m=!0,g=!0,y=!0;const b=[],x=[];for(let s=0;s<e.length;++s){if(0===f.strides[s])throw Error(`strides[${s}] must be non-zero`);const t=!!(f.shrinkAxisMask&1<<s),n=e[s];if(-1===n){b.push(t?1:-1);continue}const r=[f.beginMask&1<<s,f.endMask&1<<s],a=[f.strides[s]>0?0:-1,f.strides[s]>0?n:n-1];if(t&&f.strides[s]<=0)throw Error("only stride 1 allowed on non-range indexing.");y=y&&1===f.strides[s];const i=!!(f.beginMask&1<<s&&f.endMask&1<<s);if(f.beginValid&&f.endValid){if(t){const e=f.begin[s]<0?n+f.begin[s]:f.begin[s];if(f.begin[s]=e,f.end[s]=f.begin[s]+1,e<0||e>=n)throw Error(`slice index ${f.begin[s]} of dimension ${s} out of bounds.`)}else f.begin[s]=k(f.begin[s],0,f.strides[s],n,r,a),f.end[s]=k(f.end[s],1,f.strides[s],n,r,a);const e=1===f.strides[s]&&0===f.begin[s]&&f.end[s]===n;m=m&&e,g=g&&(0===s&&1===f.strides[s]||e)}else m=m&&1===f.strides[s]&&i,g=g&&(0===s&&1===f.strides[s]||i);let o,u=!1;if(f.beginValid&&f.endValid?(o=f.end[s]-f.begin[s],u=!0):t?(o=1,u=!0):i&&n>=0&&(o=f.strides[s]<0?-n:n,u=!0),u){let e;e=0===o||o<0!=f.strides[s]<0?0:Math.trunc(o/f.strides[s])+(o%f.strides[s]!=0?1:0),b.push(e)}else b.push(-1)}for(let a=0;a<f.finalShapeGatherIndices.length;++a){const e=f.finalShapeGatherIndices[a];e>=0?x.push(b[e]):e===s&&x.push(1)}return{finalShapeSparse:x.filter(((e,t)=>f.finalShapeGatherIndices[t]!==s)),finalShape:x,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:f.begin,end:f.end,strides:f.strides}}function k(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}},682:function(e,t,n){"use strict";n.d(t,{X:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({softmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const i={logits:n},o={dim:t};return r.BV.runKernel(s.Gcp,i,o)}})},3694:function(e,t,n){"use strict";n.d(t,{W:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({softplus_:function(e){const t={x:(0,a._1)(e,"x","softplus")};return r.BV.runKernel(s.MRv,t)}})},7918:function(e,t,n){"use strict";n.d(t,{f:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({spaceToBatchND_:function(e,t,n){const o=(0,a._1)(e,"x","spaceToBatchND");i.hu(o.rank>=1+t.length,(()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`)),i.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i.hu(o.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const u={x:o},c={blockShape:t,paddings:n};return r.BV.runKernel(s.TQc,u,c)}})},7020:function(e,t,n){"use strict";n.d(t,{k:function(){return i}});var r=n(7097),s=n(9121),a=n(569);const i=(0,n(2668).op)({fft_:function(e){(0,a.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(s.vwp,t)}})},8447:function(e,t,n){"use strict";n.d(t,{S:function(){return i}});var r=n(7097),s=n(9121),a=n(569);const i=(0,n(2668).op)({ifft_:function(e){(0,a.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(s.Qg5,t)}})},4415:function(e,t,n){"use strict";n.d(t,{w:function(){return f}});var r=n(1661),s=n(6884),a=n(4386),i=n(4841),o=n(2668),u=n(766),c=n(4968),l=n(7486),d=n(9494),p=n(2676),h=n(8447);const f=(0,o.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let o;if(t<=2){const r=(0,c.X)(e,[n,t]);o=(0,h.S)(r)}else{const f=[n,2*(t-1)],m=(0,c.X)((0,u.k)(e),[n,t]),g=(0,c.X)((0,a.a)(e),[n,t]),y=(0,l.G)((0,p.t)(m,[0,1],[n,t-2]),1),b=(0,i.d)((0,l.G)((0,p.t)(g,[0,1],[n,t-2]),1),(0,d.i)(-1)),x=(0,s.z)([m,y],1),v=(0,s.z)([g,b],1),w=(0,c.X)((0,r.P)(x,v),[f[0],f[1]]);o=(0,h.S)(w)}if(o=(0,u.k)(o),3===e.rank&&0!==e.shape[0]){const t=o,n=e.shape[0];o=(0,c.X)(o,[n,o.shape[0]/n,o.shape[1]]),t.dispose()}return o}})},3710:function(e,t,n){"use strict";n.d(t,{Q:function(){return m}});var r=n(569),s=n(1661),a=n(6884),i=n(4386),o=n(2668),u=n(766),c=n(4968),l=n(2676),d=n(8644),p=n(723),h=n(6577),f=n(7020);const m=(0,o.op)({rfft_:function(e,t){(0,r.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const o=e.size/n;let m;if(null!=t&&t<n){const r=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,m=(0,l.t)(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,m=(0,a.z)([e,(0,p.l)(r)],e.shape.length-1),n=t}else m=e;const g=(0,h.P)(m),y=(0,c.X)((0,s.P)(m,g),[o,n]),b=(0,f.k)(y),x=Math.floor(n/2)+1,v=(0,u.k)(b),w=(0,i.a)(b),k=(0,d.V)(v,[x,n-x],v.shape.length-1),N=(0,d.V)(w,[x,n-x],w.shape.length-1),S=m.shape.slice();return S[m.shape.length-1]=x,(0,c.X)((0,s.P)(k[0],N[0]),S)}})},8644:function(e,t,n){"use strict";n.d(t,{V:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({split_:function(e,t,n=0){const i={x:(0,a._1)(e,"x","split")},o={numOrSizeSplits:t,axis:n};return r.BV.runKernel(s.L8s,i,o)}})},3261:function(e,t,n){"use strict";n.d(t,{_:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({sqrt_:function(e){const t={x:(0,a._1)(e,"x","sqrt","float32")};return r.BV.runKernel(s.FKq,t)}})},248:function(e,t,n){"use strict";n.d(t,{h:function(){return a}});var r=n(7097),s=n(3740);const a=(0,n(2668).op)({square_:function(e){const t=(0,s._1)(e,"x","square");return r.BV.runKernel("Square",{x:t},{})}})},5265:function(e,t,n){"use strict";n.d(t,{$:function(){return u}});var r=n(7097),s=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({squaredDifference_:function(e,t){let n=(0,i._1)(e,"a","squaredDifference"),u=(0,i._1)(t,"b","squaredDifference");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.BV.runKernel(s._tC,c,{})}})},9590:function(e,t,n){"use strict";n.d(t,{L:function(){return o}});var r=n(3740),s=n(569),a=n(2668),i=n(4968);const o=(0,a.op)({squeeze_:function(e,t){const n=(0,r._1)(e,"x","squeeze","string_or_numeric");return(0,i.X)(n,(0,s.bp)(n.shape,t).newShape)}})},2991:function(e,t,n){"use strict";n.d(t,{k:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({stack_:function(e,t=0){const n=(0,a.sI)(e,"tensors","stack","string_or_numeric");i.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const o=n,u={axis:t};return r.BV.runKernel(s.QiL,o,u)}})},1901:function(e,t,n){"use strict";n.d(t,{N:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({step_:function(e,t=0){const n={x:(0,a._1)(e,"x","step")},i={alpha:t};return r.BV.runKernel(s.h8e,n,i)}})},5158:function(e,t,n){"use strict";n.d(t,{N:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({stridedSlice_:function(e,t,n,i,o=0,u=0,c=0,l=0,d=0){const p={x:(0,a._1)(e,"x","stridedSlice","string_or_numeric")},h={begin:t,end:n,strides:i,beginMask:o,endMask:u,ellipsisMask:c,newAxisMask:l,shrinkAxisMask:d};return r.BV.runKernel(s.jQk,p,h)}})},827:function(e,t,n){"use strict";n.d(t,{l:function(){return o}});var r=n(7097),s=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({sub_:function(e,t){let n=(0,i._1)(e,"a","sub"),o=(0,i._1)(t,"b","sub");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return r.BV.runKernel(s.Tr8,u)}})},5475:function(e,t,n){"use strict";n.d(t,{S:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(2271);const o=(0,n(2668).op)({sum_:function(e,t=null,n=!1){let o=(0,a._1)(e,"x","sum");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const u={x:o},c={axis:t,keepDims:n};return r.BV.runKernel(s.GBy,u,c)}})},1173:function(e,t,n){"use strict";n.d(t,{O:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({tan_:function(e){const t={x:(0,a._1)(e,"x","tan","float32")};return r.BV.runKernel(s.sEM,t)}})},1869:function(e,t,n){"use strict";n.d(t,{A:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({tanh_:function(e){const t={x:(0,a._1)(e,"x","tanh","float32")};return r.BV.runKernel(s.MIZ,t)}})},701:function(e,t,n){"use strict";n.d(t,{X:function(){return a}});var r=n(3740),s=n(7852);function a(e,t,n){const a=(0,r.C)(e,n);return(0,s.H)(e,t,a,n)}},9906:function(e,t,n){"use strict";n.d(t,{w:function(){return i}});var r=n(3740),s=n(569),a=n(7852);function i(e,t,n){if((0,s.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const i=(0,r.C)(e,n);if(3!==i.length&&1!==i.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===i.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,a.H)(e,t,i,n)}},7852:function(e,t,n){"use strict";n.d(t,{H:function(){return o}});var r=n(7097),s=n(1221),a=n(569),i=n(9122);function o(e,t,n,o){if(null==o)o=(0,a.D2)(e);else if("complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if((0,s.$F)(e)||(0,s.Oq)(e)){if("float32"!==o&&"int32"!==o)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);return r.BV.backend.createTensorFromGPUData(e,t||n,o)}if(!(0,i.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),r=(0,a.NA)(n);(0,a.hu)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==(0,a.NA)(t.slice(s));(0,a.hu)(n[s]===t[s]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,i.isTypedArray)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,i.toTypedArray)(e,o):(0,i.flatten)(e,[],!0),r.BV.makeTensor(e,t,o)}},7501:function(e,t,n){"use strict";n.d(t,{G:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({tile_:function(e,t){const n=(0,a._1)(e,"x","tile","string_or_numeric");i.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const o={x:n},u={reps:t};return r.BV.runKernel(s.n9L,o,u)}})},3243:function(e,t,n){"use strict";n.d(t,{h:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({topk_:function(e,t=1,n=!0){const i=(0,a._1)(e,"x","topk");if(0===i.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=i.shape[i.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);const u={x:i},c={k:t,sorted:n},[l,d]=r.BV.runKernel(s.cWu,u,c);return{values:l,indices:d}}})},9065:function(e,t,n){"use strict";n.d(t,{p:function(){return h}});var r=n(7097),s=n(4368),a=n(9121),i=n(3740),o=n(569),u=n(1661),c=n(4386),l=n(7370),d=n(2668),p=n(766);const h=(0,d.op)({transpose_:function(e,t,n){const d=(0,i._1)(e,"x","transpose");if(null==t&&(t=d.shape.map(((e,t)=>t)).reverse()),o.hu(d.rank===t.length,(()=>`Error in transpose: rank of input ${d.rank} must match length of perm ${t}.`)),t.forEach((e=>{o.hu(e>=0&&e<d.rank,(()=>"All entries in 'perm' must be between 0 and "+(d.rank-1)+` but got ${t}`))})),d.rank<=1)return d.clone();const h={x:d},f={perm:t};return"complex64"===d.dtype?(0,s.lu)((()=>{let e=(0,p.k)(d),t=(0,c.a)(d);return e=r.BV.runKernel(a.G3Y,{x:e},f),t=r.BV.runKernel(a.G3Y,{x:t},f),n&&(t=(0,l.W)(t)),(0,u.P)(e,t)})):r.BV.runKernel(a.G3Y,h,f)}})},9608:function(e,t,n){"use strict";n.d(t,{T:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({unique_:function(e,t=0){const n=(0,a._1)(e,"x","unique","string_or_numeric");(0,i.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const o={x:n},u={axis:t},[c,l]=r.BV.runKernel(s.kpP,o,u);return{values:c,indices:l}}})},8749:function(e,t,n){"use strict";n.d(t,{p:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({unsortedSegmentSum_:function(e,t,n){const o=(0,a._1)(e,"x","unsortedSegmentSum"),u=(0,a._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,i.hu)((0,i.GN)(n),(()=>"numSegments must be of dtype int"));const c={x:o,segmentIds:u},l={numSegments:n};return r.BV.runKernel(s.Qvg,c,l)}})},4136:function(e,t,n){"use strict";n.d(t,{H:function(){return o}});var r=n(7097),s=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({unstack_:function(e,t=0){const n=(0,a._1)(e,"x","unstack","string_or_numeric");i.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const o={value:n},u={axis:t};return r.BV.runKernel(s.ToN,o,u)}})},5912:function(e,t,n){"use strict";n.d(t,{a:function(){return u}});var r=n(7097),s=n(9121),a=n(3740),i=n(8247),o=n(2200);const u=(0,n(2668).op)({where_:function(e,t,n){const u=(0,a._1)(t,"a","where"),c=(0,a._1)(n,"b","where"),l=(0,a._1)(e,"condition","where","bool"),d=(0,o.assertAndGetBroadcastShape)((0,o.assertAndGetBroadcastShape)(l.shape,u.shape),c.shape),p={condition:(0,i.U)(l,d),t:(0,i.U)(u,d),e:(0,i.U)(c,d)};return r.BV.runKernel(s.PhF,p)}})},723:function(e,t,n){"use strict";n.d(t,{l:function(){return i}});var r=n(7097),s=n(569),a=n(1661);function i(e,t="float32"){if((0,s.Mu)(e),"complex64"===t){const t=i(e,"float32"),n=i(e,"float32");return(0,a.P)(t,n)}const n=(0,s.wT)((0,s.NA)(e),t);return r.BV.makeTensor(n,e,t)}},6577:function(e,t,n){"use strict";n.d(t,{P:function(){return i}});var r=n(7097),s=n(9121),a=n(3740);const i=(0,n(2668).op)({zerosLike_:function(e){const t={x:(0,a._1)(e,"x","zerosLike")};return r.BV.runKernel(s.RuY,t)}})},9742:function(e,t,n){"use strict";function r(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}n.d(t,{j:function(){return r}})},4077:function(e,t,n){"use strict";n.d(t,{es:function(){return w},YD:function(){return f},_w:function(){return N},t3:function(){return k},FZ:function(){return v},Vp:function(){return x},Vi:function(){return b}});var r=n(5938),s=n(569);const a=20,i=3,o=7;function u(e,t,n,r){const a=(0,s.e3)(t),i=function(e,t,n,r){const a=(0,s.NA)(t),i=r[r.length-1],o=new Array(i).fill(0),u=t.length,l="complex64"===n?p(e):e;if(u>1)for(let s=0;s<a/i;s++){const e=s*i;for(let t=0;t<i;t++)o[t]=Math.max(o[t],c(l[e+t],0,n).length)}return o}(e,t,n,a),o=t.length,u=d(e,t,n,a,i),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(u.map((e=>"    "+e)).join("\n")),l.join("\n")}function c(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(o))} + ${parseFloat(e[1].toFixed(o))}j`:(0,s.HD)(e)?`'${e}'`:"bool"===n?l(e):parseFloat(e.toFixed(o)).toString(),(0,s.oj)(r,t)}function l(e){return 0===e?"false":"true"}function d(e,t,n,r,s,o=!0){const u="complex64"===n?2:1,h=t[0],f=t.length;if(0===f){if("complex64"===n){return[c(p(e)[0],0,n)]}return"bool"===n?[l(e[0])]:[e[0].toString()]}if(1===f){if(h>a){const t=i*u;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((h-i)*u,h*u));return"complex64"===n&&(r=p(r),a=p(a)),["["+r.map(((e,t)=>c(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>c(e,s[h-i+t],n))).join(", ")+"]"]}return["["+("complex64"===n?p(e):Array.from(e)).map(((e,t)=>c(e,s[t],n))).join(", ")+"]"]}const m=t.slice(1),g=r.slice(1),y=r[0]*u,b=[];if(h>a){for(let t=0;t<i;t++){const r=t*y,a=r+y;b.push(...d(e.slice(r,a),m,n,g,s,!1))}b.push("...");for(let t=h-i;t<h;t++){const r=t*y,a=r+y;b.push(...d(e.slice(r,a),m,n,g,s,t===h-1))}}else for(let a=0;a<h;a++){const t=a*y,r=t+y;b.push(...d(e.slice(t,r),m,n,g,s,a===h-1))}const x=2===f?",":"";b[0]="["+(h>0?b[0]+x:"");for(let a=1;a<b.length-1;a++)b[a]=" "+b[a]+x;let v=",\n";for(let a=2;a<f;a++)v+="\n";return b[b.length-1]=" "+b[b.length-1]+"]"+(o?"":v),b}function p(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var h=n(9122);class f{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=s.NA(e),null!=n){const e=n.length;s.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||s.rQ(t,this.size),this.strides=(0,s.e3)(e)}set(e,...t){0===t.length&&(t=[0]),s.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const r of e){if(r<0||r>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let r=0;r<e.length-1;++r)n+=this.strides[r]*e[r];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return m().makeTensor(this.values,this.shape,this.dtype)}}let m=null,g=null,y=null;function b(e){m=e}function x(e){g=e}function v(e){y=e}class w{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=s.NA(e),this.strides=(0,s.e3)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return g.buffer(this.shape,this.dtype,e)}bufferSync(){return g.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,s.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,s.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=m().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map((e=>h.decodeString(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),m().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=m().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>h.decodeString(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await m().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),m().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return g.print(this,e)}clone(){return this.throwIfDisposed(),g.clone(this)}toString(e=!1){return u(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),g.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),m().makeVariable(this,e,t,n)}}function k(){return(0,r.R)("Tensor",(()=>w))}Object.defineProperty(w,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),k();class N extends w{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!s.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);m().disposeTensor(this),this.dataId=e.dataId,m().incRef(this,null)}dispose(){m().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(N,Symbol.hasInstance,{value:e=>e instanceof w&&null!=e.assign&&e.assign instanceof Function})},747:function(e,t,n){"use strict";n.r(t),n.d(t,{assertTypesMatch:function(){return o},getTensorsInContainer:function(){return c},isTensorInList:function(){return u},makeTypesMatch:function(){return i}});var r=n(4077),s=n(1221),a=n(569);function i(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,s.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function o(e,t){(0,a.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function u(e,t){return t.some((t=>t.id===e.id))}function c(e){const t=[];return l(e,t,new Set),t}function l(e,t,n){if(null==e)return;if(e instanceof r.es)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const r in a){const e=a[r];n.has(e)||(n.add(e),l(e,t,n))}}},3740:function(e,t,n){"use strict";n.d(t,{C:function(){return c},_1:function(){return p},sI:function(){return h}});var r=n(7097),s=n(2885),a=n(4077),i=n(1221),o=n(9122),u=n(569);function c(e,t){let n=e;if((0,o.isTypedArray)(e))return"string"===t?[]:[e.length];if((0,i.Oq)(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if((0,i.$F)(e))return[e.buffer.size/(null==t?4:(0,u.bT)(t))];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||(0,o.isTypedArray)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&(0,s.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&l(e,r,[]),r}function l(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.isTypedArray)(e))return void(0,u.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,u.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,u.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let s=0;s<e.length;++s)l(e[s],r,n.concat(s))}function d(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function p(e,t,n,s="numeric"){if(e instanceof(0,a.t3)())return d(s,e.dtype,t,n),e;let i=(0,u.D2)(e);if("string"!==i&&["bool","int32","float32"].indexOf(s)>=0&&(i=s),d(s,i,t,n),null==e||!(0,o.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const l=c(e,i);(0,o.isTypedArray)(e)||Array.isArray(e)||(e=[e]);const p="string"!==i?(0,o.toTypedArray)(e,i):(0,o.flatten)(e,[],!0);return r.BV.makeTensor(p,l,i)}function h(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>p(e,`${t}[${s}]`,n,r)))}},1221:function(e,t,n){"use strict";var r,s,a,i,o;n.d(t,{$F:function(){return p},Oq:function(){return d},x8:function(){return c},yw:function(){return r},z4:function(){return l}}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(i||(i={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(o||(o={}));const u={float32:i,int32:s,bool:a,complex64:o};function c(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function l(e){return c(e,"int32")}function d(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function p(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}},9122:function(e,t,n){"use strict";n.r(t),n.d(t,{arraysEqual:function(){return a.cO},arraysEqualWithNull:function(){return a.DK},assert:function(){return a.hu},assertNonNegativeIntegerDimensions:function(){return a.Mu},assertNonNull:function(){return a.Cq},assertShapesMatch:function(){return a.k5},bytesFromStringArray:function(){return a.Ub},bytesPerElement:function(){return a.bT},checkConversionForErrors:function(){return a.D5},clamp:function(){return a.uZ},computeStrides:function(){return a.e3},convertBackendValuesAndArrayBuffer:function(){return a.KS},createScalarValue:function(){return v},createShuffledIndices:function(){return a.U$},decodeString:function(){return I},distSquared:function(){return a.E7},encodeString:function(){return S},fetch:function(){return N},fingerPrint64:function(){return x},flatten:function(){return C},getArrayFromDType:function(){return a.rQ},getTypedArrayFromDType:function(){return a.WP},hasEncodingLoss:function(){return a.QB},hexToLong:function(){return u},indexToLoc:function(){return a.NE},inferDtype:function(){return a.D2},inferFromImplicitShape:function(){return a.JZ},isBoolean:function(){return a.jn},isFunction:function(){return a.mf},isInt:function(){return a.GN},isNumber:function(){return a.hj},isPromise:function(){return a.tI},isScalarShape:function(){return a.xH},isString:function(){return a.HD},isTypedArray:function(){return T},isValidDtype:function(){return a.LP},locToIndex:function(){return a.qy},makeOnesTypedArray:function(){return a.p8},makeZerosNestedTypedArray:function(){return a.l6},makeZerosTypedArray:function(){return a.wT},nearestDivisor:function(){return a.jP},nearestLargerEven:function(){return a.nY},now:function(){return k},parseAxisParam:function(){return a.EC},randUniform:function(){return a.bj},repeatedTry:function(){return a.WD},rightPad:function(){return a.oj},shuffle:function(){return a.TV},shuffleCombo:function(){return a.d7},sizeFromShape:function(){return a.NA},sizeToSquarishShape:function(){return a.YP},squeezeShape:function(){return a.bp},sum:function(){return a.Sm},swap:function(){return a.LF},tanh:function(){return a.AE},toNestedArray:function(){return a.GX},toTypedArray:function(){return w}});var r=n(2885),s=n(9742),a=n(569),i=n(3720);const o=n.n(i)()||i;function u(e){return o.fromString(e,!0,16)}const c=u("c3a5c85c97cb3127"),l=u("b492b66fbe98f273"),d=u("9ae16a3b2f90404f");function p(e){return e.xor(e.shru(47))}function h(e,t,n){const r=e.slice(t,t+n);return o.fromBytes(Array.from(r),!0,!0)}function f(e,t){return h(e,t,8)}function m(e,t){return h(e,t,4)}function g(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function y(e,t,n=u("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function b(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=g(a.add(s).add(r),21);const i=s;return s=(s=s.add(t)).add(n),a=a.add(g(s,44)),[s.add(r),a.add(i)]}(f(e,t),f(e,t+8),f(e,t+16),f(e,t+24),n,r)}function x(e,t=e.length){const n=o.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=d.add(2*t),r=f(e,0).add(d),s=f(e,t-8);return y(g(s,37).mul(n).add(r),g(r,25).add(s).mul(n),n)}if(t>=4){const n=d.add(2*t);return y(m(e,0).shl(3).add(t),m(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return p(d.mul(n).xor(c.mul(r))).mul(d)}return d}(e,t):function(e,t=e.length){const n=d.add(2*t),r=f(e,0).mul(l),s=f(e,8),a=f(e,t-8).mul(n),i=f(e,t-16).mul(d);return y(g(r.add(s),43).add(g(a,30)).add(i),r.add(g(s.add(d),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=d.add(2*t),r=f(e,0).mul(d),s=f(e,8),a=f(e,t-8).mul(n),i=f(e,t-16).mul(d),o=g(r.add(s),43).add(g(a,30)).add(i),u=y(o,r.add(g(s.add(d),18)).add(a),n),c=f(e,16).mul(n),l=f(e,24),p=o.add(f(e,t-32)).mul(n),h=u.add(f(e,t-24)).mul(n);return y(g(c.add(l),43).add(g(p,30)).add(h),c.add(g(l.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(l).add(113),a=p(s.mul(d).add(113)).mul(d),i=[o.UZERO,o.UZERO],u=[o.UZERO,o.UZERO];r=r.mul(d).add(f(e,0));let h=0;const x=64*(t-1>>6),v=x+(t-1&63)-63;do{r=g(r.add(s).add(i[0]).add(f(e,h+8)),37).mul(l),s=g(s.add(i[1]).add(f(e,h+48)),42).mul(l),r=r.xor(u[1]),s=s.add(i[0]).add(f(e,h+40)),a=g(a.add(u[0]),33).mul(l),i=b(e,h,i[1].mul(l),r.add(u[0])),u=b(e,h+32,a.add(u[1]),s.add(f(e,h+16))),[a,r]=[r,a],h+=64}while(h!==x);const w=l.add(a.and(255).shl(1));return h=v,u[0]=u[0].add(t-1&63),i[0]=i[0].add(u[0]),u[0]=u[0].add(i[0]),r=g(r.add(s).add(i[0]).add(f(e,h+8)),37).mul(w),s=g(s.add(i[1]).add(f(e,h+48)),42).mul(w),r=r.xor(u[1].mul(9)),s=s.add(i[0].mul(9).add(f(e,h+40))),a=g(a.add(u[0]),33).mul(w),i=b(e,h,i[1].mul(w),r.add(u[0])),u=b(e,h+32,a.add(u[1]),s.add(f(e,h+16))),[a,r]=[r,a],y(y(i[0],u[0],w).add(p(s).mul(c)).add(a),y(i[1],u[1],w).add(r),w)}function v(e,t){return"string"===t?S(e):w([e],t)}function w(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=C(e)),(0,r.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function k(){return(0,r.OB)().platform.now()}function N(e,t){return(0,r.OB)().platform.fetch(e,t)}function S(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.encode(e,t)}function I(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.decode(e,t)}function T(e){return null!=(0,r.OB)().platform.isTypedArray?(0,r.OB)().platform.isTypedArray(e):(0,s.j)(e)}function C(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||a.tI(e)||null==e||T(e)&&n)t.push(e);else if(Array.isArray(e)||T(e))for(let r=0;r<e.length;++r)C(e[r],t,n);else{let r=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(r=Math.max(r,Number(t)));for(let s=0;s<=r;s++)C(e[s],t,n)}return t}},569:function(e,t,n){"use strict";function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,o(e,t,n)}function s(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,o(e,n,r),o(t,n,r)}function a(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function u(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function c(e,t){const n=Math.random();return t*n+(1-n)*e}function l(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function d(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function p(e,t,n=""){d(y(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function h(e){d(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function f(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function m(e){return 0===e.length}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function y(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function b(e){return e%1==0}function x(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function v(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function w(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function N(e,t=(e=>0),n,r){return new Promise(((s,a)=>{let i=0;const o=()=>{if(e())return void s();i++;const u=t(i);null!=n&&i>=n?a():null!=r?r(o,u):setTimeout(o,u)};o()}))}function S(e,t){let n=1,r=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function I(e,t){const n=t.length;return d((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),d(e.every((e=>b(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function T(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:I(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),r.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),r.push(o))}return{newShape:n,keptDims:r}}function C(e,t){return E(e,t)}function E(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function A(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function $(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function _(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function R(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function F(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function D(e){return"string"==typeof e||e instanceof String}function O(e){return"boolean"==typeof e}function M(e){return"number"==typeof e}function z(e){return Array.isArray(e)?z(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":M(e)?"float32":D(e)?"string":O(e)?"bool":"float32"}function B(e){return!!(e&&e.constructor&&e.call&&e.apply)}function L(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function P(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function V(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=V(e+t*o,i,n,r)}return s}function W(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return V(0,e,t,n)}function U(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function G(e,t){const n=H(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function j(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return W(e,new Float32Array(n));if("int32"===t)return W(e,new Int32Array(n));if("bool"===t)return W(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function q(e){e.forEach((t=>{d(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function X(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=n[s]*e[s];return r}function K(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(e/n[s]),e-=r[s]*n[s];return r[r.length-1]=e,r}function Q(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{AE:function(){return x},Cq:function(){return h},D2:function(){return z},D5:function(){return A},DK:function(){return g},E7:function(){return l},EC:function(){return I},GN:function(){return b},GX:function(){return W},HD:function(){return D},JZ:function(){return S},KS:function(){return U},LF:function(){return o},LP:function(){return $},Mu:function(){return q},NA:function(){return f},NE:function(){return K},QB:function(){return _},Sm:function(){return u},TV:function(){return r},U$:function(){return w},Ub:function(){return F},WD:function(){return N},WP:function(){return C},YP:function(){return v},bT:function(){return R},bj:function(){return c},bp:function(){return T},cO:function(){return y},d7:function(){return s},e3:function(){return P},hj:function(){return M},hu:function(){return d},jP:function(){return L},jn:function(){return O},k5:function(){return p},l6:function(){return j},mf:function(){return B},nY:function(){return i},oj:function(){return k},p8:function(){return G},qy:function(){return X},rQ:function(){return E},tI:function(){return Q},uZ:function(){return a},wT:function(){return H},xH:function(){return m}})},8819:function(e,t,n){"use strict";n.d(t,{GD:function(){return w},Gc:function(){return y},aI:function(){return N}});var r=n(8081),s=n(9840),a=n(2931);class i extends r.serialization.Serializable{getConfig(){return{}}}class o extends i{apply(e,t=1){return s.py(e,t)}}o.className="elu",r.serialization.registerClass(o);class u extends i{apply(e){return r.selu(e)}}u.className="selu",r.serialization.registerClass(u);class c extends i{apply(e){return r.relu(e)}}c.className="relu",r.serialization.registerClass(c);class l extends i{apply(e){return(0,r.tidy)((()=>r.minimum(6,r.relu(e))))}}l.className="relu6",r.serialization.registerClass(l);class d extends i{apply(e){return e}}d.className="linear",r.serialization.registerClass(d);class p extends i{apply(e){return r.sigmoid(e)}}p.className="sigmoid",r.serialization.registerClass(p);class h extends i{apply(e){return s.HX(e)}}h.className="hardSigmoid",r.serialization.registerClass(h);class f extends i{apply(e){return r.softplus(e)}}f.className="softplus",r.serialization.registerClass(f);class m extends i{apply(e){return s.O(e)}}m.className="softsign",r.serialization.registerClass(m);class g extends i{apply(e){return r.tanh(e)}}g.className="tanh",r.serialization.registerClass(g);class y extends i{apply(e,t=-1){return r.softmax(e,t)}}y.className="softmax",r.serialization.registerClass(y);class b extends i{apply(e,t=-1){return r.logSoftmax(e,t)}}b.className="logSoftmax",r.serialization.registerClass(b);class x extends i{apply(e,t=1){return(0,r.tidy)((()=>r.mul(r.sigmoid(r.mul(e,t)),e)))}}x.className="swish",r.serialization.registerClass(x);class v extends i{apply(e){return(0,r.tidy)((()=>r.mul(e,r.tanh(r.softplus(e)))))}}function w(e){return e.getClassName()}function k(e,t={}){return(0,a.tU)(e,r.serialization.SerializationMap.getMap().classNameMap,t,"activation")}function N(e){if(null==e){const e={className:"linear",config:{}};return k(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},k(t)}return e instanceof i?e:k(e)}v.className="mish",r.serialization.registerClass(v)},2012:function(e,t,n){"use strict";n.d(t,{Ho:function(){return a},rf:function(){return i}});var r=n(8081);let s;function a(){return null==s&&(s=(0,r.backend)().epsilon()),s}function i(){return"channelsLast"}},1944:function(e,t,n){"use strict";n.d(t,{L:function(){return s},s:function(){return i}});let r=0;function s(){return r++}const a={};function i(e=""){return e in a||(a[e]=0),a[e]+=1,e+a[e].toString()}},9840:function(e,t,n){"use strict";n.d(t,{AK:function(){return v},GZ:function(){return y},Gg:function(){return b},HX:function(){return E},Iq:function(){return w},KC:function(){return A},O:function(){return T},Uz:function(){return p},a2:function(){return S},c9:function(){return h},dt:function(){return c},h6:function(){return k},mV:function(){return g},nG:function(){return x},pj:function(){return u},py:function(){return I},rv:function(){return C},rx:function(){return l},uI:function(){return m},xH:function(){return d}});var r=n(8081),s=n(8090),a=n(588),i=n(6040),o=n(2012);function u(e,t){return r.cast(e,t)}function c(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),r.reshape(e,n)}function l(e,t){return(0,r.tidy)((()=>{if(2!==e.shape.length)throw new a.nu(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return b(c(e,1),[1,t,1])}))}function d(e){const t=[i.NS(e.shape)];return r.reshape(e,t)}function p(e){if(e.rank<=1)throw new a.nu(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],i.NS(e.shape,1)];return r.reshape(e,t)}function h(e,t,n){return(0,r.tidy)((()=>{switch(e.rank){case 1:return r.slice1d(e,t,n);case 2:return r.slice2d(e,[t,0],[n,e.shape[1]]);case 3:return r.slice3d(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return r.slice4d(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return r.slice(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return r.slice(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new a.nu(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function f(e,t,n){return(0,r.tidy)((()=>{switch(e.rank){case 1:return r.slice1d(e,t,n);case 2:return r.slice2d(e,[0,t],[e.shape[0],n]);case 3:return r.slice3d(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return r.slice4d(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new a.nu(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function m(e,t,n,s){return(0,r.tidy)((()=>{switch(e.rank){case 1:return r.slice1d(e,t,n);case 2:switch(s){case 1:return h(e,t,n);case 2:return f(e,t,n);default:throw new a.nu(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return h(e,t,n);case 2:return r.slice3d(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return f(e,t,n);default:throw new a.nu(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return h(e,t,n);case 2:return r.slice4d(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return r.slice4d(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return f(e,t,n);default:throw new a.nu(`The axis is not within the rank of the tensor ${s}`)}default:throw new a.nu(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function g(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),r.concat(e,t)}function y(e,t){switch(e.rank){case 1:return r.concat1d([e,t]);case 2:return r.concat2d([e,t],0);case 3:return r.concat3d([e,t],0);case 4:return r.concat4d([e,t],0);default:throw new a.nu(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function b(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new a.nu(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return r.tile(e,t)}function x(e,t=0,n=1,s,a){return r.randomNormal(e,t,n,s,a)}function v(e,t,n,s){if(e.rank<2||t.rank<2)throw new a.nj(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new a.nj(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const a=!1,i=!1;return r.fused.matMul({a:e,b:t,transposeA:a,transposeB:i,bias:s?N(e.rank,s,(0,o.rf)()):null,activation:n})}{const a=e.shape.slice(),i=a.pop();e=r.reshape(e,[-1,i]);const u=t.shape.slice(),c=u.pop(),l=u.pop(),d=[...u,c],p=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=r.reshape(r.transpose(t,p),[l,-1]);const h=[...a,...d],f=!1,m=!1;return r.reshape(r.fused.matMul({a:e,b:t,transposeA:f,transposeB:m,bias:s?N(e.rank,s,(0,o.rf)()):null,activation:n}),h)}}function w(e,t,n){return(0,r.tidy)((()=>(t=Array.isArray(t)?(0,r.tensor1d)(t,"int32"):r.cast(t,"int32"),r.gather(e,t,n))))}function k(e){return r.mul(e,e)}function N(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new a.nu(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?r.reshape(t,[1,s[0],1,1,1]):r.reshape(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?r.reshape(t,[1,1,1,1,s[0]]):r.reshape(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?r.reshape(t,[1,s[0],1,1]):r.reshape(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?r.reshape(t,[1,1,1,s[0]]):r.reshape(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?r.reshape(t,[1,s[0],1]):r.reshape(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?r.reshape(t,[1,1,s[0]]):r.reshape(t,[1].concat(s))}else if(e<3)return t;throw new a.nu(`Unsupported input rank by biasAdd: ${t.rank}`)}function S(e,t,n){return(0,r.tidy)((()=>(null==n&&(n=(0,o.rf)()),(0,s.cj)(n),r.add(e,N(e.rank,t,n)))))}function I(e,t=1){if(1!==t)throw new a.nj(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return r.elu(e)}function T(e){return(0,r.tidy)((()=>r.div(e,r.add(r.abs(e),1))))}function C(e,t,n,s){return(0,r.tidy)((()=>r.dropout(e,t,n,s)))}function E(e){return(0,r.tidy)((()=>{const t=r.add(.5,r.mul(.2,e));return r.clipByValue(t,0,1)}))}function A(e,t,n=!1){return n?e():t()}},8891:function(e,t,n){"use strict";n.d(t,{CZ:function(){return h},ex:function(){return u},m$:function(){return m}});var r,s=n(8081),a=n(588),i=n(3146),o=n(2931);!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(r||(r={}));class u{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class c{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class l extends u{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const r in t){const e=t[r];if("number"==typeof e)this.totals.hasOwnProperty(r)||(this.totals[r]=0),this.totals[r]=this.totals[r]+e*n;else{let t;r in this.totals?t=this.totals[r]:this.totals[r]=0;const a=(0,s.tidy)((()=>(0,s.add)(this.totals[r],(0,s.mul)(e,n))));this.totals[r]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?t[n]=this.totals[n]/this.seen:(0,s.tidy)((()=>{const e=(0,s.mul)((0,s.div)(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),(0,s.keep)(t[n])})))}}class d extends u{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const r=await Promise.all(e);for(let s=0;s<r.length;++s){this.history[t[s]][n[s]].dispose(),this.history[t[s]][n[s]]=r[s][0]}}}class p extends u{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||s.nextFrame,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");s.util.isNumber(this.yieldEvery)&&(this.maybeWait=o.Ds(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await(0,i.Z)(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await(0,i.Z)(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await(0,i.Z)(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await(0,i.Z)(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await(0,i.Z)(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):s.util.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await(0,i.Z)(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await(0,i.Z)(e),await this.trainEnd(e))}}function h(e,t){if(null==e&&(e={}),e instanceof u)return[e];if(Array.isArray(e)&&e[0]instanceof u)return e;return o.zZ(e).map((e=>new p(e,t)))}class f{constructor(){}static registerCallbackConstructor(e,t){s.util.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),f.checkForDuplicate(t),null==f.constructors[e]&&(f.constructors[e]=[]),f.constructors[e].push(t)}static checkForDuplicate(e){for(const t in f.constructors){f.constructors[+t].forEach((t=>{if(t===e)throw new a.nu("Duplicate callback constructor.")}))}}static clear(){f.constructors={}}static createCallbacks(e){const t=[];for(const n in f.constructors){const r=+n;e>=r&&t.push(...f.constructors[r])}return t.map((e=>new e))}}function m(e,t,n,r,s,a,i,o,u){const p=new d,h=[new l,...f.createCallbacks(t)];null!=e&&h.push(...e),h.push(p);const m=new c(h);return m.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:m,history:p}}f.constructors={}},8090:function(e,t,n){"use strict";n.d(t,{Lp:function(){return c},MU:function(){return h},cj:function(){return i},f4:function(){return p},w8:function(){return f},wU:function(){return o},zb:function(){return u}});var r=n(4685),s=n(2931);const a=new Map;function i(e){(0,s.xn)(r.PS,"DataFormat",e)}function o(e){(0,s.xn)(r.Mz,"InterpolationFormat",e)}function u(e){(0,s.xn)(r.zx,"PaddingMode",e)}function c(e){(0,s.xn)(r.MK,"PoolMode",e)}const l=[],d="/";function p(e,t){l.push(e);try{const e=t();return l.pop(),e}catch(n){throw l.pop(),n}}function h(e){if(!g(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===l.length?"":l.join(d)+d)+e}function f(e){if(!g(e))throw new Error("Not a valid tensor name: '"+e+"'");a.has(e)||a.set(e,0);const t=a.get(e);if(a.set(e,a.get(e)+1),t>0){const n=`${e}_${t}`;return a.set(n,1),n}return e}const m=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function g(e){return!!e.match(m)}},4079:function(e,t,n){"use strict";n.d(t,{Ad:function(){return m},xF:function(){return h}});var r=n(8081),s=n(2012),a=n(2931);function i(e,t){return(0,r.tidy)((()=>r.sqrt(r.sum(r.mul(e,e),t,!0))))}class o extends r.serialization.Serializable{getConfig(){return{}}}class u extends o{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,r.tidy)((()=>{const t=i(e,this.axis),n=r.clipByValue(t,0,this.maxValue);return r.mul(e,r.div(n,r.add((0,s.Ho)(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}u.className="MaxNorm",r.serialization.registerClass(u);class c extends o{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,r.tidy)((()=>r.div(e,r.add((0,s.Ho)(),i(e,this.axis)))))}getConfig(){return{axis:this.axis}}}c.className="UnitNorm",r.serialization.registerClass(c);class l extends o{apply(e){return r.relu(e)}}l.className="NonNeg",r.serialization.registerClass(l);class d extends o{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,r.tidy)((()=>{const t=i(e,this.axis),n=r.add(r.mul(this.rate,r.clipByValue(t,this.minValue,this.maxValue)),r.mul(1-this.rate,t));return r.mul(e,r.div(n,r.add((0,s.Ho)(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}d.className="MinMaxNorm",r.serialization.registerClass(d);const p={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function h(e){return(0,a.Kj)(e)}function f(e,t={}){return(0,a.tU)(e,r.serialization.SerializationMap.getMap().classNameMap,t,"constraint")}function m(e){if(null==e)return null;if("string"==typeof e){return f({className:e in p?p[e]:e,config:{}})}return e instanceof o?e:f(e)}},69:function(e,t,n){"use strict";n.d(t,{l2:function(){return c},ht:function(){return h},kS:function(){return p}});var r=n(8081),s=n(588);class a{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}var i=n(2931),o=n(4396),u=n(163);class c{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof c)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new s.nu(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return(0,r.cast)(t,e.dtype)}catch(n){throw new s.nu(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof u.Iy){if(null==this.id2Value[e.id])throw new s.nu(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new s.nu(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof u.Iy){if(null==this.id2Value[e.id])throw new s.nu(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new s.nu(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&(0,r.dispose)(this.id2Mask)}}const l=new a,d=new a;function p(e){null!=l&&l.setMaxEntries(e),null!=d&&d.setMaxEntries(e)}function h(e,t,n,s){const a=null!=n&&n.training,u=Array.isArray(e),p=u?e:[e],h=p.map((e=>e.name)),y=[],b=t.names();for(const r of h)-1!==b.indexOf(r)?y.push(t.getValue(r)):y.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const x=h.join(",")+"|"+t.names().sort().join(",");let v,w=l.get(x);if(null==w){const e=function(e,t){r.util.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=m(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=m(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach((e=>s[t].add(e)))}}return{sorted:n,recipientCounts:f(s)}}(p,t);w=e.sorted,v=e.recipientCounts,l.put(x,w),d.put(x,v)}v={},a||Object.assign(v,d.get(x));const k=new c(t);for(let c=0;c<w.length;++c){if(null!=s){const e=(0,r.memory)().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const e=w[c],u=e.sourceLayer;if(u instanceof o.l)continue;const l=[],d=[],p=[];let f=!1;for(const n of e.inputs){const e=k.getValue(n),r=k.getMask(n);l.push(e),d.push(r),null!=r&&(f=!0),a||(v[n.name]--,0!==v[n.name]||t.hasKey(n)||-1!==h.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||p.push(e))}f&&((n=n||{}).mask=d[0]);const m=(0,i.zZ)(u.apply(l,n));let b=null;u.supportsMasking&&(b=u.computeMask(l,d));const x=g(e),N=Array.isArray(x)?x:[x];for(let t=0;t<N.length;++t){k.hasKey(N[t])||k.add(N[t],m[t],Array.isArray(b)?b[0]:b);const e=h.indexOf(N[t].name);-1!==e&&(y[e]=m[t])}a||(0,r.dispose)(p)}return k.disposeMasks(),u?y:y[0]}function f(e){const t={};for(const n in e)t[n]=e[n].size;return t}function m(e,t){const n=new Set,r=[],s={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function g(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}},4396:function(e,t,n){"use strict";n.d(t,{I:function(){return u},l:function(){return o}});var r=n(8081),s=n(1944),a=n(588),i=n(163);class o extends i.mh{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:(0,s.s)("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new a.nu("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new a.nu("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new a.nu("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new i.Iy(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new i.NB({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new a.nu(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function u(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new a.nu("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new o({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}o.className="InputLayer",r.serialization.registerClass(o)},163:function(e,t,n){"use strict";n.d(t,{Iy:function(){return h},NB:function(){return m},Zg:function(){return p},hA:function(){return b},mh:function(){return y}});var r=n(8081),s=n(1944),a=n(8090),i=n(588),o=n(5654),u=n(2931),c=n(7538),l=n(3013),d=n(1653);class p{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class h{constructor(e,t,n,r,i,o,u){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=i,this.outputTensorIndex=u,this.id=(0,s.L)(),null!=o&&(this.originalName=(0,a.MU)(o),this.name=(0,a.w8)(this.originalName)),this.rank=t.length}}let f=0;class m{constructor(e,t){this.callArgs=t,this.id=f++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let g=0;class y extends r.serialization.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=g++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=u.D1(e)+"_"+(0,s.s)(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new i.LH(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new i.nu(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return u.Bq(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return u.Bq(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new i.j1(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new i.j1(`Layer ${this.name} is not connected, no input to return.`);return u.Bq(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new i.j1(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new i.j1(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return u.Bq(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=u.zZ(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=u.zZ(this.inputSpec);if(t.length!==n.length)throw new i.nu(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let r=0;r<t.length;r++){const e=t[r],s=n[r];if(null==s)continue;const a=e.rank;if(null!=s.ndim&&a!==s.ndim)throw new i.nu(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new i.nu(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new i.nu(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&e.dtype!==s.dtype)throw new i.nu(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${e.dtype}.`);if(s.axes){const t=e.shape;for(const e in s.axes){const n=Number(e),a=s.axes[e],o=n>=0?t[n]:t[t.length+n];if(null!=a&&-1===[a,null].indexOf(o))throw new i.nu(`Input ${r} is incompatible with layer ${this.name}: expected axis ${n} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const n=s.shape[t],a=e.shape[t];if(null!=n&&null!=a&&n!==a)throw new i.nu(`Input ${r} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${e.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=u.zZ(e),r=function(e){let t=!0;for(const n of u.zZ(e))if(!(n instanceof h)){t=!1;break}return t}(e),s=function(e){let t=!0;for(const n of u.zZ(e))if(n instanceof h){t=!1;break}return t}(e);if(r===s)throw new i.nu("Arguments to apply() must be all SymbolicTensors or all Tensors");return(0,a.f4)(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of u.zZ(e))t.push(n.shape);this.build(u.Bq(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,r);const s=u.zZ(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=u.Bq(a),null!=this.activityRegularizer)throw new i.nj("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=u.zZ(e);const t=[];for(const n of e)t.push(n.shape);return u.Bq(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new h(a,n,this,u.zZ(e),t,this.name,r))):new h(a,r,this,u.zZ(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new i.nj("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new i.j1(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new i.j1(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new i.LH(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return l.t(this.weights)}build(e){this.built=!0}getWeights(e=!1){return(0,d.FQ)(e?this.trainableWeights:this.weights)}setWeights(e){(0,r.tidy)((()=>{const t=this.weights;if(t.length!==e.length)throw new i.nu(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=(0,d.FQ)(t);for(let a=0;a<s.length;++a){const o=s[a],u=t[a],c=e[a];if(!r.util.arraysEqual(o.shape,c.shape))throw new i.nu(`Layer weight shape ${o.shape} not compatible with provided weight shape ${c.shape}`);n.push([u,c])}(0,d.zb)(n)}))}addWeight(e,t,n,r,s,a,u,c){if(-1!==this._addedWeightNames.indexOf(e))throw new i.nu(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=c?c():(0,o.L5)("zeros"));const l=r.apply(t,n),p=new d.fU(l,n,e,a,u);return l.dispose(),null!=s&&this.addLoss((()=>s.apply(p.read()))),null==a&&(a=!0),a?this._trainableWeights.push(p):this._nonTrainableWeights.push(p),p}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=u.zZ(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const r=this.computeMask(e,n),s=u.zZ(t),a=u.zZ(r);if(s.length!==a.length)throw new Error(`${this.name} outputs ${s.length} tensors but ${s.length} masks for those tensors`);for(let i=0;i<s.length;i++)s[i].kerasMask=a[i]}addInboundNode(e,t,n,r,s,a,i=null){const o=u.zZ(e);t=u.zZ(t),n=u.zZ(n),r=u.zZ(r),s=c.x6(s),a=c.x6(a);const l=[],d=[],p=[];for(const u of o)l.push(u.sourceLayer),d.push(u.nodeIndex),p.push(u.tensorIndex);new m({outboundLayer:this,inboundLayers:l,nodeIndices:d,tensorIndices:p,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let u=0;u<t.length;u++)t[u].sourceLayer=this,t[u].nodeIndex=this.inboundNodes.length-1,t[u].tensorIndex=u}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function b(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=b(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}},8913:function(e,t,n){"use strict";n.d(t,{D:function(){return f},y:function(){return p}});var r=n(8081),s=n(8891),a=n(588),i=n(3146),o=n(2931),u=n(6529);const c=32;function l(e,t){let n,s;const a=t;n=a.xs,s=a.ys,r.util.assert(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const i=d("input",e.inputNames,n),o=d("output",e.outputNames,s),u=i[0].shape[0];r.util.assert(i.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),r.util.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let c=0;c<i.length;c++)r.util.assert(i[c].shape[0]===u,(()=>`Batch size mismatch: input ${e.inputNames[c]} has ${i[c].shape[0]}; expected  ${u} based on input ${e.inputNames[0]}.`));for(let c=0;c<o.length;c++)r.util.assert(o[c].shape[0]===u,(()=>`Batch size mismatch: output ${e.outputNames[c]} has ${o[c].shape[0]}; expected  ${u} based on input ${e.inputNames[0]}.`));return{xs:i,ys:o}}function d(e,t,n){if(n instanceof r.Tensor)return[n];if(Array.isArray(n))return r.util.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new a.nu(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function p(e,t,n){const d=null!=n.batchesPerEpoch;if(r.util.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),r.util.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),r.util.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),r.util.assert(!d||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),r.util.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const p=null!=n.validationData;let f,m;if(p)if(h(n.validationData))r.util.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new a.nj("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);f=e.xs,m=e.ys}const g=e.makeTrainFunction(),y=e.getDedupedMetricsNames();let b;b=p?y.slice().concat(y.map((e=>"val_"+e))):y.slice();const x=(0,s.CZ)(n.callbacks,n.yieldEvery),v=null==n.verbose?1:n.verbose,{callbackList:w,history:k}=(0,s.m$)(x,v,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,p,b);w.setModel(e),e.history=k,await w.onTrainBegin(),e.stopTraining_=!1;let N=null==n.initialEpoch?0:n.initialEpoch,S=await t.iterator();for(;N<n.epochs;){const s={};await w.onEpochBegin(N);let a=0,b=0;for(d||(S=await t.iterator());!d||a<n.batchesPerEpoch;){const t=await S.next();if(d&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${a} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:o}=l(e,t.value),c={};c.batch=b,c.size=s[0].shape[0],await w.onBatchBegin(b,c);const d=[];if(null!=n.classWeight){const t=(0,u.Vf)(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)d.push(await(0,u.tl)(o[e],null,t[e]))}const p=s.concat(o).concat(d),h=g(p);r.dispose(p);for(let e=0;e<y.length;++e){const t=y[e],n=h[e];c[t]=n,r.keep(n)}await w.onBatchEnd(b,c),(0,i.i)(c),b++,a++}if(d?a>=n.batchesPerEpoch:t.done){if(p){let t;t=h(n.validationData)?(0,o.zZ)(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):(0,o.zZ)(e.evaluate(f,m,{batchSize:null==n.validationBatchSize?c:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)s[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await w.onEpochEnd(N,s),N++,e.stopTraining_)break}return await w.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function h(e){return"function"==typeof e.iterator}async function f(e,t,n){const s=null!=(n=n||{}).batches,i=e.testFunction;let u=[];if(n.verbose>0)throw new a.nj("Verbose mode is not implemented yet.");r.util.assert(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const c="function"==typeof t.next?t:await t.iterator();let d=0,p=0;for(;!s||p<n.batches;){const t=await c.next();if(u=r.tidy((()=>{if(t.value){const{xs:n,ys:s}=l(e,t.value),a=n.concat(s),o=r.tidy((()=>i(a)));if(r.dispose(a),0===p)for(let e=0;e<o.length;++e)u.push((0,r.scalar)(0));const c=a[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=u[e];u[e]=r.tidy((()=>r.add(u[e],r.mul(c,t)))),p>0&&r.dispose(n)}r.dispose(o),d+=c,++p}return u})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let a=0;a<u.length;++a){const e=u[a];u[a]=r.div(u[a],d),r.dispose(e)}return(0,o.Bq)(u)}},6347:function(e,t,n){"use strict";n.d(t,{R_:function(){return u},YV:function(){return c},YX:function(){return o},fQ:function(){return a},kS:function(){return l},sf:function(){return i}});var r=n(8081),s=n(9840);function a(e){r.util.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function i(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>(0,s.c9)(e,t,n-t))):(0,s.c9)(e,t,n-t)}function o(e,t){return r.tidy((()=>null==e?null:Array.isArray(e)?e.map((e=>o(e,t))):(0,s.Iq)(e,"int32"===t.dtype?t:r.cast(t,"int32"))))}function u(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}function c(e){const t=[];e instanceof r.Tensor&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push((0,s.dt)(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function l(e,t){if(null==e)return;const n=[];if(t instanceof r.Tensor)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const r in t){const e=t[r];n.push(e.id)}const s=[];if(e instanceof r.Tensor)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const r in e){const t=e[r];-1===n.indexOf(t.id)&&s.push(t)}s.forEach((e=>{e.isDisposed||e.dispose()}))}},6529:function(e,t,n){"use strict";n.d(t,{Vf:function(){return a},mo:function(){return o},tl:function(){return i}});var r=n(8081);function s(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function a(e,t){return s(e,t,"classWeight")}async function i(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=(0,r.tidy)((()=>{if(1===e.shape.length)return(0,r.clone)(e);if(2===e.shape.length){if(e.shape[1]>1){const t=1;return(0,r.argMax)(e,t)}if(1===e.shape[1])return(0,r.reshape)(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());(0,r.dispose)(t);const a=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])})),(0,r.tensor1d)(a,"float32")}return null}function o(e,t){return(0,r.mul)(e,t)}},588:function(e,t,n){"use strict";n.d(t,{LH:function(){return s},j1:function(){return r},nj:function(){return i},nu:function(){return a},ps:function(){return o}});class r extends Error{constructor(e){super(e),Object.setPrototypeOf(this,r.prototype)}}class s extends Error{constructor(e){super(e),Object.setPrototypeOf(this,s.prototype)}}class a extends Error{constructor(e){super(e),Object.setPrototypeOf(this,a.prototype)}}class i extends Error{constructor(e){super(e),Object.setPrototypeOf(this,i.prototype)}}class o extends Error{constructor(e){super(e),Object.setPrototypeOf(this,o.prototype)}}},9603:function(e,t,n){"use strict";n.d(t,{FB:function(){return r.FB}});n(8891),n(4396),n(5337);var r=n(3066)},5654:function(e,t,n){"use strict";n.d(t,{m7:function(){return d},M6:function(){return h},L5:function(){return $},Cx:function(){return A}});var r=n(8081),s=n(9840),a=n(8090),i=n(588);const o=["fanIn","fanOut","fanAvg"],u=["normal","uniform","truncatedNormal"];var c=n(2931),l=n(6040);class d extends r.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class p extends d{apply(e,t){return(0,r.zeros)(e,t)}}p.className="Zeros",r.serialization.registerClass(p);class h extends d{apply(e,t){return(0,r.ones)(e,t)}}h.className="Ones",r.serialization.registerClass(h);class f extends d{constructor(e){if(super(),"object"!=typeof e)throw new i.nu(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new i.nu(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return(0,r.tidy)((()=>(0,r.mul)((0,r.scalar)(this.value),(0,r.ones)(e,t))))}getConfig(){return{value:this.value}}}f.className="Constant",r.serialization.registerClass(f);class m extends d{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return(0,r.randomUniform)(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}m.className="RandomUniform",r.serialization.registerClass(m);class g extends d{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new i.nj(`randomNormal does not support dType ${t}.`);return s.nG(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}g.className="RandomNormal",r.serialization.registerClass(g);class y extends d{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new i.nj(`truncatedNormal does not support dType ${t}.`);return(0,r.truncatedNormal)(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}y.className="TruncatedNormal",r.serialization.registerClass(y);class b extends d{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return(0,r.tidy)((()=>{if(2!==e.length||e[0]!==e[1])throw new i.nu("Identity matrix initializer can only be used for 2D square matrices.");return(0,r.mul)(this.gain,(0,r.eye)(e[0]))}))}getConfig(){return{gain:this.gain}}}b.className="Identity",r.serialization.registerClass(b);class x extends d{constructor(e){if(super(),e.scale<0)throw new i.nu(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,(0,c.xn)(o,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){(0,c.xn)(u,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if((0,a.cj)(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=(0,l.NS)(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=(0,l.NS)(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=(0,l.NS)(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),s=n[0],o=n[1];let u=this.scale;if("fanIn"===this.mode?u/=Math.max(1,s):"fanOut"===this.mode?u/=Math.max(1,o):u/=Math.max(1,(s+o)/2),"normal"===this.distribution){const n=Math.sqrt(u);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new i.nj(`${this.getClassName()} does not support dType ${t}.`);return(0,r.truncatedNormal)(e,0,n,t,this.seed)}{const n=Math.sqrt(3*u);return(0,r.randomUniform)(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}x.className="VarianceScaling",r.serialization.registerClass(x);class v extends x{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return x.className}}v.className="GlorotUniform",r.serialization.registerClass(v);class w extends x{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return x.className}}w.className="GlorotNormal",r.serialization.registerClass(w);class k extends x{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return x.className}}k.className="HeNormal",r.serialization.registerClass(k);class N extends x{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return x.className}}N.className="HeUniform",r.serialization.registerClass(N);class S extends x{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return x.className}}S.className="LeCunNormal",r.serialization.registerClass(S);class I extends x{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return x.className}}I.className="LeCunUniform",r.serialization.registerClass(I);class T extends d{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return(0,r.tidy)((()=>{if(e.length<2)throw new i.nj("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=r.util.sizeFromShape(e.slice(0,-1)),a=e[e.length-1],o=n*a;o>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${o}) elements: Slowness may result.`);const u=[Math.max(a,n),Math.min(a,n)],c=s.nG(u,0,1,t,this.seed),l=r.linalg.qr(c,!1);let d=l[0];const p=l[1].flatten().stridedSlice([0],[Math.min(a,n)*Math.min(a,n)],[Math.min(a,n)+1]);return d=(0,r.mul)(d,p.sign()),n<a&&(d=d.transpose()),(0,r.mul)((0,r.scalar)(this.gain),d.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}T.className="Orthogonal",r.serialization.registerClass(T);const C={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function E(e,t={}){return(0,c.tU)(e,r.serialization.SerializationMap.getMap().classNameMap,t,"initializer")}function A(e){return(0,c.Kj)(e)}function $(e){if("string"==typeof e){const t=e in C?C[e]:e;if("GlorotNormal"===t)return new w;if("GlorotUniform"===t)return new v;if("HeNormal"===t)return new k;if("HeUniform"===t)return new N;if("LeCunNormal"===t)return new S;if("LeCunUniform"===t)return new I;{const e={};return e.className=t,e.config={},E(e)}}return e instanceof d?e:E(e)}},4685:function(e,t,n){"use strict";n.d(t,{MK:function(){return i},Mz:function(){return s},PS:function(){return r},eY:function(){return o},zx:function(){return a}});const r=["channelsFirst","channelsLast"],s=["nearest","bilinear"],a=["valid","same","causal"],i=["max","avg"],o=["sum","mul","concat","ave"]},7870:function(e,t,n){"use strict";var r=n(8081),s=n(8819),a=n(4079),i=n(163),o=n(588),u=n(5654),c=n(539),l=n(7538);class d extends i.mh{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=(0,l.nQ)(e);let n=(0,r.relu)(e);return null!=this.maxValue&&(n=(0,r.clipByValue)(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}d.className="ReLU",r.serialization.registerClass(d);class p extends i.mh{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=(0,l.nQ)(e);return(0,r.leakyRelu)(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}p.className="LeakyReLU",r.serialization.registerClass(p);class h extends i.mh{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=(0,u.L5)(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=(0,c.EC)(e.alphaRegularizer),this.alphaConstraint=(0,a.Ad)(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new o.nu(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=(0,l.Wf)(e)).slice(1);if(null!=this.sharedAxes)for(const r of this.sharedAxes)t[r-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let r=1;r<e.length;++r)n[r]=e[r];this.inputSpec=[new i.Zg({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=(0,l.nQ)(e),(0,r.prelu)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:(0,u.Cx)(this.alphaInitializer),alphaRegularizer:(0,c.SG)(this.alphaRegularizer),alphaConstraint:(0,a.xF)(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}h.className="PReLU",r.serialization.registerClass(h);class f extends i.mh{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new o.nj(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=(0,l.nQ)(e);return(0,r.elu)(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}f.className="ELU",r.serialization.registerClass(f);class m extends i.mh{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=(0,l.nQ)(e);return(0,r.mul)(n,(0,r.cast)((0,r.greater)(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}m.className="ThresholdedReLU",r.serialization.registerClass(m);class g extends i.mh{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new s.Gc).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return(0,r.tidy)((()=>{let n=(0,l.nQ)(e);const s=t.mask;if(null!=s){const e=(0,r.mul)((0,r.sub)((0,r.ones)(n.shape),(0,r.cast)(s,n.dtype)),(0,r.scalar)(-1e9));n=(0,r.add)(n,e)}return this.axis instanceof Array?this.axis.length>1?(0,r.exp)((0,r.sub)(n,(0,r.logSumExp)(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)}))}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}g.className="Softmax",r.serialization.registerClass(g)},4121:function(e,t,n){"use strict";var r=n(8081),s=n(2012),a=n(9840),i=n(8090),o=n(4079),u=n(588),c=n(5654),l=n(539),d=n(6517),p=n(7538),h=n(5650);class f extends h.nx{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=(0,c.L5)(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=(0,o.Ad)(e.depthwiseConstraint),this.depthwiseRegularizer=(0,l.EC)(e.depthwiseRegularizer)}build(e){if((e=(0,p.Wf)(e)).length<4)throw new u.nu(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new u.nu(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,r.tidy)((()=>{let t=function(e,t,n=[1,1],a="valid",o,c){return(0,r.tidy)((()=>{null==o&&(o=(0,s.rf)()),(0,i.cj)(o);let l=(0,h.aP)(e,o);if(4!==e.rank)throw new u.nu(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new u.nu(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return l=r.depthwiseConv2d(l,t,n,"same"===a?"same":"valid","NHWC",c),"channelsFirst"===o&&(l=r.transpose(l,[0,3,1,2])),l}))}(e=(0,p.nQ)(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=a.a2(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=(0,p.Wf)(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=(0,d.kt)(t,this.kernelSize[0],this.padding,this.strides[0]),a=(0,d.kt)(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=(0,c.Cx)(this.depthwiseInitializer),e.depthwiseRegularizer=(0,l.SG)(this.depthwiseRegularizer),e.depthwiseConstraint=(0,o.xF)(this.depthwiseRegularizer),e}}f.className="DepthwiseConv2D",r.serialization.registerClass(f)},5819:function(e,t,n){"use strict";var r=n(8081),s=n(9840),a=n(8090),i=n(163),o=n(588),u=n(5654),c=n(6517),l=n(2931),d=n(7538),p=n(6014),h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class f extends p.$p{constructor(e){if(e.unroll)throw new o.nj("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new o.nj("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new i.Zg({ndim:5})]}call(e,t){return r.tidy((()=>{if(null!=this.cell.dropoutMask&&(r.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(r.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new o.nu("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return r.tidy((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)],i=r.zeros(a);return Array.isArray(t)?Array(t.length).fill(i):[i]}))}resetStates(e,t=!1){r.tidy((()=>{if(!this.stateful)throw new o.j1("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new o.nu("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>r.zeros(a))):this.states_=[r.zeros(a)];else if(null==e)r.dispose(this.states_),null!=this.keptStates&&(r.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>r.zeros(a))):this.states_[0]=r.zeros(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new o.nu(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):r.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!r.util.arraysEqual(n.shape,s))throw new o.nu(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>r.keep(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?3:2],l=e[o?4:3],d=(0,c.kt)(u,r[0],s,a[0],i[0]),p=(0,c.kt)(l,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,d,p]:[d,p,n]]}}f.className="ConvRNN2D";class m extends p.U7{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:i,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,(0,l.iQ)(this.filters,"filters"),this.kernelSize=(0,c.AF)(n,2,"kernelSize"),this.kernelSize.forEach((e=>(0,l.iQ)(e,"kernelSize"))),this.strides=(0,c.AF)(r||1,2,"strides"),this.strides.forEach((e=>(0,l.iQ)(e,"strides"))),this.padding=s||"valid",(0,a.zb)(this.padding),this.dataFormat=i||"channelsLast",(0,a.cj)(this.dataFormat),this.dilationRate=(0,c.AF)(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>(0,l.iQ)(e,"dilationRate")))}build(e){var t;e=(0,d.Wf)(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new o.nu(`The channel dimension of the input should be defined. Found ${e[n]}`);const a=e[n],i=this.kernelSize.concat([a,4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const c=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",c,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,a=this.filters;e=new((t=class extends u.m7{apply(e,t){const i=n.apply([a]),o=r.ones([a]),u=n.apply([2*a]);return s.mV([i,o,u])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return r.tidy((()=>{if(3!==e.length)throw new o.nu(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=(0,p._0)({ones:()=>r.onesLike(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(e,t,n)=>t&&t[n]?r.mul(t[n],e):e;let l=c(s,u,0),d=c(s,u,1),h=c(s,u,2),f=c(s,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=(0,p._0)({ones:()=>r.onesLike(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const m=this.recurrentDropoutMask;let g=c(a,m,0),y=c(a,m,1),b=c(a,m,2),x=c(a,m,3);const[v,w,k,N]=r.split(this.kernel.read(),4,3),[S,I,T,C]=this.useBias?r.split(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,v,S,this.padding),d=this.inputConv(d,w,I,this.padding),h=this.inputConv(h,k,T,this.padding),f=this.inputConv(f,N,C,this.padding);const[E,A,$,_]=r.split(this.recurrentKernel.read(),4,3);g=this.recurrentConv(g,E),y=this.recurrentConv(y,A),b=this.recurrentConv(b,$),x=this.recurrentConv(x,_);const R=this.recurrentActivation.apply(r.add(l,g)),F=this.recurrentActivation.apply(r.add(d,y)),D=r.add(r.mul(F,i),r.mul(R,this.activation.apply(r.add(h,b)))),O=r.mul(this.recurrentActivation.apply(r.add(f,x)),this.activation.apply(D));return[O,O,D]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=h(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,a){const i=r.conv2d(e,t,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?s.a2(i,n,this.dataFormat):i}recurrentConv(e,t){return r.conv2d(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}m.className="ConvLSTM2DCell",r.serialization.registerClass(m);class g extends f{constructor(e){const t=new m(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}g.className="ConvLSTM2D",r.serialization.registerClass(g)},3636:function(e,t,n){"use strict";var r=n(8081),s=n(8819),a=n(9840),i=n(4079),o=n(163),u=n(588),c=n(5654),l=n(539),d=n(2931),p=n(6040),h=n(7538);class f extends o.mh{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?t[r]:this.noiseShape[r]);return n}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,h.nQ)(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return a.KC((()=>a.rv(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}f.className="Dropout",r.serialization.registerClass(f);class m extends f{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}m.className="SpatialDropout1D",r.serialization.registerClass(m);class g extends o.mh{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,(0,d.iQ)(this.units,"units"),this.activation=(0,s.aI)(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=(0,c.L5)(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=(0,c.L5)(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=(0,i.Ad)(e.kernelConstraint),this.biasConstraint=(0,i.Ad)(e.biasConstraint),this.kernelRegularizer=(0,l.EC)(e.kernelRegularizer),this.biasRegularizer=(0,l.EC)(e.biasRegularizer),this.activityRegularizer=(0,l.EC)(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=(0,h.Wf)(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=(0,h.Wf)(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,h.nQ)(e),r=(0,d.WT)(this.activation.getClassName());let s;return null!=r?s=a.AK(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=a.AK(n,this.kernel.read()),null!=this.bias&&(s=a.a2(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:(0,s.GD)(this.activation),useBias:this.useBias,kernelInitializer:(0,c.Cx)(this.kernelInitializer),biasInitializer:(0,c.Cx)(this.biasInitializer),kernelRegularizer:(0,l.SG)(this.kernelRegularizer),biasRegularizer:(0,l.SG)(this.biasRegularizer),activityRegularizer:(0,l.SG)(this.activityRegularizer),kernelConstraint:(0,i.xF)(this.kernelConstraint),biasConstraint:(0,i.xF)(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}g.className="Dense",r.serialization.registerClass(g);class y extends o.mh{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=(0,h.Wf)(e);for(const t of e.slice(1))if(null==t)throw new u.nu(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],(0,p.NS)(e,1)]}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);let n=(0,h.nQ)(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=(0,r.transpose)(n,e)}return a.Uz(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}y.className="Flatten",r.serialization.registerClass(y);class b extends o.mh{constructor(e){super(e),this.supportsMasking=!0,this.activation=(0,s.aI)(e.activation)}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,h.nQ)(e);return this.activation.apply(n)}))}getConfig(){const e={activation:(0,s.GD)(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}b.className="Activation",r.serialization.registerClass(b);class x extends o.mh{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return(0,r.tidy)((()=>(e=(0,h.nQ)(e),a.rx(e,this.n))))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}x.className="RepeatVector",r.serialization.registerClass(x);class v extends o.mh{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let o=0;o<r.length;++o){const e=r[o];if(this.isUnknown(e)){if(null!==a)throw new u.nu("Can only specifiy one unknown dimension.");a=o}else s*=e}const i=(0,p.NS)(e);if(null!==a){if(0===s||i%s!=0)throw new u.nu(n);r[a]=i/s}else if(i!==s)throw new u.nu(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,h.nQ)(e),s=n.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return(0,r.reshape)(n,a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}v.className="Reshape",r.serialization.registerClass(v);class w extends o.mh{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=(0,p.w6)(1,e.dims.length+1);if(!r.util.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new o.Zg({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=(0,h.Wf)(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return(0,r.transpose)((0,h.nQ)(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}w.className="Permute",r.serialization.registerClass(w);class k extends o.mh{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=(0,h.nQ)(e);return(0,r.any)((0,r.notEqual)(n,this.maskValue),-1)}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,h.nQ)(e),s=(0,r.any)((0,r.notEqual)(n,this.maskValue),-1,!0);return(0,r.mul)(n,(0,r.cast)(s,n.dtype))}))}}k.className="Masking",r.serialization.registerClass(k)},2784:function(e,t,n){"use strict";var r=n(8081),s=n(9840),a=n(4079),i=n(163),o=n(588),u=n(5654),c=n(539),l=n(2931),d=n(7538);class p extends i.mh{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(l.zZ(e.inputLength))}this.inputDim=e.inputDim,l.iQ(this.inputDim,"inputDim"),this.outputDim=e.outputDim,l.iQ(this.outputDim,"outputDim"),this.embeddingsInitializer=(0,u.L5)(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=(0,c.EC)(e.embeddingsRegularizer),this.activityRegularizer=(0,c.EC)(e.activityRegularizer),this.embeddingsConstraint=(0,a.Ad)(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return(0,r.tidy)((()=>this.maskZero?(e=(0,d.nQ)(e),(0,r.notEqual)(e,(0,r.zerosLike)(e))):null))}computeOutputShape(e){if(e=(0,d.Wf)(e),null==this.inputLength)return[...e,this.outputDim];const t=l.zZ(this.inputLength);if(t.length!==e.length-1)throw new o.nu(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new o.nu(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);let n=(0,d.nQ)(e);"int32"!==n.dtype&&(n=s.pj(n,"int32"));const a=s.Iq(this.embeddings.read(),(0,r.reshape)(n,[n.size]));return(0,r.reshape)(a,(0,d.Wf)(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:(0,u.Cx)(this.embeddingsInitializer),embeddingsRegularizer:(0,c.SG)(this.embeddingsRegularizer),activityRegularizer:(0,c.SG)(this.activityRegularizer),embeddingsConstraint:(0,a.xF)(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}p.className="Embedding",r.serialization.registerClass(p)},4140:function(e,t,n){"use strict";var r=n(8081),s=n(9840),a=n(163),i=n(588),o=n(6275),u=n(2931),c=n(6040),l=n(7538);class d extends a.mh{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new i.nj}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new i.nu("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[(0,l.Wf)(e)]),e.length<2)throw new i.nu(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const s of e)null!=s&&null!==s[0]&&t.push(s[0]);if(t=u.Tw(t),t.length>1)throw new i.nu(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const t=null==e[s]?null:e[s].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===u.Tw(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return(0,r.tidy)((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=c.Fp(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=s.dt(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const i of e){const e=i.rank;if(null==e){const e=i.shape,s=e[0],a=e.slice(1).concat([s]);let o=r.reshape(i,[s].concat(c.NS(e.slice(1))));o=r.transpose(o,[1,0]),o=r.reshape(o,a),t.push(o),n=!0}else if(e>1){const s=c.w6(1,e).concat([0]);t.push(r.transpose(i,s)),n=!0}else t.push(i)}let s=this.mergeFunction(t);const a=s.rank;if(n)if(null==a){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=r.reshape(r.transpose(r.reshape(s,[-1,t]),[1,0]),n)}else if(a>1){const e=[a-1].concat(c.w6(0,a-1));s=r.transpose(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const n=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const r of e)null!=r&&null!==r[0]&&n.push(r[0]);return n=u.Tw(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return r.tidy((()=>{if(null==t)return null;if(!Array.isArray(t))throw new i.nu("`mask` should be an Array");if(!Array.isArray(e))throw new i.nu("`inputs` should be an Array");if(t.length!==e.length)throw new i.nu(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:r.expandDims(e,0))))[0];for(let e=1;e<t.length-1;++e)n=r.logicalAnd(n,t[e]);return n}))}}class p extends d{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=r.add(t,e[n]);return t}))}}p.className="Add",r.serialization.registerClass(p);class h extends d{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=r.mul(t,e[n]);return t}))}}h.className="Multiply",r.serialization.registerClass(h);class f extends d{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=r.add(t,e[n]);return r.mul(1/e.length,t)}))}}f.className="Average",r.serialization.registerClass(f);class m extends d{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=r.maximum(t,e[n]);return t}))}}m.className="Maximum",r.serialization.registerClass(m);class g extends d{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=r.minimum(t,e[n]);return t}))}}g.className="Minimum",r.serialization.registerClass(g);class y extends d{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new i.nu("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const r of e)if(null!=r){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let a=!1;for(const e of n)if(r.util.arraysEqual(e,t)){a=!0;break}a||n.push(t)}if(n.length>1)throw new i.nu("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,r.tidy)((()=>s.mV(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new i.nu("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const s of t.slice(1)){if(null==n[r]||null==s[r]){n[r]=null;break}n[r]+=s[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new i.nu("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new i.nu("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new i.nu(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return r.tidy((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let i=0;i<e.length;++i)null==t[i]?s.push(r.cast(r.onesLike(e[i]),"bool")):t[i].rank<e[i].rank?s.push(r.expandDims(t[i],-1)):s.push(t[i]);const a=r.concat(s,this.axis);return r.all(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function b(e,t){for(;e<0;)e+=t;return e}y.className="Concatenate",r.serialization.registerClass(y);class x extends d{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){r.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new i.nj("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new i.nu(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new i.nu(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>b(t,e[n].shape.length))):[b(this.axes,n.shape.length),b(this.axes,s.shape.length)],this.normalize&&(n=(0,o.Eq)(n,t[0]),s=(0,o.Eq)(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new i.nj("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.util.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),r.util.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new i.nj("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const o=n;return r.tidy((()=>{let n,i;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=r.reshape(t,t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=r.reshape(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=o[0]===o[1]?r.sum(r.mul(e,t),o[0]):r.sum(r.mul(r.transpose(e,[1,0]),t),o[1]);else{const n=o[0]!==e.shape.length-1,s=o[1]===t.shape.length-1;i=r.matMul(e,t,n,s)}if(n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);i=r.squeeze(i,t)}return 1===i.shape.length&&(i=r.expandDims(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[b(this.axes,e.length),b(this.axes,t.length)],n}computeOutputShape(e){r.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new i.nj("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}x.className="Dot",r.serialization.registerClass(x)},6177:function(e,t,n){"use strict";var r=n(8081),s=n(9840),a=n(163),i=n(7538);class o extends a.mh{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,i.nQ)(e);return s.KC((()=>(0,r.add)(s.nG(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}o.className="GaussianNoise",r.serialization.registerClass(o);class u extends a.mh{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=(0,i.nQ)(e);if(this.rate>0&&this.rate<1){const e=()=>{const e=Math.sqrt(this.rate/(1-this.rate));return(0,r.mul)(n,s.nG(n.shape,1,e))};return s.KC(e,(()=>n),t.training||!1)}return n}))}}u.className="GaussianDropout",r.serialization.registerClass(u);class c extends a.mh{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||(0,i.nQ)(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,r.tidy)((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),a=()=>{const t=(0,i.nQ)(e),a=-1.7580993408473766;let o=(0,r.greaterEqual)((0,r.randomUniform)(n),this.rate);o=s.pj(o,"float32");const u=((1-this.rate)*(1+this.rate*a**2))**-.5,c=-u*a*this.rate,l=(0,r.add)((0,r.mul)(t,o),(0,r.mul)((0,r.add)(o,-1),a));return(0,r.add)((0,r.mul)(l,u),c)};return s.KC(a,(()=>(0,i.nQ)(e)),t.training||!1)}return e}))}}c.className="AlphaDropout",r.serialization.registerClass(c)},7280:function(e,t,n){"use strict";var r=n(8081),s=n(4079),a=n(163),i=n(588),o=n(5654),u=n(539),c=n(2931),l=n(6040),d=n(7538);function p(e,t,n,s,a,o=.001){let u;if(2===e.rank)u=r.batchNorm2d(e,t,n,s,a,o);else if(3===e.rank)u=r.batchNorm3d(e,t,n,s,a,o);else{if(4!==e.rank)throw new i.nj(`batchNormalization is not implemented for array of rank ${e.rank} yet`);u=r.batchNorm4d(e,t,n,s,a,o)}return u}function h(e,t,n,s,a=.001){return r.util.arraysEqual(s.slice().sort(),l.w6(0,e.rank-1))?function(e,t,n,s,a=.001){return(0,r.tidy)((()=>{const i=r.moments(e,s),o=i.mean,u=i.variance;return[p(e,o,u,n,t,a),o,u]}))}(e,t,n,s,a):function(e,t,n,s,a=.001){return(0,r.tidy)((()=>{const i=r.moments(e,s),o=i.mean,u=i.variance,c=[];for(const t of l.w6(0,e.rank))-1!==s.indexOf(t)?c.push(1):c.push(e.shape[t]);const d=(0,r.reshape)(o,c),h=(0,r.reshape)(u,c),f=null==t?null:(0,r.reshape)(t,c),m=null==n?null:(0,r.reshape)(n,c);return[p(e,d,h,m,f,a),o,u]}))}(e,t,n,s,a)}class f extends a.mh{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=(0,o.L5)(e.betaInitializer||"zeros"),this.gammaInitializer=(0,o.L5)(e.gammaInitializer||"ones"),this.movingMeanInitializer=(0,o.L5)(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=(0,o.L5)(e.movingVarianceInitializer||"ones"),this.betaConstraint=(0,s.Ad)(e.betaConstraint),this.gammaConstraint=(0,s.Ad)(e.gammaConstraint),this.betaRegularizer=(0,u.EC)(e.betaRegularizer),this.gammaRegularizer=(0,u.EC)(e.gammaRegularizer)}build(e){e=(0,d.Wf)(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new i.nu(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new a.Zg({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return(0,r.tidy)((()=>{const n=null!=t.training&&t.training,s=(0,d.nQ)(e),a=s.shape,i=a.length,o=l.w6(0,i),u=this.axis>=0?this.axis:this.axis+i;o.splice(u,1);const f=c.JE(1,i);f[u]=a[u];const m=o.slice();m.sort();const g=!r.util.arraysEqual(m,l.w6(0,i).slice(0,i-1));if(!n)return(()=>{if(g){const e=(0,r.reshape)(this.movingMean.read(),f),t=(0,r.reshape)(this.movingVariance.read(),f),n=this.center?(0,r.reshape)(this.beta.read(),f):null,a=this.scale?(0,r.reshape)(this.gamma.read(),f):null;return p(s,e,t,n,a,this.epsilon)}return p(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[y,b,x]=h(s,this.gamma.read(),this.beta.read(),o,this.epsilon),v=(e,t,n)=>{r.tidy((()=>{const s=1-n,a=e.read(),i=r.mul(r.sub(a,t),s);e.write(r.sub(a,i))}))};return(()=>{v(this.movingMean,b,this.momentum),v(this.movingVariance,x,this.momentum)})(),y}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:(0,o.Cx)(this.betaInitializer),gammaInitializer:(0,o.Cx)(this.gammaInitializer),movingMeanInitializer:(0,o.Cx)(this.movingMeanInitializer),movingVarianceInitializer:(0,o.Cx)(this.movingVarianceInitializer),betaRegularizer:(0,u.SG)(this.betaRegularizer),gammaRegularizer:(0,u.SG)(this.gammaRegularizer),betaConstraint:(0,s.xF)(this.betaConstraint),gammaConstraint:(0,s.xF)(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}f.className="BatchNormalization",r.serialization.registerClass(f);class m extends a.mh{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=(0,o.L5)(e.betaInitializer||"zeros"),this.gammaInitializer=(0,o.L5)(e.gammaInitializer||"ones"),this.betaRegularizer=(0,u.EC)(e.betaRegularizer),this.gammaRegularizer=(0,u.EC)(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=(0,d.Wf)(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);for(const r of this.axis)if(r<0||r>=t)throw new Error(`Invalid axis: ${r}`);if(this.axis.length!==c.Tw(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=(0,d.nQ)(e),s=n.shape,a=s.length;return(0,r.tidy)((()=>{let{mean:e,variance:t}=(0,r.moments)(n,this.axis,!0);const i=c.JE(1,a);for(const n of this.axis)i[n]=s[n];const o=e=>null!=e&&e.shape.length!==a?r.reshape(e,i):e;let u=this.scale?o(this.gamma.read()):null,l=this.center?o(this.beta.read()):null;const d=[],h=[];for(let n=0;n<a;++n)-1!==this.axis.indexOf(n)?(d.push(s[n]),h.push(1)):(d.push(1),h.push(s[n]));return e=r.tile(e,d),t=r.tile(t,d),null!=u&&(u=r.tile(u,h)),null!=l&&(l=r.tile(l,h)),p(n,e,t,l,u,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:(0,o.Cx)(this.betaInitializer),gammaInitializer:(0,o.Cx)(this.gammaInitializer),betaRegularizer:(0,u.SG)(this.betaRegularizer),gammaRegularizer:(0,u.SG)(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}m.className="LayerNormalization",r.serialization.registerClass(m)},505:function(e,t,n){"use strict";var r=n(8081),s=n(2012),a=n(163),i=n(588),o=n(7538);class u extends a.mh{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?(0,s.rf)():e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new i.nu(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new i.nu(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new i.nu(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new a.Zg({ndim:4})]}computeOutputShape(e){let t,n;return e=(0,o.Wf)(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return(0,r.tidy)((()=>{return t=(0,o.nQ)(e),n=this.padding,a=this.dataFormat,(0,r.tidy)((()=>{if(4!==t.rank)throw new i.nu(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new i.nu("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==a&&(a=(0,s.rf)()),"channelsLast"!==a&&"channelsFirst"!==a)throw new i.nu(`Unknown data format: ${a}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===a?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],r.pad(t,e)}));var t,n,a}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}u.className="ZeroPadding2D",r.serialization.registerClass(u)},756:function(e,t,n){"use strict";var r=n(8081),s=n(2012),a=n(9840),i=n(8090),o=n(163),u=n(588),c=n(6517),l=n(2931),d=n(7538),p=n(5650);function h(e,t,n,a,o,u){return(0,r.tidy)((()=>{let c;(0,i.cj)(o),(0,i.Lp)(u),(0,i.zb)(a),null==n&&(n=[1,1]),null==a&&(a="valid"),null==o&&(o=(0,s.rf)()),null==u&&(u="max"),e=(0,p.aP)(e,o);const l="same"===a?"same":"valid";return c="max"===u?r.maxPool(e,t,n,l):r.avgPool(e,t,n,l),"channelsFirst"===o&&(c=r.transpose(c,[0,3,1,2])),c}))}function f(e,t,n,a,o,u){return(0,r.tidy)((()=>{let c;(0,i.cj)(o),(0,i.Lp)(u),(0,i.zb)(a),null==n&&(n=[1,1,1]),null==a&&(a="valid"),null==o&&(o=(0,s.rf)()),null==u&&(u="max"),e=(0,p.fN)(e,o);const l="same"===a?"same":"valid";return c="max"===u?r.maxPool3d(e,t,n,l):r.avgPool3d(e,t,n,l),"channelsFirst"===o&&(c=r.transpose(c,[0,4,1,2,3])),c}))}class m extends o.mh{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new u.nu(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if((0,l.iQ)(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new u.nu(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}(0,l.iQ)(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,(0,i.zb)(this.padding),this.inputSpec=[new o.Zg({ndim:3})]}computeOutputShape(e){e=(0,d.Wf)(e);const t=(0,c.kt)(e[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t),e=a.dt((0,d.nQ)(e),2);const n=this.poolingFunction((0,d.nQ)(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return r.squeeze(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class g extends m{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return(0,i.cj)(s),(0,i.zb)(r),h(e,t,n,r,s,"max")}}g.className="MaxPooling1D",r.serialization.registerClass(g);class y extends m{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return(0,i.cj)(s),(0,i.zb)(r),h(e,t,n,r,s,"avg")}}y.className="AveragePooling1D",r.serialization.registerClass(y);class b extends o.mh{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new u.nu(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];(0,l.iQ)(this.poolSize,"poolSize"),(0,l.iQ)(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,i.cj)(this.dataFormat),(0,i.zb)(this.padding),this.inputSpec=[new o.Zg({ndim:4})]}computeOutputShape(e){e=(0,d.Wf)(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=(0,c.kt)(t,this.poolSize[0],this.padding,this.strides[0]),n=(0,c.kt)(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return(0,r.tidy)((()=>(this.invokeCallHook(e,t),this.poolingFunction((0,d.nQ)(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class x extends b{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return(0,i.cj)(s),(0,i.zb)(r),h(e,t,n,r,s,"max")}}x.className="MaxPooling2D",r.serialization.registerClass(x);class v extends b{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return(0,i.cj)(s),(0,i.zb)(r),h(e,t,n,r,s,"avg")}}v.className="AveragePooling2D",r.serialization.registerClass(v);class w extends o.mh{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new u.nu(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];(0,l.iQ)(this.poolSize,"poolSize"),(0,l.iQ)(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,i.cj)(this.dataFormat),(0,i.zb)(this.padding),this.inputSpec=[new o.Zg({ndim:5})]}computeOutputShape(e){e=(0,d.Wf)(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=(0,c.kt)(t,this.poolSize[0],this.padding,this.strides[0]),n=(0,c.kt)(n,this.poolSize[1],this.padding,this.strides[1]),r=(0,c.kt)(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return(0,r.tidy)((()=>(this.invokeCallHook(e,t),this.poolingFunction((0,d.nQ)(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class k extends w{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return(0,i.cj)(s),(0,i.zb)(r),f(e,t,n,r,s,"max")}}k.className="MaxPooling3D",r.serialization.registerClass(k);class N extends w{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return(0,i.cj)(s),(0,i.zb)(r),f(e,t,n,r,s,"avg")}}N.className="AveragePooling3D",r.serialization.registerClass(N);class S extends o.mh{constructor(e){super(e),this.inputSpec=[new o.Zg({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new u.nj}}class I extends S{constructor(e){super(e||{})}call(e,t){return(0,r.tidy)((()=>{const t=(0,d.nQ)(e);return r.mean(t,1)}))}}I.className="GlobalAveragePooling1D",r.serialization.registerClass(I);class T extends S{constructor(e){super(e||{})}call(e,t){return(0,r.tidy)((()=>{const t=(0,d.nQ)(e);return r.max(t,1)}))}}T.className="GlobalMaxPooling1D",r.serialization.registerClass(T);class C extends o.mh{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,i.cj)(this.dataFormat),this.inputSpec=[new o.Zg({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new u.nj}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class E extends C{call(e,t){return(0,r.tidy)((()=>{const t=(0,d.nQ)(e);return"channelsLast"===this.dataFormat?r.mean(t,[1,2]):r.mean(t,[2,3])}))}}E.className="GlobalAveragePooling2D",r.serialization.registerClass(E);class A extends C{call(e,t){return(0,r.tidy)((()=>{const t=(0,d.nQ)(e);return"channelsLast"===this.dataFormat?r.max(t,[1,2]):r.max(t,[2,3])}))}}A.className="GlobalMaxPooling2D",r.serialization.registerClass(A)},2829:function(e,t,n){"use strict";var r=n(163),s=n(8081),a=n(7538),i=n(588),o=n(9840);class u extends r.mh{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=(0,a.Wf)(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return(0,s.tidy)((()=>{let n;if("int32"!==(e=(0,a.nQ)(e)).dtype&&(e=o.pj(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new i.nu(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=(0,a.nQ)(t.countWeights)}const r=(0,s.max)(e),u=(0,s.min)(e),c=(0,s.greater)(this.numTokens,r).bufferSync().get(0),l=(0,s.greaterEqual)(u,0).bufferSync().get(0);if(!c||!l)throw new i.nu(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let u=(0,a.nQ)(e);if("int32"!==u.dtype&&(u=o.pj(u,"int32")),"int"===t)return u;const c=u.shape;if(0===u.rank&&(u=(0,s.expandDims)(u,-1)),"oneHot"===t&&1!==u.shape[u.shape.length-1]&&(u=(0,s.expandDims)(u,-1)),u.rank>2)throw new i.nu(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${c} which would result in output rank ${u.rank}.`);const l=["multiHot","oneHot"].includes(t),d=u;let p;if(p=void 0!==r&&"count"===t?(0,s.denseBincount)(d,r,n,l):(0,s.denseBincount)(d,[],n,l),"tfIdf"!==t)return p;if(r)return(0,s.mul)(p,r);throw new i.nu("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}u.className="CategoryEncoding",s.serialization.registerClass(u)},770:function(e,t,n){"use strict";var r=n(8081),s=n(7538),a=n(163),i=n(9840);const{resizeBilinear:o,cropAndResize:u}=r.image;class c extends a.mh{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,a,o,c,l,d){return(0,r.tidy)((()=>{let p,h=!1;const f=[t/c,n/l,(a+t)/c,(o+n)/l],m=[];3===e.rank?(h=!0,p=(0,r.stack)([e])):p=e;for(let e=0;e<p.shape[0];e++)m.push(f);const g=(0,r.tensor)(m,[m.length,4]),y=(0,r.range)(0,m.length,1,"int32"),b=u(p,g,y,[a,o],"nearest");return h?i.pj((0,s.nQ)((0,r.unstack)(b)),d):i.pj(b,d)}))}upsize(e,t,n,s){return(0,r.tidy)((()=>{const r=o(e,[t,n]);return i.pj(r,s)}))}call(e,t){return(0,r.tidy)((()=>{const t=(0,s.nQ)(e),n=t.dtype,r=t.shape,a=r[r.length-3],i=r[r.length-2];let o=0;a!==this.height&&(o=Math.floor((a-this.height)/2));let u=0;return i!==this.width&&(u=Math.floor((i-this.width)/2),0===u&&(u=1)),o>=0&&u>=0?this.centerCrop(t,o,u,this.height,this.width,a,i,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=(0,s.Wf)(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}c.className="CenterCrop",r.serialization.registerClass(c)},8710:function(e,t,n){"use strict";var r=n(163),s=n(8081),a=n(7538),i=n(9840);class o extends r.mh{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return(0,s.tidy)((()=>("float32"!==(e=(0,a.nQ)(e)).dtype&&(e=i.pj(e,"float32")),(0,s.add)((0,s.mul)(e,this.scale),this.offset))))}}o.className="Rescaling",s.serialization.registerClass(o)},6184:function(e,t,n){"use strict";var r=n(8081),s=n(163),a=n(588),i=n(7538);const o=new Set(["bilinear","nearest"]);class u extends s.mh{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!o.has(e.interpolation))throw new a.nu(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=(0,i.Wf)(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return(0,r.tidy)((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return r.image.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return r.image.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...o]} are supported`)}))}}u.className="Resizing",r.serialization.registerClass(u)},4401:function(e,t,n){"use strict";var r=n(8081),s=n(7538),a=n(588),i=n(163);class o{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}o.className="RandomSeed";class u extends i.mh{constructor(e){super(e),this.randomGenerator=new o(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}u.className="BaseRandomLayer";const c=new Set(["bilinear","nearest"]);class l extends u{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new a.nu(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new a.nu(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new a.nu(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!c.has(n))throw new a.nu(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=(0,s.Wf)(e))[2];return[this.imgHeight,-1,t]}call(e,t){return(0,r.tidy)((()=>{const t=(0,s.nQ)(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=(0,r.randomUniform)([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*n;a=Math.round(a);const i=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return r.image.resizeBilinear(e,i);case"nearest":return r.image.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...c]} are supported`)}}))}}l.className="RandomWidth",r.serialization.registerClass(l)},9897:function(e,t,n){"use strict";n.d(t,{v:function(){return a}});var r=n(8081),s=n(2931);function a(e,t={},n=!1){return(0,s.tU)(e,r.serialization.SerializationMap.getMap().classNameMap,t,"layer",n)}},8012:function(e,t,n){"use strict";var r=n(8081),s=n(9840),a=n(8090),i=n(163),o=n(588),u=n(4685),c=n(2931),l=n(7538),d=n(6014),p=n(9897);class h extends i.mh{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=t.layer,s=(0,p.v)(r,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class f extends h{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=(0,l.Wf)(e)).length<3)throw new o.nu(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=(0,l.Wf)(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return(0,r.tidy)((()=>{e=(0,l.nQ)(e);return(0,d.nd)(((e,n)=>[(0,l.nQ)(this.layer.call(e,t)),[]]),e,[],!1,null,null,!1,!0)[1]}))}}f.className="TimeDistributed",r.serialization.registerClass(f);class m extends h{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=(0,p.v)(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=(0,p.v)(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,c.xn(u.eY,"BidirectionalMergeMode",s),e.weights)throw new o.nj("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):c.Bq(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=(0,d.lx)(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],u=[];if(null!=n){const e=n.length;if(e%2>0)throw new o.nu("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new i.Zg({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),u.push(...r)}if(null!=r)throw new o.nj("Support for constants in Bidirectional layers is not implemented yet.");const c=a[0]instanceof i.Iy;for(const l of a)if(l instanceof i.Iy!==c)throw new o.nu("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(c){const n=[e].concat(a),r=this.inputSpec.concat(u),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return(0,r.tidy)((()=>{const n=t.initialState;let a,i,o,u;if(null==n)a=this.forwardLayer.call(e,t),i=this.backwardLayer.call(e,t);else{const r=n.slice(0,n.length/2),s=n.slice(n.length/2);a=this.forwardLayer.call(e,Object.assign(t,{initialState:r})),i=this.backwardLayer.call(e,Object.assign(t,{initialState:s}))}return this.returnState&&(Array.isArray(a)&&(o=a.slice(1).concat(i.slice(1))),a=a[0],i=i[0]),this.returnSequences&&(i=r.reverse(i,1)),"concat"===this.mergeMode?u=s.mV([a,i]):"sum"===this.mergeMode?u=r.add(a,i):"ave"===this.mergeMode?u=r.mul(.5,r.add(a,i)):"mul"===this.mergeMode?u=r.mul(a,i):null==this.mergeMode&&(u=[a,i]),this.returnState?null==this.mergeMode?u.concat(o):[u].concat(o):u}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){(0,a.f4)(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),(0,a.f4)(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=(0,p.v)(t.layer);if(delete t.layer,null!=t.numConstants)throw new o.nj("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}m.className="Bidirectional",r.serialization.registerClass(m)},3146:function(e,t,n){"use strict";n.d(t,{Z:function(){return s},i:function(){return a}});var r=n(8081);async function s(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];(0,r.dispose)(s)}}function a(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}},6275:function(e,t,n){"use strict";n.d(t,{Eq:function(){return o},FD:function(){return u},KM:function(){return h},Ls:function(){return g},U2:function(){return b},dr:function(){return y},fO:function(){return f},ke:function(){return c},t3:function(){return l},uq:function(){return p}});var r=n(8081),s=n(2012),a=n(9840),i=n(588);function o(e,t){return(0,r.tidy)((()=>{"float32"!==e.dtype&&(e=r.cast(e,"float32"));const n=r.sum(a.h6(e),t,!0),i=r.fill(n.shape,(0,s.Ho)()),o=r.sqrt(r.maximum(n,i));return r.div(e,o)}))}function u(e,t){return(0,r.tidy)((()=>r.mean(a.h6(r.sub(t,e)),-1)))}function c(e,t){return(0,r.tidy)((()=>r.mean(r.abs(r.sub(t,e)),-1)))}function l(e,t){return(0,r.tidy)((()=>{const n=r.sub(e,t),a=r.clipByValue(r.abs(e),(0,s.Ho)(),Number.MAX_VALUE),i=r.abs(r.div(n,a));return r.mul(100,r.mean(i,-1))}))}function d(e,t){return(0,r.tidy)((()=>{const n=r.clipByValue(t,(0,s.Ho)(),Number.MAX_VALUE),i=r.log(r.add(1,n)),o=r.clipByValue(e,(0,s.Ho)(),Number.MAX_VALUE),u=r.log(r.add(1,o));return r.mean(a.h6(r.sub(i,u)),-1)}))}function p(e,t,n=!1){return(0,r.tidy)((()=>{if(n)t=r.softmax(t);else{const e=r.sum(t,t.shape.length-1,!0);t=r.div(t,e)}return t=r.clipByValue(t,(0,s.Ho)(),1-(0,s.Ho)()),r.neg(r.sum(r.mul(r.cast(e,"float32"),r.log(t)),t.shape.length-1))}))}function h(e,t,n=!1){return(0,r.tidy)((()=>{const i=r.cast(r.floor(a.xH(e)),"int32"),o=(t=r.clipByValue(t,(0,s.Ho)(),1-(0,s.Ho)())).shape;return p(r.reshape(r.oneHot(i,o[o.length-1]),o),t,n)}))}function f(e,t){return(0,r.tidy)((()=>{let n;return n=r.clipByValue(t,(0,s.Ho)(),1-(0,s.Ho)()),n=r.log(r.div(n,r.sub(1,n))),r.mean(function(e,t){if(!r.util.arraysEqual(e.shape,t.shape))throw new i.nu(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return(0,r.tidy)((()=>{const n=r.relu(t),s=r.neg(r.abs(t));return r.add(r.sub(n,r.mul(t,e)),r.log1p(r.exp(s)))}))}(e,n),-1)}))}function m(e,t){return(0,r.tidy)((()=>{const n=r.clipByValue(e,(0,s.Ho)(),1),a=r.clipByValue(t,(0,s.Ho)(),1);return r.sum(r.mul(e,r.log(r.div(n,a))),-1)}))}function g(e,t){return(0,r.tidy)((()=>{const n=o(e,-1),s=o(t,-1),a=r.mul(n,s);return r.neg(r.sum(a,-1))}))}const y={meanSquaredError:u,meanAbsoluteError:c,meanAbsolutePercentageError:l,meanSquaredLogarithmicError:d,squaredHinge:function(e,t){return(0,r.tidy)((()=>{const n=r.maximum(0,r.sub(1,r.mul(e,t)));return r.mean(a.h6(n),-1)}))},hinge:function(e,t){return(0,r.tidy)((()=>{const n=r.maximum(0,r.sub(1,r.mul(e,t)));return r.mean(n,-1)}))},categoricalHinge:function(e,t){return(0,r.tidy)((()=>{const n=r.sum(r.mul(e,t),-1),s=r.max(r.mul(r.sub(1,e),t),-1);return r.maximum(0,r.add(1,r.sub(s,n)))}))},logcosh:function(e,t){return(0,r.tidy)((()=>{const n=Math.log(2),s=r.sub(t,e),a=r.sub(r.add(s,r.softplus(r.mul(-2,s))),n);return r.mean(a,-1)}))},categoricalCrossentropy:p,sparseCategoricalCrossentropy:h,binaryCrossentropy:f,kullbackLeiblerDivergence:m,poisson:function(e,t){return(0,r.tidy)((()=>{const n=r.log(r.add((0,s.Ho)(),t));return r.mean(r.sub(t,r.mul(e,n)),-1)}))},cosineProximity:g};function b(e){if("string"==typeof e){if(e in y)return y[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new i.nu(t)}return e}},7629:function(e,t,n){"use strict";n.d(t,{G5:function(){return c},KM:function(){return w},TY:function(){return p},U2:function(){return N},_F:function(){return u},aI:function(){return S},fO:function(){return d},uq:function(){return x}});var r=n(8081),s=n(9840),a=n(588),i=n(6275),o=n(2931);function u(e,t){return(0,r.tidy)((()=>{const n=r.mul(.5,r.onesLike(t)),a=s.pj(r.greater(t,n),e.dtype);return r.mean(r.equal(e,a),-1)}))}function c(e,t){return(0,r.tidy)((()=>s.pj(r.equal(r.argMax(e,-1),r.argMax(t,-1)),"float32")))}function l(e,t){return(0,r.tidy)((()=>r.cast(r.sum(r.logicalAnd(r.equal(e,1),r.equal(t,1))),"float32")))}function d(e,t){return(0,i.fO)(e,t)}function p(e,t){return e.rank===t.rank&&(e=r.squeeze(e,[e.rank-1])),(t=r.argMax(t,-1)).dtype!==e.dtype&&(t=r.cast(t,e.dtype)),r.cast(r.equal(e,t),"float32")}const h=i.FD,f=i.FD,m=i.ke,g=i.ke,y=i.t3,b=i.t3,x=i.uq,v=i.Ls,w=i.KM,k={binaryAccuracy:u,categoricalAccuracy:c,precision:function(e,t){return(0,r.tidy)((()=>{const n=l(e,t),s=function(e,t){return(0,r.tidy)((()=>r.cast(r.sum(r.logicalAnd(r.equal(e,0),r.equal(t,1))),"float32")))}(e,t),a=r.add(n,s);return r.cast(r.where(r.greater(a,0),r.div(n,a),0),"float32")}))},categoricalCrossentropy:x,sparseCategoricalCrossentropy:w,mse:h,MSE:f,mae:m,MAE:g,mape:y,MAPE:b,cosine:v};function N(e){if("string"==typeof e&&e in k)return k[e];if("string"!=typeof e&&null!=e)return e;throw new a.nu(`Unknown metric ${e}`)}function S(e){if(o.hu(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(i.dr))if(i.dr[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(k))if(k[n]===e){t=n;break}return void 0!==t?t:e.name}}},3066:function(e,t,n){"use strict";n.d(t,{FB:function(){return h}});var r=n(8081),s=n(1944),a=n(4396),i=n(163),o=n(5337),u=n(588),c=n(9897),l=n(2931),d=n(1977),p=n(7538);async function h(e,t){if(null==t&&(t={}),"string"==typeof e){const n=r.io.getLoadHandlers(e,t);if(0===n.length)n.push(r.io.browserHTTPRequest(e,t));else if(n.length>1)throw new u.nu(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new u.nu("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let a=s.modelTopology;null!=a.model_config&&(a=a.model_config);const i=null==n.strict||n.strict,o=null!=s.weightData&&null!=s.weightSpecs&&i,l=(0,c.v)((0,d.a)(a),t,o),p=s.trainingConfig;null!=p&&l.loadTrainingConfig(p);null!=s.userDefinedMetadata&&l.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new u.nu("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=r.io.decodeWeights(e,t),s={},a=[];return t.forEach((e=>{"optimizer"===e.group?a.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:a}}(s.weightData,s.weightSpecs);l.loadWeights(e,i),null!=l.optimizer&&t.length>0&&await l.optimizer.setWeights(t),(0,r.dispose)(e),(0,r.dispose)(t.map((e=>e.tensor)))}return l}(e,void 0,t)}class f extends o.QV{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:(0,s.s)("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new u.nu(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof f||e instanceof o.QV;let n;if(t){if(n=e,1!==n.outputs.length)throw new u.nu("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new u.nu("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new u.nu("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=(0,a.I)({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new u.nu(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new u.nu("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=(0,i.hA)(this.outputs[0])}this.inboundNodes=[],new i.NB({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:l.JE(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if((0,p.Wf)(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new o.QV({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new u.LH("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new u.LH("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new u.LH("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new u.LH("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new u.nu("Legacy serialization format not supported yet.");a=t}else r.util.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=t.layers,delete t.layers,i=t;const o=new e(i);if(!(o instanceof f))throw new u.nj(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const r of a){const e=void 0,t=(0,c.v)(r,e,s);s&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new u.nu("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new u.nu("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}f.className="Sequential",r.serialization.registerClass(f)},2328:function(e,t,n){"use strict";n.d(t,{j:function(){return i}});var r=n(8081),s=n(2012),a=n(588);function i(e){const t={Adagrad:()=>r.train.adagrad(.01),Adadelta:()=>r.train.adadelta(1,.95,(0,s.Ho)()),Adam:()=>r.train.adam(.001,.9,.999,(0,s.Ho)()),Adamax:()=>r.train.adamax(.002,.9,.999,(0,s.Ho)(),0),RMSProp:()=>r.train.rmsprop(.001,.9,0,(0,s.Ho)()),SGD:()=>r.train.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new a.nu(`Unknown Optimizer ${e}`)}},539:function(e,t,n){"use strict";n.d(t,{EC:function(){return p},SG:function(){return l}});var r=n(8081),s=n(9840),a=n(2931);function i(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}class o extends r.serialization.Serializable{}class u extends o{constructor(e){super(),i(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return(0,r.tidy)((()=>{let t=(0,r.zeros)([1]);return this.hasL1&&(t=(0,r.add)(t,(0,r.sum)(r.mul(this.l1,(0,r.abs)(e))))),this.hasL2&&(t=(0,r.add)(t,(0,r.sum)(r.mul(this.l2,s.h6(e))))),r.reshape(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}u.className="L1L2",r.serialization.registerClass(u);const c={l1l2:"L1L2"};function l(e){return(0,a.Kj)(e)}function d(e,t={}){return(0,a.tU)(e,r.serialization.SerializationMap.getMap().classNameMap,t,"regularizer")}function p(e){if(null==e)return null;if("string"==typeof e){return d({className:e in c?c[e]:e,config:{}})}return e instanceof o?e:d(e)}},8374:function(e,t,n){"use strict";n.d(t,{WE:function(){return s}});const r=1048576;function s(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!a(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>r&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${r}.`)}}function a(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!a(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!a(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}},6517:function(e,t,n){"use strict";n.d(t,{$U:function(){return u},AF:function(){return i},kt:function(){return o}});var r=n(588),s=n(2931),a=n(6040);function i(e,t,n){if("number"==typeof e)return(0,s.JE)(e,t);if(e.length!==t)throw new r.nu(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const i=e[s];if(!(0,a.U)(i))throw new r.nu(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${i}`)}return e}function o(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function u(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+(0,a.Fp)([n-t,0]);else{if("same"!==s)throw new r.nu(`Unsupport padding mode: ${s}.`);e*=t}return e}},2931:function(e,t,n){"use strict";n.d(t,{Bq:function(){return u},D1:function(){return l},Ds:function(){return N},JE:function(){return a},Kj:function(){return h},L7:function(){return g},Mx:function(){return v},QX:function(){return o},Tw:function(){return y},WT:function(){return S},hu:function(){return i},iQ:function(){return w},nK:function(){return b},tU:function(){return m},xn:function(){return x},zW:function(){return d},zZ:function(){return c}});var r=n(8081),s=n(588);function a(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function i(e,t){if(!e)throw new s.ps(t)}function o(e,t){let n=0;for(const r of e)r===t&&n++;return n}function u(e){return 1===e.length?e[0]:e}function c(e){return Array.isArray(e)?e:[e]}function l(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function d(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let p={};function h(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function f(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>f(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?f(t):e[n]=t.value)}}}function m(e,t={},n={},r="object",a=!1){if("string"==typeof e){const a=e;let i;if(a in n)i=n[a];else if(a in p)i=p[a];else if(i=t[a],null==i)throw new s.nu(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}{const i=e;if(null==i.className||null==i.config)throw new s.nu(`${r}: Improper config format: ${JSON.stringify(i)}.\n'className' and 'config' must set.`);const o=i.className;let u,c;if(o in n?[u,c]=n[o]:o in p?[u,c]=p.className:o in t&&([u,c]=t[o]),null==u)throw new s.nu(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=c){const e={};for(const n of Object.keys(p))e[n]=p[n];for(const s of Object.keys(n))e[s]=n[s];i.config.customObjects=e;const t=Object.assign({},p);for(const s of Object.keys(n))p[s]=n[s];f(i.config);const r=c(u,i.config,n,a);return p=Object.assign({},t),r}{const e=Object.assign({},p);for(const r of Object.keys(n))p[r]=n[r];const t=new u(i.config);return p=Object.assign({},e),t}}}function g(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function y(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function b(e){if(null==e)throw new s.nu(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function x(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new s.nu(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function v(e,t,n=0,r=1/0){return i(n>=0),i(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function w(e,t){Array.isArray(e)?(r.util.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>w(e,`element ${n+1} of ${t}`)))):r.util.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${k(e)}.`))}function k(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>k(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function N(e,t,n){let s,a=null!=n?n():r.util.now();return(...i)=>{const o=null!=n?n():r.util.now();return o-a<t||(a=o,s=e(...i)),s}}function S(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}},618:function(e,t,n){"use strict";n.d(t,{I:function(){return s}});var r=n(3013);function s(e,t,n,s=console.log){const u=function(e){let t=!0;const n=[],r=[];for(const s in e.nodesByDepth)n.push(e.nodesByDepth[s]);for(const s of n){if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){t=!1;break}r.push(...s)}if(t)for(const s of e.layers){let e=!1;for(const n of s.inboundNodes)if(-1!==r.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),c=["Layer (type)","Input Shape","Output shape","Param #"];let l;if(u?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!u){c.push("Receives inputs"),l=[];for(const t in e.nodesByDepth)l.push(...e.nodesByDepth[t])}s("_".repeat(t)),a(c,n,s),s("=".repeat(t));const d=e.layers;for(let r=0;r<d.length;++r)u?i(d[r],n,s):o(d[r],n,l,s),s((r===d.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const p=function(e){let t;t=null!=e.collectedTrainableWeights?(0,r.t)(e.collectedTrainableWeights):(0,r.t)(e.trainableWeights);return t}(e),h=(0,r.t)(e.nonTrainableWeights);s(`Total params: ${p+h}`),s(`Trainable params: ${p}`),s(`Non-trainable params: ${h}`),s("_".repeat(t))}function a(e,t,n=console.log){let r="";for(let s=0;s<e.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r+=e[s],r=r.slice(0,t[s]),r+=" ".repeat(t[s]-r.length);n(r)}function i(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(i){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(i){r="multiple"}a([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function o(e,t,n,r){let s,i;try{i=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(d){i="multiple"}try{s=JSON.stringify(e.outputShape)}catch(d){s="multiple"}const o=[];for(const a of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(a)))for(let e=0;e<a.inboundLayers.length;++e){const t=a.inboundLayers[e].name,n=a.nodeIndices[e],r=a.tensorIndices[e];o.push(`${t}[${n}][${r}]`)}const u=e.name,c=e.getClassName(),l=0===o.length?"":o[0];a([`${u} (${c})`,i,s,e.countParams().toString(),l],t,r);for(let p=1;p<o.length;++p)a(["","","","",o[p]],t,r)}},6040:function(e,t,n){"use strict";n.d(t,{Fp:function(){return o},NS:function(){return a},U:function(){return s},VV:function(){return i},w6:function(){return u}});var r=n(588);function s(e){return e===parseInt(e.toString(),10)}function a(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function i(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function o(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function u(e,t){if(t<e)throw new r.nu(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}},1977:function(e,t,n){"use strict";n.d(t,{a:function(){return a},q:function(){return i}});var r=n(2931);function s(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function a(e,t){if(null===e)return null;if("string"==typeof e)return r.zW(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let i=0;i<r;++i){const r=e[i];s(t,i,r)?n.push(r):n.push(a(r,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=r.zW(n);t[e]=a(s,e)}}return t}}function i(e,t){if(null==e)return null;if("string"==typeof e)return r.D1(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let a=0;a<r;++a){const r=e[a];s(t,a,r)?n.push(r):n.push(i(r,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],a=r.D1(n);t[a]="name"!==n&&"className"!==n||"string"!=typeof s?i(s,n):s}return t}}},7538:function(e,t,n){"use strict";n.d(t,{Wf:function(){return o},XO:function(){return s},nQ:function(){return i},x6:function(){return a}});var r=n(588);function s(e){return Array.isArray(e)&&Array.isArray(e[0])}function a(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function i(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new r.nu(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function o(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new r.nu(`Expected exactly 1 Shape; got ${e.length}`)}return e}},3013:function(e,t,n){"use strict";function r(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}n.d(t,{t:function(){return r}})},1653:function(e,t,n){"use strict";n.d(t,{FQ:function(){return u},fU:function(){return o},zb:function(){return c}});var r=n(8081),s=n(1944),a=n(8090);const i="Variable";class o{constructor(e,t="float32",n=i,o=!0,u=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=(0,s.L)(),n=null==n?i:n,this.originalName=(0,a.MU)(n),this.name=(0,a.w8)(this.originalName),this.trainable_=o,this.constraint=u,this.val=r.variable(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function u(e){return e.map((e=>e.read()))}function c(e){e.forEach((e=>{e[0].write(e[1])}))}},7385:function(e,t,n){"use strict";n.d(t,{i:function(){return r}});const r="4.15.0"},2888:function(e,t,n){"use strict";n.d(t,{aTG:function(){return r},FBF:function(){return Qr.FB},Cd_:function(){return s.ready},odF:function(){return s.tensor2d}});var r={};n.r(r),n.d(r,{CSVDataset:function(){return Ws},Dataset:function(){return $s},FileDataSource:function(){return ta},TextLineDataset:function(){return Os},URLDataSource:function(){return na},array:function(){return Rs},csv:function(){return ra},func:function(){return sa},generator:function(){return aa},microphone:function(){return oa},version_data:function(){return ua},webcam:function(){return ia},zip:function(){return Fs}});var s=n(8081),a=n(9121),i=n(2271),o=n(4841),u=n(1901);const c={kernelName:a.SYM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,(0,u.N)((0,i.p)(n,"float32"),-1))}}};var l=n(1274),d=n(7370),p=n(9494),h=n(3261),f=n(248),m=n(827);const g={kernelName:a.VGw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,f.h)((0,i.p)(n,"float32")),r=(0,h._)((0,m.l)((0,p.i)(1),t));return(0,d.W)((0,l.h)(e,r))}}}},y={kernelName:a.SpW,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,h._)((0,m.l)((0,f.h)((0,i.p)(n,"float32")),1));return(0,l.h)(e,t)}}}};var b=n(2200),x=n(4968),v=n(5475);const w={kernelName:a.mm_,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=b.assertAndGetBroadcastShape(n.shape,r.shape);return{a:()=>{let t=e;const r=b.getReductionAxes(n.shape,s);return r.length>0&&(t=(0,v.S)(t,r)),(0,x.X)(t,n.shape)},b:()=>{let t=e;const n=b.getReductionAxes(r.shape,s);return n.length>0&&(t=(0,v.S)(t,n)),(0,x.X)(t,r.shape)}}}},k={kernelName:a.Xze,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}};var N=n(6577);const S={kernelName:a.sJF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,N.P)(n)}}},I={kernelName:a.aJk,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,N.P)(n)}}},T={kernelName:a.M2y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,h._)((0,m.l)((0,p.i)(1),(0,f.h)((0,i.p)(n,"float32")))))}}};var C=n(6407);const E={kernelName:a.qw7,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,h._)((0,C.I)((0,p.i)(1),(0,f.h)((0,i.p)(n,"float32"))));return(0,l.h)(e,t)}}}},A={kernelName:a.QCc,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=(0,b.assertAndGetBroadcastShape)(n.shape,r.shape);return{a:()=>{const t=(0,C.I)((0,f.h)(n),(0,f.h)(r));let a=(0,o.d)(e,(0,l.h)(r,t));const i=(0,b.getReductionAxes)(n.shape,s);return i.length>0&&(a=(0,v.S)(a,i)),(0,x.X)(a,n.shape)},b:()=>{const t=(0,C.I)((0,f.h)(n),(0,f.h)(r));let a=(0,d.W)((0,o.d)(e,(0,l.h)(n,t)));const i=(0,b.getReductionAxes)(r.shape,s);return i.length>0&&(a=(0,v.S)(a,i)),(0,x.X)(a,r.shape)}}}},$={kernelName:a.jMg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,C.I)((0,f.h)((0,i.p)(n,"float32")),1))}}},_={kernelName:a.Oyi,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,m.l)((0,p.i)(1),(0,f.h)((0,i.p)(n,"float32"))))}}};var R=n(7097),F=n(3740),D=n(569),O=n(2582),M=n(2668);const z=(0,M.op)({avgPool3dGrad_:function(e,t,n,r,s,i){const o=(0,F._1)(e,"dy","avgPool3dGrad"),u=(0,F._1)(t,"input","avgPool3dGrad");let c=o,l=u,d=!1;4===u.rank&&(d=!0,c=(0,x.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),l=(0,x.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),D.hu(5===c.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),D.hu(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),(0,O.m)("avgPool3dGrad",s,i);const p={dy:c,input:l},h={filterSize:n,strides:r,pad:s,dimRoundingMode:i},f=R.BV.runKernel(a.IMb,p,h);return d?(0,x.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),B={kernelName:a._k9,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>z(e,r,s,a,i,o)}}};const L=(0,M.op)({avgPoolGrad_:function(e,t,n,r,s){const i=(0,F._1)(e,"dy","avgPoolGrad"),o=(0,F._1)(t,"input","avgPoolGrad");D.hu(o.rank===i.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${i.rank})`));let u=o,c=i,l=!1;3===o.rank&&(l=!0,u=(0,x.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=(0,x.X)(i,[1,i.shape[0],i.shape[1],i.shape[2]])),D.hu(4===c.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${c.rank}.`)),D.hu(4===u.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${u.rank}.`));const d={dy:c,input:u},p={filterSize:n,strides:r,pad:s},h=R.BV.runKernel(a.ROF,d,p);return l?(0,x.X)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),P={kernelName:a.JhU,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>L(e,r,s,a,i)}}};var V=n(8687);const W={kernelName:a.XLW,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>(0,V.O)(e,s,!1,!1),b:()=>(0,V.O)(e,r,!0,!1)}:a&&!i?{a:()=>(0,V.O)(s,e,!1,!0),b:()=>(0,V.O)(r,e,!1,!1)}:{a:()=>(0,V.O)(s,e,!0,!0),b:()=>(0,V.O)(e,r,!0,!0)}:{a:()=>(0,V.O)(e,s,!1,!0),b:()=>(0,V.O)(r,e,!0,!1)}}};var U=n(7918);const G={kernelName:a.zws,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>(0,U.f)(e,r,s)}}},H={kernelName:a.Ly9,gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let u=s.length-1;u>=0;u--)if(s[u]===a[u])i[u]=1;else if(1!==s[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let u=0;u<i.length;u++)i[u]>1&&o.push(u);return{x:()=>(0,v.S)(e,o,!0)}}},j={kernelName:a.RFZ,gradFunc:e=>({x:()=>e.clone()})},q={kernelName:a.gJX,gradFunc:e=>({x:()=>(0,N.P)(e)})};var X=n(7630),K=n(624),Q=n(2856),Z=n(5912);const Y={kernelName:a.xnO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>(0,Z.a)((0,Q.H)((0,X.b)(r,s),(0,K.z)(r,a)),e,(0,N.P)(e))}}},J={kernelName:a.yj2,inputsToSave:["x"],gradFunc:c.gradFunc};var ee=n(8644);const te={kernelName:a.Eh3,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=(0,D.EC)(s,t[0].shape)[0],i=r.map((e=>e[a]));return(0,ee.V)(e,i,a).map((e=>()=>e))}};var ne=n(6013),re=n(9832);const se={kernelName:a.mhS,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return D.hu(O.I0(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>(0,re._)(r.shape,e,s,i,o,u),filter:()=>(0,ne.p)(r,e,s.shape,i,o,u)}}};var ae=n(4794);const ie={kernelName:a.wm,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>(0,ae.T)(e,s,a,i,o,1,u),filter:()=>(0,ne.p)(e,r,s.shape,a,i,o,u)}}};const oe=(0,M.op)({conv3DBackpropFilter_:function(e,t,n,r,s){let i=e;4===e.rank&&(i=(0,x.X)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=(0,x.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),D.hu(5===i.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`)),D.hu(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),D.hu(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),D.hu(i.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${n[3]}.`)),D.hu(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const u={x:i,dy:o},c={strides:r,pad:s,filterShape:n};return R.BV.runKernel(a.o2y,u,c)}});var ue=n(7594);const ce={kernelName:a.x12,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;D.hu((0,O.I0)(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=t;return{x:()=>(0,ue._)(i.shape,e,o,s,a),filter:()=>oe(i,e,o.shape,s,a)}}};var le=n(9331);const de={kernelName:a.mc4,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)((0,d.W)((0,le.O)((0,i.p)(n,"float32"))),e)}}};var pe=n(3254);const he={kernelName:a.TR1,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)((0,pe.R)((0,i.p)(n,"float32")),e)}}};var fe=n(3591),me=n(7405),ge=n(9065);const ye={kernelName:a.iHb,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=(0,fe.Q3)([s],r.rank);let n=(0,me.z)(e,s,a,!i);return null!=t&&(n=(0,ge.p)(n,t)),n}}}};var be=n(8098),xe=n(4375);const ve={kernelName:a.cie,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;D.hu(O.I0(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,c]=t;return D.hu(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),D.hu(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),D.hu(u.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),D.hu(O.jT(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),O.m("depthwiseConv2d",a,i),{x:()=>(0,xe.v)(u.shape,e,c,s,a,o,i),filter:()=>(0,be.z)(u,e,c.shape,s,a,o,i)}}},we={kernelName:a.p4S,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,i={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>R.BV.runKernel(a.ekb,i,n),filter:()=>R.BV.runKernel(a.Vn9,o,n)}}},ke={kernelName:a.SX0,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>R.BV.runKernel(a.HEU,r)}}};var Ne=n(4842);const Se={kernelName:a.Omj,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=(0,o.d)((0,Ne.Q)((0,d.W)((0,f.h)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,o.d)(e,r)}}},Ie={kernelName:a.NEP,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,n)}}},Te={kernelName:a.YFo,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,x.X)(e,n.shape)}}},Ce={kernelName:a.Y0y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,(0,Ne.Q)(n))}}},Ee={kernelName:a.OR,gradFunc:e=>({x:()=>(0,N.P)(e)})},Ae={kernelName:a.jeX,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=(0,b.assertAndGetBroadcastShape)(n.shape,r.shape);return{a:()=>{const t=(0,l.h)(e,(0,i.p)(r,"float32")),a=(0,b.getReductionAxes)(n.shape,s);return a.length>0?(0,x.X)((0,v.S)(t,a),n.shape):t},b:()=>{let t=(0,o.d)(e,(0,i.p)(n,"float32"));const a=(0,b.getReductionAxes)(r.shape,s);a.length>0&&(t=(0,x.X)((0,v.S)(t,a),r.shape));const u=(0,f.h)(r);return(0,d.W)((0,l.h)(t,(0,i.p)(u,"float32")))}}}};var $e=n(2634),_e=n(7501);const Re={kernelName:a.sHE,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,u]=t,c=null==u?(0,p.i)(1):u,l=(0,b.getReductionAxes)(a.shape,s.shape),d=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)d.push(s.shape[e]);d.push(1)}const h=(0,m.l)(s,a),f=(0,o.d)(e,c),g=(0,$e.b)((0,C.I)(i,(0,p.i)(r))),y=(0,o.d)((0,o.d)((0,o.d)(g,g),g),(0,p.i)(-.5));return{x:()=>1===a.rank?(0,x.X)((0,o.d)((0,o.d)(e,(0,_e.G)((0,x.X)(g,[1,1,1,a.shape[0]]),d)),c),s.shape):(0,x.X)((0,o.d)((0,o.d)(e,g),c),s.shape),mean:()=>{let e=(0,o.d)((0,o.d)(g,(0,p.i)(-1)),f);return 1===a.rank&&(e=(0,v.S)(e,l)),(0,x.X)(e,a.shape)},variance:()=>{let e=(0,o.d)((0,o.d)(y,h),f);return 1===a.rank&&(e=(0,v.S)(e,l)),(0,x.X)(e,a.shape)},scale:()=>{const t=(0,o.d)(h,g);let n=(0,o.d)(e,t);return 1===a.rank&&(n=(0,v.S)(n,l)),(0,x.X)(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=(0,v.S)(t,l)),(0,x.X)(t,a.shape)}}}};var Fe=n(2991),De=n(8749);const Oe={kernelName:a.qi_,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a,batchDims:i}=n,o=(0,D.EC)(a,r.shape)[0],u=(e,t,n)=>()=>{const r=e.shape,s=t.size,i=r.slice(0,o),u=i.length,c=r.slice(a,r.length).slice(1),l=c.length,d=Me(0,u),p=Me(u+1,u+1+l),h=ze([i,[s],c]),f=(0,x.X)(n,h),m=(0,x.X)(t,[s]),g=ze([[u],d,p]),y=(0,ge.p)(f,g);let b=(0,De.p)(y,m,e.shape[o]);const v=(0,fe.LJ)(g);return b=(0,ge.p)(b,v),b};if(1===i){const t=r.shape[0],n=r.split(t,0);return{x:()=>{const t=(0,Fe.k)(n.map(((t,n)=>u(t,s.slice(n,1),e.slice(n,1))())));return t.reshape(r.shape)},indices:()=>s}}return{x:u(r,s,e),indices:()=>s}}};function Me(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function ze(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Be={kernelName:a.Acj,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,N.P)(n),b:()=>(0,N.P)(r)}}},Le={kernelName:a.iJz,gradFunc:e=>({x:()=>(0,i.p)(e,"float32")})},Pe={kernelName:a.avt,gradFunc:e=>({x:()=>(0,N.P)(e)})},Ve={kernelName:a.iWB,gradFunc:e=>({x:()=>(0,N.P)(e)})},We={kernelName:a.r7n,gradFunc:e=>({x:()=>(0,N.P)(e)})};var Ue=n(636);const Ge={kernelName:a.J$2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=(0,Ue.p)(r,0);return{x:()=>(0,Z.a)(a,e,(0,o.d)(e,s))}}},He={kernelName:a.kU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,C.I)(n,1))}}},je={kernelName:a.ZbH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,i.p)(n,"float32"))}}},qe={kernelName:a.qCd,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=(0,Ne.Q)(r);return(0,m.l)(e,(0,o.d)((0,v.S)(e,s,!0),t))}}}};const Xe=(0,M.op)({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,i=1,o=.5){const u={x:e,y:t,dy:n},c={depthRadius:r,bias:s,alpha:i,beta:o};return R.BV.runKernel(a.Hhh,u,c)}}),Ke={kernelName:a.eZ0,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>Xe(r,s,e,a,i,o,u)}}};var Qe=n(6477);function Ze(e,t,n,r){return t.rank<n.rank&&(t=(0,x.X)(t,fe.rv(t.shape,r))),e.rank<n.rank&&(e=(0,x.X)(e,fe.rv(e.shape,r))),{x:()=>(0,o.d)(e,(0,i.p)((0,Qe.D)(n,t),e.dtype))}}const Ye={kernelName:a.YoZ,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=Ze(e,t[1],a,D.EC(s,a.shape));return{x:()=>i.x()}}};var Je=n(6573);const et={kernelName:a.BMI,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,o.d)(e,(0,i.p)((0,X.b)(n,r),"float32")),b:()=>(0,o.d)(e,(0,i.p)((0,Je.d)(n,r),"float32"))}}};const tt=(0,M.op)({maxPool3dGrad_:function(e,t,n,r,s,i,o){const u=(0,F._1)(e,"dy","maxPool3dGrad"),c=(0,F._1)(t,"input","maxPool3dGrad"),l=(0,F._1)(n,"output","maxPool3dGrad");let d=u,p=c,h=l,f=!1;4===c.rank&&(f=!0,d=(0,x.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=(0,x.X)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),h=(0,x.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),D.hu(5===d.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${d.rank}.`)),D.hu(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),D.hu(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),(0,O.m)("maxPool3dGrad",i,o);const m={dy:d,input:p,output:h},g={filterSize:r,strides:s,pad:i,dimRoundingMode:o},y=R.BV.runKernel(a.OU7,m,g);return f?(0,x.X)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),nt={kernelName:a.OAf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>tt(e,r,s,a,i,o,u)}}};const rt=(0,M.op)({maxPoolGrad_:function(e,t,n,r,s,i,o){const u=(0,F._1)(e,"dy","maxPoolGrad"),c=(0,F._1)(t,"input","maxPoolGrad"),l=(0,F._1)(n,"output","maxPoolGrad");D.hu(c.rank===u.rank,(()=>`Rank of input (${c.rank}) does not match rank of dy (${u.rank})`)),D.hu(4===u.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),D.hu(4===c.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${c.rank}.`)),O.m("maxPoolGrad",i,o);const d={dy:u,input:c,output:l},p={filterSize:r,strides:s,pad:i,dimRoundingMode:o};return R.BV.runKernel(a.OV7,d,p)}}),st={kernelName:a.mTV,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>rt(e,r,s,a,i,o)}}};var at=n(4917);const it={kernelName:a.q2K,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=D.EC(s,r.shape),i=(0,fe.kz)(r.shape,a)[1],u=D.NA(i);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=(0,x.X)(e,t);return(0,l.h)((0,o.d)(n,(0,at.i)(r.shape,"float32")),u)}}}},ot={kernelName:a.c17,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=Ze(e,i,a,D.EC(s,a.shape));return{x:()=>o.x()}}},ut={kernelName:a.q8u,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,o.d)(e,(0,i.p)((0,K.z)(n,r),"float32")),b:()=>(0,o.d)(e,(0,i.p)((0,Ue.p)(n,r),"float32"))}}};var ct=n(2676);const lt={kernelName:a.jQs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>(0,ct.t)(e,a,r.shape)}}};var dt=n(6943);const pt={kernelName:a.Vbg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=(0,b.assertAndGetBroadcastShape)(n.shape,r.shape);return{a:()=>{const t=(0,b.getReductionAxes)(n.shape,s);return t.length>0?(0,x.X)((0,v.S)(e,t),n.shape):e},b:()=>{const t=(0,o.d)(e,(0,d.W)((0,dt.G)((0,l.h)(n,r)))),a=(0,b.getReductionAxes)(r.shape,s);return a.length>0?(0,x.X)((0,v.S)(t,a),r.shape):t}}}},ht={kernelName:a.wYn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=(0,b.assertAndGetBroadcastShape)(n.shape,r.shape);return{a:()=>{const t=(0,o.d)(e,(0,i.p)(r,"float32")),a=(0,b.getReductionAxes)(n.shape,s);return a.length>0?(0,x.X)((0,v.S)(t,a),n.shape):t},b:()=>{const t=(0,o.d)(e,(0,i.p)(n,"float32")),a=(0,b.getReductionAxes)(r.shape,s);return a.length>0?(0,x.X)((0,v.S)(t,a),r.shape):t}}}},ft={kernelName:a.kuV,gradFunc:e=>({x:()=>(0,d.W)(e)})};var mt=n(723);const gt={kernelName:a.we_,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,mt.l)(n.shape,"float32")}}},yt={kernelName:a.qWM,gradFunc:e=>({x:()=>(0,N.P)(e)})};var bt=n(4136);const xt={kernelName:a.QiL,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return(0,bt.H)(e,r).map((e=>()=>e))}},vt={kernelName:a.lyA,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>(0,ct.t)(e,a,r.shape)}}};var wt=n(2597),kt=n(3453);const Nt={kernelName:a.pe_,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,u=r,c=b.assertAndGetBroadcastShape(a.shape,u.shape);return{a:()=>{const t=(0,i.p)(u,"float32");let n=(0,o.d)(e,(0,o.d)(t,(0,kt.s)(a,(0,m.l)(t,(0,p.i)(1)))));const r=b.getReductionAxes(a.shape,c);return r.length>0&&(n=(0,v.S)(n,r)),(0,x.X)(n,a.shape)},b:()=>{const t=(0,Ue.p)(a,0),n=(0,Z.a)(t,(0,wt.c)(a),(0,N.P)(a));let r=(0,o.d)(e,(0,o.d)(s,n));const i=b.getReductionAxes(u.shape,c);return i.length>0&&(r=(0,v.S)(r,i)),(0,x.X)(r,u.shape)}}}},St={kernelName:a.o0g,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=(0,Ue.p)(n,0);return{x:()=>(0,Z.a)(s,e,(0,o.d)(e,r)),alpha:()=>{let t=(0,Z.a)(s,(0,N.P)(e),(0,o.d)(e,n));const a=(0,b.getReductionAxes)(r.shape,e.shape);return a.length>0&&(t=(0,v.S)(t,a)),(0,x.X)(t,r.shape)}}}};var It=n(9640);function Tt(e,t,n){const r=e.shape.length,s=r-n.length,a=fe.Q3(n,r);let i=e;null!=a&&(i=(0,ge.p)(e,a));const u=i.shape.slice(),c=u.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);u.push(c);let l=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=(0,x.X)(t,r),a=(0,It.$)(e,n,!0,!1),i=(0,It.$)(e,n,!0,!0),u=(0,o.d)(a,i);return(0,o.d)(s,u)}(i.reshape(u),t,s);if(l=l.reshape(i.shape),null!=a){const e=fe.LJ(a);l=(0,ge.p)(l,e)}return l}const Ct={kernelName:a.DlI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>Tt(r,e,a)}}},Et={kernelName:a.oHH,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=b.assertAndGetBroadcastShape(n.shape,r.shape);return{a:()=>{const t=(0,l.h)(e,(0,i.p)(r,"float32")),a=b.getReductionAxes(n.shape,s);return a.length>0?(0,x.X)((0,v.S)(t,a),n.shape):t},b:()=>{let t=(0,o.d)(e,(0,i.p)(n,"float32"));const a=b.getReductionAxes(r.shape,s);a.length>0&&(t=(0,x.X)((0,v.S)(t,a),r.shape));const u=(0,f.h)(r);return(0,d.W)((0,l.h)(t,(0,i.p)(u,"float32")))}}}},At={kernelName:a.$HU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,d.W)((0,f.h)(n)))}}},$t={kernelName:a.SbG,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=(0,o.d)((0,K.z)(n,6),(0,u.N)(n));return{x:()=>(0,o.d)(e,(0,i.p)(r,"float32"))}}},_t={kernelName:a.qkr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,(0,i.p)((0,u.N)(n),"float32"))}}},Rt={kernelName:a.HZH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.X)(e,n.shape)}}},Ft={kernelName:a._Yw,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>R.BV.runKernel(a.zbQ,s,n)}}},Dt={kernelName:a.dpD,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>R.BV.runKernel(a.Hmb,s,n)}}};var Ot=n(7486);const Mt={kernelName:a.mKl,gradFunc:(e,t,n)=>{const{dims:r}=n,s=(0,D.EC)(r,e.shape);return{x:()=>(0,Ot.G)(e,s)}}},zt={kernelName:a.e07,gradFunc:e=>({x:()=>(0,N.P)(e)})},Bt={kernelName:a.bV0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,d.W)((0,l.h)(e,(0,o.d)((0,kt.s)(n,1.5),2)))}}};var Lt=n(8651);const Pt={kernelName:a.PhF,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,i.p)((0,N.P)(n),"float32"),t:()=>(0,o.d)(e,(0,i.p)(n,e.dtype)),e:()=>(0,o.d)(e,(0,i.p)((0,Lt.h)(n),e.dtype))}}};var Vt=n(3179);const Wt={kernelName:a.oFR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Ue.p)(n,(0,p.i)(0)),r=(0,p.i)(Vt.y),s=(0,p.i)(Vt.$),a=(0,o.d)(e,s),u=(0,o.d)((0,o.d)(e,r),(0,Ne.Q)((0,i.p)(n,"float32")));return(0,Z.a)(t,a,u)}}}},Ut={kernelName:a.a5O,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,(0,o.d)(n,(0,m.l)((0,p.i)(1),n)))}}},Gt={kernelName:a.i5y,gradFunc:e=>({x:()=>(0,N.P)(e)})};var Ht=n(173);const jt={kernelName:a.RQH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)((0,Ht.m)((0,i.p)(n,"float32")),e)}}};var qt=n(2699);const Xt={kernelName:a.wYB,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)((0,qt.f)((0,i.p)(n,"float32")),e)}}};var Kt=n(9682),Qt=n(7650);const Zt={kernelName:a.p2w,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,u]=(0,Qt.parseSliceParams)(r,s,a),c=[];for(let l=0;l<e.rank;l++)c.push([o[l],i[l]-o[l]-u[l]]);return{x:()=>(0,Kt.v)(e,c)}}},Yt={kernelName:a.Gcp,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=(0,o.d)(e,r);return{logits:()=>(0,m.l)(a,(0,o.d)((0,v.S)(a,[s],true),r))}}};var Jt=n(625);const en={kernelName:a.MRv,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,(0,Jt.X)(n))}}};var tn=n(8441);const nn={kernelName:a.TQc,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>(0,tn.E)(e,r,s)}}};var rn=n(6884);const sn={kernelName:a.L8s,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>(0,rn.z)(e,r)}}},an={kernelName:a.FKq,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,o.d)((0,h._)((0,i.p)(n,"float32")),2))}}},on={kernelName:a.bK0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)(e,(0,o.d)((0,i.p)(n,"float32"),2))}}},un={kernelName:a._tC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=(0,p.i)(2);return{a:()=>(0,o.d)(e,(0,o.d)(s,(0,m.l)(n,r))),b:()=>(0,o.d)(e,(0,o.d)(s,(0,m.l)(r,n)))}}},cn={kernelName:a.h8e,gradFunc:e=>({x:()=>(0,N.P)(e)})},ln={kernelName:a.Tr8,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=b.assertAndGetBroadcastShape(n.shape,r.shape);return{a:()=>{let t=e;const r=b.getReductionAxes(n.shape,s);return r.length>0&&(t=(0,v.S)(t,r)),(0,x.X)(t,n.shape)},b:()=>{let t=e;const n=b.getReductionAxes(r.shape,s);return n.length>0&&(t=(0,v.S)(t,n)),(0,x.X)((0,d.W)(t),r.shape)}}}},dn={kernelName:a.GBy,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;(0,D.EC)(a,r.shape).forEach((e=>{s[e]=1}));const i=(0,x.X)(e,s),u=(0,o.d)(i,(0,at.i)(r.shape,"float32"));return{x:()=>u}}},pn={kernelName:a.sEM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.h)(e,(0,f.h)((0,Ht.m)(n)))}}},hn={kernelName:a.MIZ,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.d)((0,m.l)((0,p.i)(1),(0,f.h)(n)),e)}}},fn={kernelName:a.n9L,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=(0,N.P)(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=(0,C.I)(t,(0,ct.t)(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=(0,C.I)(t,(0,ct.t)(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=(0,C.I)(t,(0,ct.t)(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=(0,C.I)(t,(0,ct.t)(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},mn={kernelName:a.G3Y,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=fe.LJ(s);return{x:()=>(0,ge.p)(e,a)}}},gn={kernelName:a.ToN,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>(0,Fe.k)(e,s)}}};var yn=n(1300),bn=n(4926),xn=n(632);const vn={kernelName:a.Qvg,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,xn.g)(t,(0,N.P)(t)),r=(0,bn.I)(e,n);let s=(0,X.b)(t,(0,p.i)(0,"int32"));const a=r.rank-s.rank;for(let o=0;o<a;++o)s=(0,yn.d)(s,o+1);s=(0,Q.H)(s,(0,at.i)(r.shape,"bool"));const i=(0,N.P)(r);return(0,Z.a)(s,r,i)}(e,n)}}};const wn={kernelName:a.RuY,gradFunc:e=>({x:()=>(0,N.P)(e)})};var kn=n(6151);const Nn=[c,g,y,w,k,S,I,T,E,A,$,_,B,P,W,G,H,j,q,Y,J,te,ie,se,ce,de,he,ye,ve,we,Et,ke,Se,Ie,Te,Ce,Ae,Ee,Re,Oe,Be,Le,Pe,Ve,We,Ge,He,je,qe,Ke,Ye,Ye,et,nt,st,it,ot,ut,lt,pt,ht,ft,gt,yt,xt,vt,vt,Nt,St,Ct,At,$t,_t,Rt,Ft,Dt,Mt,zt,Bt,Pt,Wt,Ut,Gt,jt,Xt,Zt,Yt,en,nn,nn,sn,sn,an,un,on,cn,ln,dn,pn,hn,fn,mn,gn,vn,wn];for(const _y of Nn)(0,kn.Li)(_y);var Sn=n(6235),In=n(4077);(0,In.t3)().prototype.abs=function(){return this.throwIfDisposed(),(0,Sn.W)(this)};var Tn=n(7839);(0,In.t3)().prototype.acos=function(){return this.throwIfDisposed(),(0,Tn.K)(this)};var Cn=n(1470);(0,In.t3)().prototype.acosh=function(){return this.throwIfDisposed(),(0,Cn._)(this)},(0,In.t3)().prototype.add=function(e){return this.throwIfDisposed(),(0,C.I)(this,e)};var En=n(781);(0,In.t3)().prototype.all=function(e,t){return this.throwIfDisposed(),(0,En.$)(this,e,t)};var An=n(2998);(0,In.t3)().prototype.any=function(e,t){return this.throwIfDisposed(),(0,An.Y)(this,e,t)};var $n=n(47);(0,In.t3)().prototype.argMax=function(e){return this.throwIfDisposed(),(0,$n.N)(this,e)};var _n=n(7394);(0,In.t3)().prototype.argMin=function(e){return this.throwIfDisposed(),(0,_n.v)(this,e)},(0,In.t3)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,D.hu)(1===this.size,(()=>"The array must have only 1 element.")),(0,x.X)(this,[])},(0,In.t3)().prototype.asType=function(e){return this.throwIfDisposed(),(0,i.p)(this,e)},(0,In.t3)().prototype.as1D=function(){return this.throwIfDisposed(),(0,x.X)(this,[this.size])},(0,In.t3)().prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,x.X)(this,[e,t])},(0,In.t3)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,x.X)(this,[e,t,n])},(0,In.t3)().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),(0,x.X)(this,[e,t,n,r])},(0,In.t3)().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),(0,x.X)(this,[e,t,n,r,s])};var Rn=n(2421);(0,In.t3)().prototype.asin=function(){return this.throwIfDisposed(),(0,Rn.Z)(this)};var Fn=n(1891);(0,In.t3)().prototype.asinh=function(){return this.throwIfDisposed(),(0,Fn.V)(this)};var Dn=n(7037);(0,In.t3)().prototype.atan=function(){return this.throwIfDisposed(),(0,Dn.z)(this)};var On=n(9812);(0,In.t3)().prototype.atan2=function(e){return this.throwIfDisposed(),(0,On.f)(this,e)};var Mn=n(369);(0,In.t3)().prototype.atanh=function(){return this.throwIfDisposed(),(0,Mn.C)(this)};var zn=n(5176);(0,In.t3)().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),(0,zn.w)(this,e,t,n,r)},(0,In.t3)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,tn.E)(this,e,t)};var Bn=n(7505);(0,In.t3)().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),(0,Bn.t)(this,e,t,n,r,s)};var Ln=n(8247);(0,In.t3)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,Ln.U)(this,e)},(0,In.t3)().prototype.cast=function(e){return this.throwIfDisposed(),(0,i.p)(this,e)};var Pn=n(6825);(0,In.t3)().prototype.ceil=function(){return this.throwIfDisposed(),(0,Pn.m)(this)};var Vn=n(2279);(0,In.t3)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,Vn.i)(this,e,t)},(0,In.t3)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof In.es&&(e=[e]),(0,rn.z)([this,...e],t)};var Wn=n(1355);(0,In.t3)().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),(0,Wn.P)(this,e,t,n,r,s,a)};var Un=n(1405);(0,In.t3)().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),(0,Un.b)(this,e,t,n,r,s)},(0,In.t3)().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),(0,ae.T)(this,e,t,n,r,s,a)},(0,In.t3)().prototype.cos=function(){return this.throwIfDisposed(),(0,Ht.m)(this)},(0,In.t3)().prototype.cosh=function(){return this.throwIfDisposed(),(0,qt.f)(this)},(0,In.t3)().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),(0,It.$)(this,e,t,n)},(0,In.t3)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,me.z)(this,e,t,n)};var Gn=n(9112);(0,In.t3)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,Gn.n)(this,e,t)};var Hn=n(4718);(0,In.t3)().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),(0,Hn.B)(this,e,t,n,r,s,a)};var jn=n(557);(0,In.t3)().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),(0,jn.W)(this,e,t,n,r,s)};var qn=n(9322);(0,In.t3)().prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,qn.N)(this,e)},(0,In.t3)().prototype.div=function(e){return this.throwIfDisposed(),(0,l.h)(this,e)};var Xn=n(548);(0,In.t3)().prototype.dot=function(e){return this.throwIfDisposed(),(0,Xn.A)(this,e)};var Kn=n(3233);(0,In.t3)().prototype.elu=function(){return this.throwIfDisposed(),(0,Kn.p)(this)},(0,In.t3)().prototype.equal=function(e){return this.throwIfDisposed(),(0,Qe.D)(this,e)};var Qn=n(4650);(0,In.t3)().prototype.erf=function(){return this.throwIfDisposed(),(0,Qn.q)(this)};var Zn=n(1954);(0,In.t3)().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),(0,Zn.d)(this,e,t)},(0,In.t3)().prototype.exp=function(){return this.throwIfDisposed(),(0,Ne.Q)(this)},(0,In.t3)().prototype.expandDims=function(e){return this.throwIfDisposed(),(0,yn.d)(this,e)};var Yn=n(3426);(0,In.t3)().prototype.expm1=function(){return this.throwIfDisposed(),(0,Yn.t)(this)};var Jn=n(7020);(0,In.t3)().prototype.fft=function(){return this.throwIfDisposed(),(0,Jn.k)(this)},(0,In.t3)().prototype.flatten=function(){return this.throwIfDisposed(),(0,x.X)(this,[this.size])},(0,In.t3)().prototype.floor=function(){return this.throwIfDisposed(),(0,dt.G)(this)};var er=n(9165);(0,In.t3)().prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,er.q)(this,e)},(0,In.t3)().prototype.gather=function(e,t,n){return this.throwIfDisposed(),(0,bn.I)(this,e,t,n)},(0,In.t3)().prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,X.b)(this,e)},(0,In.t3)().prototype.greater=function(e){return this.throwIfDisposed(),(0,Ue.p)(this,e)};var tr=n(8447);(0,In.t3)().prototype.ifft=function(){return this.throwIfDisposed(),(0,tr.S)(this)};var nr=n(4415);(0,In.t3)().prototype.irfft=function(){return this.throwIfDisposed(),(0,nr.w)(this)};var rr=n(3963);(0,In.t3)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,rr.x)(this)};var sr=n(4365);(0,In.t3)().prototype.isInf=function(){return this.throwIfDisposed(),(0,sr.U)(this)};var ar=n(6230);(0,In.t3)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,ar.i)(this)};var ir=n(9133);(0,In.t3)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,ir.h)(this,e)},(0,In.t3)().prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,K.z)(this,e)},(0,In.t3)().prototype.less=function(e){return this.throwIfDisposed(),(0,Je.d)(this,e)};var or=n(9648);(0,In.t3)().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),(0,or.G)(this,e,t,n,r)};var ur=n(3888);(0,In.t3)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,ur.e)(this)};var cr=n(1510);(0,In.t3)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,cr.C)(this,e)};var lr=n(1391);(0,In.t3)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,lr.l)(this,e,t)},(0,In.t3)().prototype.log=function(){return this.throwIfDisposed(),(0,wt.c)(this)};var dr=n(7474);(0,In.t3)().prototype.log1p=function(){return this.throwIfDisposed(),(0,dr.K)(this)},(0,In.t3)().prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,Q.H)(this,e)},(0,In.t3)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,Lt.h)(this)};var pr=n(5750);(0,In.t3)().prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,pr.K)(this,e)};var hr=n(596);(0,In.t3)().prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,hr.e)(this,e)},(0,In.t3)().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,V.O)(this,e,t,n)};var fr=n(1174);(0,In.t3)().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),(0,fr._)(this,e,t,n,r)};var mr=n(3307);(0,In.t3)().prototype.max=function(e,t){return this.throwIfDisposed(),(0,mr.F)(this,e,t)},(0,In.t3)().prototype.maximum=function(e){return this.throwIfDisposed(),(0,xn.g)(this,e)};var gr=n(5130);(0,In.t3)().prototype.mean=function(e,t){return this.throwIfDisposed(),(0,gr.J)(this,e,t)};var yr=n(5735);(0,In.t3)().prototype.min=function(e,t){return this.throwIfDisposed(),(0,yr.V)(this,e,t)};var br=n(4513);(0,In.t3)().prototype.minimum=function(e){return this.throwIfDisposed(),(0,br.L)(this,e)};var xr=n(1483);(0,In.t3)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,xr.V)(this,e,t)};var vr=n(5228);(0,In.t3)().prototype.mod=function(e){return this.throwIfDisposed(),(0,vr.w)(this,e)},(0,In.t3)().prototype.mul=function(e){return this.throwIfDisposed(),(0,o.d)(this,e)},(0,In.t3)().prototype.neg=function(){return this.throwIfDisposed(),(0,d.W)(this)};var wr=n(3561);(0,In.t3)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,wr.K)(this,e,t,n)};var kr=n(6500);(0,In.t3)().prototype.notEqual=function(e){return this.throwIfDisposed(),(0,kr.Q)(this,e)};var Nr=n(6708);(0,In.t3)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,Nr.l)(this,e,t,n)};var Sr=n(7846);(0,In.t3)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,Sr.J)(this)},(0,In.t3)().prototype.pad=function(e,t){return this.throwIfDisposed(),(0,Kt.v)(this,e,t)};var Ir=n(5860);(0,In.t3)().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),(0,Ir.d)(this,e,t,n,r,s,a)},(0,In.t3)().prototype.pow=function(e){return this.throwIfDisposed(),(0,kt.s)(this,e)};var Tr=n(8151);(0,In.t3)().prototype.prelu=function(e){return this.throwIfDisposed(),(0,Tr.A)(this,e)};var Cr=n(9451);(0,In.t3)().prototype.prod=function(e,t){return this.throwIfDisposed(),(0,Cr.W)(this,e,t)};var Er=n(9036);(0,In.t3)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,Er.M)(this)};var Ar=n(7409);(0,In.t3)().prototype.relu=function(){return this.throwIfDisposed(),(0,Ar.U)(this)};var $r=n(3582);(0,In.t3)().prototype.relu6=function(){return this.throwIfDisposed(),(0,$r.b)(this)},(0,In.t3)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,x.X)(this,e.shape)},(0,In.t3)().prototype.reshape=function(e){return this.throwIfDisposed(),(0,x.X)(this,e)};var _r=n(3305);(0,In.t3)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,_r.I)(this,e,t,n)};var Rr=n(5098);(0,In.t3)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,Rr.j)(this,e,t,n)},(0,In.t3)().prototype.reverse=function(e){return this.throwIfDisposed(),(0,Ot.G)(this,e)};var Fr=n(3710);(0,In.t3)().prototype.rfft=function(){return this.throwIfDisposed(),(0,Fr.Q)(this)};var Dr=n(7809);(0,In.t3)().prototype.round=function(){return this.throwIfDisposed(),(0,Dr.N)(this)},(0,In.t3)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,$e.b)(this)};var Or=n(5503);(0,In.t3)().prototype.selu=function(){return this.throwIfDisposed(),(0,Or.U)(this)};var Mr=n(8678);(0,In.t3)().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),(0,Mr.U)(this,e,t,n,r,s,a)},(0,In.t3)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,Jt.X)(this)};var zr=n(4434);(0,In.t3)().prototype.sign=function(){return this.throwIfDisposed(),(0,zr.X)(this)},(0,In.t3)().prototype.sin=function(){return this.throwIfDisposed(),(0,le.O)(this)},(0,In.t3)().prototype.sinh=function(){return this.throwIfDisposed(),(0,pe.R)(this)},(0,In.t3)().prototype.slice=function(e,t){return this.throwIfDisposed(),(0,ct.t)(this,e,t)};var Br=n(682);(0,In.t3)().prototype.softmax=function(e){return this.throwIfDisposed(),(0,Br.X)(this,e)};var Lr=n(3694);(0,In.t3)().prototype.softplus=function(){return this.throwIfDisposed(),(0,Lr.W)(this)},(0,In.t3)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,U.f)(this,e,t)},(0,In.t3)().prototype.split=function(e,t){return this.throwIfDisposed(),(0,ee.V)(this,e,t)},(0,In.t3)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,h._)(this)},(0,In.t3)().prototype.square=function(){return this.throwIfDisposed(),(0,f.h)(this)};var Pr=n(5265);(0,In.t3)().prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,Pr.$)(this,e)};var Vr=n(9590);(0,In.t3)().prototype.squeeze=function(e){return this.throwIfDisposed(),(0,Vr.L)(this,e)},(0,In.t3)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof In.es?[this,e]:[this,...e];return(0,Fe.k)(n,t)},(0,In.t3)().prototype.step=function(e){return this.throwIfDisposed(),(0,u.N)(this,e)};var Wr=n(5158);(0,In.t3)().prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),(0,Wr.N)(this,e,t,n,r,s,a,i,o)},(0,In.t3)().prototype.sub=function(e){return this.throwIfDisposed(),(0,m.l)(this,e)},(0,In.t3)().prototype.sum=function(e,t){return this.throwIfDisposed(),(0,v.S)(this,e,t)};var Ur=n(1173);(0,In.t3)().prototype.tan=function(){return this.throwIfDisposed(),(0,Ur.O)(this)};var Gr=n(1869);(0,In.t3)().prototype.tanh=function(){return this.throwIfDisposed(),(0,Gr.A)(this)},(0,In.t3)().prototype.tile=function(e){return this.throwIfDisposed(),(0,_e.G)(this,e)},(0,In.t3)().prototype.toBool=function(){return this.throwIfDisposed(),(0,i.p)(this,"bool")},(0,In.t3)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,i.p)(this,"float32")},(0,In.t3)().prototype.toInt=function(){return this.throwIfDisposed(),(0,i.p)(this,"int32")};var Hr=n(3243);(0,In.t3)().prototype.topk=function(e,t){return this.throwIfDisposed(),(0,Hr.h)(this,e,t)},(0,In.t3)().prototype.transpose=function(e){return this.throwIfDisposed(),(0,ge.p)(this,e)};var jr=n(9608);(0,In.t3)().prototype.unique=function(e){return this.throwIfDisposed(),(0,jr.T)(this,e)},(0,In.t3)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,De.p)(this,e,t)},(0,In.t3)().prototype.unstack=function(e){return this.throwIfDisposed(),(0,bt.H)(this,e)},(0,In.t3)().prototype.where=function(e,t){return this.throwIfDisposed(),(0,Z.a)(e,this,t)},(0,In.t3)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,N.P)(this)};var qr=n(69);(0,s.env)().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),qr.kS);n(4079);n(5654);n(466),n(6275),n(7629);n(3066),n(539);var Xr=n(8891);n(5337),n(588),n(3146);Xr.ex;n(163);var Kr,Qr=n(9603),Zr=(n(6014),n(1653),n(7385)),Yr=n(13),Jr=n(6377);function es(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(as(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=es(e[a],t,n,r);s[a]=i}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function ts(e,t=rs){return ns(e,t)}function ns(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(as(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=ns(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function rs(e){return null===e?null:as(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function ss(e,t){const n=new Map;es(e,t,n);for(const r of Array.from(n.keys())){const e=n.get(r);if(s.util.isPromise(e)){const t=await e;n.set(r,t)}}return es(e,t,n)}function as(e){let t=!1;if(s.env().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:r}=n(4977);t=e instanceof r}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof s.Tensor)&&!(e instanceof Promise)&&!t)}function is(e){return es(e,os)}function os(e){return e instanceof s.Tensor?{value:e.clone(),recurse:!1}:as(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class us{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class cs extends us{constructor(){super(cs.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let r=0;r<n;r++)t[r]=this.get(this.wrap(this.begin+r));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function ls(e){return new fs(e)}function ds(e){return new ms(e)}function ps(e,t){return new Ts(e,t)}cs.INITIAL_CAPACITY=32;class hs{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new ks(this,e)}filter(e){return new vs(this,e)}map(e){return new ws(this,e)}mapAsync(e){return new Ns(this,e)}serialMapAsync(e){return new Ns(this,e).serial()}flatmap(e){return new Is(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new xs(this,e,t)}columnMajorBatch(e,t=!0,n=rs){return this.rowMajorBatch(e,t).map((e=>ts(e,n)))}concatenate(e,t){return new Ts(ls([this,e]),t)}take(e){return e<0||null==e?this:new bs(this,e)}skip(e){return e<0||null==e?this:new ys(this,e)}prefetch(e){return new Es(this,e)}shuffle(e,t){return new As(this,e,t)}serial(){return new gs(this)}}class fs extends hs{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:is(e),done:!1}}}class ms extends hs{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class gs extends hs{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class ys extends hs{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;s.dispose(e.value)}return this.upstream.next()}}class bs extends hs{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class xs extends hs{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class vs extends hs{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;s.dispose(e.value)}}}class ws extends hs{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.tensor_util.getTensorsInContainer(n);for(const a of t)s.tensor_util.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class ks extends hs{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Ns extends hs{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.tensor_util.getTensorsInContainer(e.value),n=await this.transform(e.value),r=s.tensor_util.getTensorsInContainer(n);for(const a of t)s.tensor_util.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class Ss extends hs{constructor(){super(),this.outputQueue=new cs,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Is extends Ss{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=s.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.tensor_util.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const a of t)s.tensor_util.isTensorInList(a,r)||a.dispose();return!0}}class Ts extends hs{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Kr||(Kr={}));class Cs extends hs{constructor(e,t=Kr.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const r=await ss(this.iterators,(function(e){if(e instanceof hs){return{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}}return{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Kr.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Kr.SHORTEST:return{value:null,done:!0};case Kr.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class Es extends hs{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new us(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class As extends Es{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Jr.alea(n||s.util.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class $s{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return s.util.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),_s((async()=>(await n.iterator()).columnMajorBatch(e,t,Ds)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,_s((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,_s((async()=>(await t.iterator()).filter((t=>s.tidy((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return _s((async()=>(await t.iterator()).map((t=>s.tidy((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return _s((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return _s((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,_s((async()=>ps(ds((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,_s((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,a=Jr.alea(t||s.util.now().toString());return _s((async()=>{let t=a.int32();return n&&(t+=a.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,_s((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function _s(e,t=null){return new class extends $s{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Rs(e){return _s((async()=>ls(e)),e.length)}function Fs(e){if(!as(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return _s((async()=>function(e,t=Kr.FAIL){return new Cs(e,t)}(await ss(e,(e=>{if(e instanceof $s)return{value:e.iterator(),recurse:!1};if(as(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),Kr.SHORTEST)),t)}function Ds(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof s.Tensor||s.util.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof s.Tensor?s.stack(e):s.tensor(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}$s.MAX_BUFFER_SIZE=1e4;class Os extends $s{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const Ms='"',zs=Symbol("out"),Bs=Symbol("field"),Ls=Symbol("quote"),Ps=Symbol("quoteafterquote"),Vs=Symbol("quoteinquote");class Ws extends $s{async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&s.util.assert(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(s.util.assert(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const r of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(r))throw new Error('The key "'+r+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new Os(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(s.util.assert(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[s];let u=null;if(""===o)if(i&&void 0!==i.default)u=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);u=void 0}else{const e=Number(o);if(isNaN(e))u=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":default:u=e;break;case"int32":u=Math.floor(e);break;case"bool":u=this.getBoolean(o)}else u=e}i&&i.isLabel?r[a]=u:n[a]=u}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let r=0;const s=e.length;let a=zs;for(let i=0;i<s;i++)switch(a){case zs:switch(e.charAt(i)){case Ms:r=i+1,a=Ls;break;case this.delimiter:if(r=i+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=zs;break;default:a=Bs,r=i}break;case Bs:if(e.charAt(i)===this.delimiter)n.push(e.substring(r,i)),a=zs,r=i+1;break;case Ls:if(e.charAt(i)===Ms)a=Ps;break;case Ps:switch(e.charAt(i)){case this.delimiter:n.push(e.substring(r,i-1)),a=zs,r=i+1;break;case Ms:a=Ls;break;default:a=Vs}break;case Vs:if(e.charAt(i)===Ms)a=Ls}if(a===Ps?n.push(e.substring(r,s-1)):n.push(e.substring(r)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class Us extends hs{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!(0,s.env)().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new Us(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(n){throw new Error(`Error thrown while initializing video stream: ${n.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((r=>{const s=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,r)=>n.set(e,r*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(s.util.sizeFromShape(t));return n.set(e,n.length-e.length),(0,s.tensor)(n,t)}}class Gs extends hs{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=(0,s.tensor1d)([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2,a=n+e,i=t+r;this.cropBox=(0,s.tensor2d)([r,n,i,a],[1,4])}else this.cropBox=(0,s.tensor2d)([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!(0,s.env)().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new Gs(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&s.util.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=s.browser.fromPixels(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return(0,s.tidy)((()=>{const t=(0,s.expandDims)((0,s.cast)(e,"float32"),0);let n;n=s.image.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return(0,s.reshape)(n,r.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class Hs{}class js extends hs{split(e){return new qs(this,e)}}class qs extends js{constructor(e,t){super(),this.upstream=e,this.impl=new Xs(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Xs extends Ss{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const n of t.slice(0,-1))this.outputQueue.push(n);return this.carryover=t[t.length-1],!0}}class Ks extends hs{decodeUTF8(){return new Qs(this)}}class Qs extends js{constructor(e){super(),this.upstream=e,this.impl=new Zs(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Zs extends Ss{constructor(e){if(super(),this.upstream=e,(0,s.env)().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(1601);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=(0,s.env)().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class Ys extends Ks{constructor(e,t={}){super(),this.file=e,this.options=t,s.util.assert(e instanceof Uint8Array||!!(0,s.env)().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n}));return{value:await e,done:!1}}}const Js=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function ea(e){return"string"==typeof e&&"file://"===e.slice(0,7)}class ta extends Hs{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(ea(this.input)&&(0,s.env)().get("IS_NODE")){const e=n(7792);this.input=e.readFileSync(this.input.slice(7))}return new Ys(this.input,this.options)}}class na extends Hs{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return ea(this.url)?new ta(this.url,this.fileOptions).iterator():async function(e,t={},n){let r,a;"string"==typeof e?r=e:(r=e.url,a=Js(e));const i=await(n||s.util.fetch)(r,a);if(i.ok){const e=new Uint8Array(await i.arrayBuffer());return new Ys(e,t)}throw new Error(i.statusText)}(this.url,this.fileOptions)}}function ra(e,t={}){return new Ws(new na(e),t)}function sa(e){const t=ds(e);return _s((async()=>t))}function aa(e){return _s((async()=>{const t=await e();return ds((()=>t.next()))}))}async function ia(e,t){return Gs.create(e,t)}async function oa(e){return Us.create(e)}const ua="4.15.0";var ca=n(8166);const la=s.kernel_impls.whereImpl;class da extends s.KernelBackend{nextDataId(){return da.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new s.DataStorage(this,(0,s.engine)())}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,s.env)().get("IS_NODE")&&s.backend_util.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&s.util.isString(n[0])){const a=n.map((e=>s.util.encodeString(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return s.backend_util.mergeRealAndImagArrays(e,t)}return s.util.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>s.util.decodeString(e)));return(0,s.buffer)(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,s.buffer)(e.shape,e.dtype,t)}makeOutput(e,t,n){return(0,s.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=s.util.now();e();return{kernelMs:s.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){(0,ca.H)([e],"where");const t=this.readSync(e.dataId);return la(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}da.nextDataId=0;(0,s.registerBackend)("cpu",(()=>new da),1);var pa=n(6738);const ha=(0,pa.A)(s.Elu,(e=>e>=0?e:Math.exp(e)-1)),fa={kernelName:s.Elu,backendName:"cpu",kernelFunc:ha};var ma=n(1775);function ga(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:i}=r;(0,ca.H)([a],"leakyRelu");const o=s.util.sizeFromShape(a.shape),u=n.data.get(a.dataId).values,c=s.util.getTypedArrayFromDType("float32",o);for(let s=0;s<u.length;s++)c[s]=u[s]<0?i*u[s]:u[s];return n.makeTensorInfo(a.shape,"float32",c)}const ya={kernelName:s.LeakyRelu,backendName:"cpu",kernelFunc:ga};var ba=n(3533);const xa=(0,ba.b)(((e,t)=>e<0?t*e:e));function va(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;(0,ca.H)([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=xa(r.shape,s.shape,a,i,"float32");return n.makeTensorInfo(u,"float32",o)}const wa={kernelName:s.Prelu,backendName:"cpu",kernelFunc:va},ka=(0,pa.A)(s.Relu,(e=>Math.max(0,e))),Na={kernelName:s.Relu,backendName:"cpu",kernelFunc:ka},Sa=(0,pa.A)(s.Relu6,(e=>Math.min(Math.max(0,e),6))),Ia={kernelName:s.Relu6,backendName:"cpu",kernelFunc:Sa};var Ta=n(108);function Ca(e,t,n,r,s){if("linear"===n)return(0,ma.y)({inputs:{x:t},backend:e});if("relu"===n)return ka({inputs:{x:t},backend:e});if("elu"===n)return ha({inputs:{x:t},backend:e});if("relu6"===n)return Sa({inputs:{x:t},backend:e});if("prelu"===n)return va({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return ga({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return(0,Ta.XD)({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var Ea=n(2779);function Aa(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:i}=r,o=s.util.sizeFromShape(a.shape),u=s.util.inferFromImplicitShape(i,o),c=s.util.sizeFromShape(u);s.util.assert(o===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const l=n.data.get(a.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:a.dataId,shape:u,dtype:a.dtype}}const $a={kernelName:s.Reshape,backendName:"cpu",kernelFunc:Aa};function _a(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:i}=t,{transposeA:o,transposeB:u}=r;(0,ca.H)([a,i],"matMul");const c=a.shape.length,l=i.shape.length,d=o?a.shape[c-2]:a.shape[c-1],p=u?i.shape[l-1]:i.shape[l-2],h=o?a.shape[c-1]:a.shape[c-2],f=u?i.shape[l-2]:i.shape[l-1],m=a.shape.slice(0,-2),g=i.shape.slice(0,-2),y=s.util.sizeFromShape(m),b=s.util.sizeFromShape(g),x=s.broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0,-2),i.shape.slice(0,-2)).concat([h,f]);s.util.assert(d===p,(()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${o} and transposeB=${u} must match.`));const v=u?[b,f,p]:[b,p,f],w=Aa({inputs:{x:a},backend:n,attrs:{shape:o?[y,d,h]:[y,h,d]}}),k=Aa({inputs:{x:i},backend:n,attrs:{shape:v}}),N=o?w.shape[1]:w.shape[2],S=o?w.shape[2]:w.shape[1],I=u?k.shape[1]:k.shape[2],T=Math.max(y,b),C=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,A=s.util.computeStrides(w.shape),$=s.util.computeStrides(k.shape),[_,R,F]=o?[A[0],1,A[1]]:[A[0],A[1],1],[D,O,M]=u?[1,$[1],$[0]]:[$[1],1,$[0]],z=S*I,B=(0,s.buffer)([T,S,I],w.dtype),L=B.values,P=n.blockSize;for(let s=0;s<T;s++){const e=s%y,t=s%b;for(let n=0;n<S;n+=P){const r=Math.min(n+P,S);for(let a=0;a<I;a+=P){const i=Math.min(a+P,I);for(let o=0;o<N;o+=P){const u=Math.min(o+P,N);for(let c=n;c<r;c++)for(let n=a;n<i;n++){let r=0;for(let s=o;s<u;s++){r+=C[e*_+c*R+s*F]*E[s*D+n*O+t*M]}L[s*z+(c*I+n)]+=r}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(x,B.dtype,B.values)}const Ra={kernelName:s.BatchMatMul,backendName:"cpu",kernelFunc:_a};const Fa={kernelName:s._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:d}=r;let p,h,f;const m=[];p=_a({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:c},backend:n}),i&&(h=(0,Ea.IH)({inputs:{a:p,b:i},backend:n}),m.push(p),p=h),l&&(f=Ca(n,p,l,o,d),m.push(p),p=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return p}};var Da=n(3628);const Oa=(0,pa.A)(s.Acos,(e=>Math.acos(e))),Ma={kernelName:s.Acos,backendName:"cpu",kernelFunc:Oa},za=(0,pa.A)(s.Acosh,(e=>Math.acosh(e))),Ba={kernelName:s.Acosh,backendName:"cpu",kernelFunc:za};const La={kernelName:s.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;(0,ca.H)(t,"addN");const a=r.map((e=>n.data.get(e.dataId).values)),i=(0,s.buffer)(r[0].shape,r[0].dtype),o=i.values;for(let s=0;s<r.length;s++){const e=a[s];for(let t=0;t<o.length;t++)o[t]+=e[t]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var Pa=n(4802);const Va={kernelName:s.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;(0,ca.H)(a,"all");const u=s.util.parseAxisParam(i,a.shape);let c=u;const l=s.backend_util.getAxesPermutation(c,a.shape.length);let d=a;null!=l&&(d=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:l}}),c=s.backend_util.getInnerMostAxes(c.length,a.shape.length)),s.backend_util.assertAxesAreInnerMostDims("all",c,d.shape.length);const[p,h]=s.backend_util.computeOutAndReduceShapes(d.shape,c),f=s.util.sizeFromShape(h),m=s.util.makeZerosTypedArray(s.util.sizeFromShape(p),d.dtype),g=n.data.get(d.dataId).values;for(let s=0;s<m.length;++s){const e=s*f;let t=g[e];for(let n=0;n<f;++n){const r=g[e+n];t=t&&r}m[s]=t}null!=l&&n.disposeIntermediateTensorInfo(d);const y=n.makeTensorInfo(p,d.dtype,m);if(o){const e=Aa({inputs:{x:y},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(p,u)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Wa={kernelName:s.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;(0,ca.H)(a,"any");const u=s.util.parseAxisParam(i,a.shape);let c=u;const l=s.backend_util.getAxesPermutation(c,a.shape.length);let d=a;null!=l&&(d=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:l}}),c=s.backend_util.getInnerMostAxes(c.length,a.shape.length)),s.backend_util.assertAxesAreInnerMostDims("any",c,d.shape.length);const[p,h]=s.backend_util.computeOutAndReduceShapes(d.shape,c),f=s.util.sizeFromShape(h),m=s.util.makeZerosTypedArray(s.util.sizeFromShape(p),d.dtype),g=n.data.get(d.dataId).values;for(let s=0;s<m.length;++s){const e=s*f;let t=g[e];for(let n=0;n<f;++n){const r=g[e+n];t=t||r}m[s]=t}null!=l&&n.disposeIntermediateTensorInfo(d);const y=n.makeTensorInfo(p,d.dtype,m);if(o){const e=Aa({inputs:{x:y},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(p,u)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Ua={kernelName:s.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;(0,ca.H)(a,"argMax");let o=s.util.parseAxisParam(i,a.shape);const u=s.backend_util.getAxesPermutation(o,a.shape.length);let c=a;const l=[];null!=u&&(c=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:u}}),l.push(c),o=s.backend_util.getInnerMostAxes(o.length,c.shape.length)),o=[o[0]],s.backend_util.assertAxesAreInnerMostDims("argMax",o,c.shape.length);const[d,p]=s.backend_util.computeOutAndReduceShapes(c.shape,o),h=s.util.sizeFromShape(d),f=s.util.makeZerosTypedArray(h,"int32"),m=s.util.sizeFromShape(p),g=n.data.get(c.dataId).values;for(let s=0;s<f.length;++s){const e=s*m;let t=g[e],n=0;for(let r=0;r<m;++r){const s=g[e+r];s>t&&(t=s,n=r)}f[s]=n}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(d,"int32",f)}};const Ga={kernelName:s.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;(0,ca.H)(a,"argMin");let o=s.util.parseAxisParam(i,a.shape);const u=s.backend_util.getAxesPermutation(o,a.shape.length);let c=a;const l=[];null!=u&&(c=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:u}}),l.push(c),o=s.backend_util.getInnerMostAxes(o.length,c.shape.length)),o=[o[0]],s.backend_util.assertAxesAreInnerMostDims("argMin",o,c.shape.length);const[d,p]=s.backend_util.computeOutAndReduceShapes(c.shape,o),h=s.util.sizeFromShape(d),f=s.util.makeZerosTypedArray(h,"int32"),m=s.util.sizeFromShape(p),g=n.data.get(c.dataId).values;for(let s=0;s<f.length;++s){const e=s*m;let t=g[e],n=0;for(let r=0;r<m;++r){const s=g[e+r];s<t&&(t=s,n=r)}f[s]=n}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(d,"int32",f)}},Ha=(0,pa.A)(s.Asin,(e=>Math.asin(e))),ja={kernelName:s.Asin,backendName:"cpu",kernelFunc:Ha},qa=(0,pa.A)(s.Asinh,(e=>Math.asinh(e))),Xa={kernelName:s.Asinh,backendName:"cpu",kernelFunc:qa},Ka=(0,pa.A)(s.Atan,(e=>Math.atan(e))),Qa={kernelName:s.Atan,backendName:"cpu",kernelFunc:Ka};var Za=n(6205);const Ya=(0,ba.b)(((e,t)=>Math.atan2(e,t))),Ja=(0,Za.j)(s.Atan2,Ya),ei={kernelName:s.Atan2,backendName:"cpu",kernelFunc:Ja},ti=(0,pa.A)(s.Atanh,(e=>Math.atanh(e))),ni={kernelName:s.Atanh,backendName:"cpu",kernelFunc:ti};function ri(e,t,n,r,a,i){const o=a.strideHeight,u=a.strideWidth,c=a.dilationHeight,l=a.dilationWidth,d=a.effectiveFilterHeight,p=a.effectiveFilterWidth,h=a.padInfo.top,f=a.padInfo.left,m="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,s.buffer)(a.outShape,n),y=g.values,b=a.outShape[1]*a.outShape[2]*a.outShape[3],x=a.outShape[2]*a.outShape[3],v=a.outShape[3];for(let s=0;s<a.batchSize;++s){const t=s*b,n=s*r[0];for(let s=0;s<a.inChannels;++s)for(let g=0;g<a.outHeight;++g){const b=g*o-h,w=Math.max(0,b),k=Math.min(a.inHeight,d+b),N=t+g*x;for(let t=0;t<a.outWidth;++t){const o=t*u-f,d=Math.max(0,o),h=Math.min(a.inWidth,p+o);let g=m,b=0,x=0;for(let t=w;t<k;t+=c){const a=n+t*r[1];for(let t=d;t<h;t+=l){const n=e[a+t*r[2]+s];"max"===i&&n>g?g=n:"avg"===i&&(b+=n,x++)}if(isNaN(g))break}y[N+t*v+s]="avg"===i?b/x:g}}}return g}function si(e,t,n,r,a=!1,i=!1){const o=(0,s.buffer)(r.outShape,"int32"),u=r.strideHeight,c=r.strideWidth,l=r.dilationHeight,d=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,f=r.padInfo.top,m=r.padInfo.left,g=(0,s.buffer)(t,n,e);for(let s=0;s<r.batchSize;++s)for(let e=0;e<r.inChannels;++e)for(let t=0;t<r.outHeight;++t){const n=t*u-f;let y=n;for(;y<0;)y+=l;const b=Math.min(r.inHeight,p+n);for(let u=0;u<r.outWidth;++u){const p=u*c-m;let f=p;for(;f<0;)f+=d;const x=Math.min(r.inWidth,h+p);let v=Number.NEGATIVE_INFINITY,w=-1;for(let t=y;t<b;t+=l){const o=t-n;for(let n=f;n<x;n+=d){const u=n-p,c=g.get(s,t,n,e);c>v&&(v=c,w=a?i?((s*r.inHeight+t)*r.inWidth+n)*r.inChannels+e:(t*r.inWidth+n)*r.inChannels+e:o*h+u)}}o.set(w,s,t,u,e)}}return o}function ai(e,t,n,r,a,i){const o=a.strideDepth,u=a.strideHeight,c=a.strideWidth,l=a.dilationDepth,d=a.dilationHeight,p=a.dilationWidth,h=a.effectiveFilterDepth,f=a.effectiveFilterHeight,m=a.effectiveFilterWidth,g=a.padInfo.front,y=a.padInfo.top,b=a.padInfo.left,x="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=(0,s.buffer)(a.outShape,n),w=v.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],N=a.outShape[2]*a.outShape[3]*a.outShape[4],S=a.outShape[3]*a.outShape[4],I=a.outShape[4];for(let s=0;s<a.batchSize;++s){const t=s*k,n=s*r[0];for(let s=0;s<a.inChannels;++s)for(let v=0;v<a.outDepth;++v){const k=v*o-g;let T=k;for(;T<0;)T+=l;const C=Math.min(a.inDepth,h+k),E=t+v*N;for(let t=0;t<a.outHeight;++t){const o=t*u-y;let h=o;for(;h<0;)h+=d;const g=Math.min(a.inHeight,f+o),v=E+t*S;for(let t=0;t<a.outWidth;++t){const o=t*c-b;let u=o;for(;u<0;)u+=p;const f=Math.min(a.inWidth,m+o),y=v+t*I;let k=x,N=0,S=0;for(let t=T;t<C;t+=l){const a=n+t*r[1];for(let t=h;t<g;t+=d){const n=a+t*r[2];for(let t=u;t<f;t+=p){const a=e[n+t*r[3]+s];if("max"===i&&a>k?k=a:"avg"===i&&(N+=a,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[y+s]="avg"===i?N/Math.max(S,1):k}}}}return v}const ii={kernelName:s.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;(0,ca.H)(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=s.backend_util.computePool2DInfo(a.shape,i,o,1,u,c);let d;if(1===l.filterWidth&&1===l.filterHeight&&s.util.arraysEqual(l.inShape,l.outShape))d=(0,ma.y)({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=s.util.computeStrides(a.shape),r=ri(e,a.shape,a.dtype,t,l,"avg");d=n.makeTensorInfo(l.outShape,a.dtype,r.values)}return d}};const oi={kernelName:s.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:c,dataFormat:l}=r;(0,ca.H)(a,"avgPool3d");const d=s.backend_util.computePool3DInfo(a.shape,i,o,1,u,c,l),p=ai(n.data.get(a.dataId).values,a.shape,a.dtype,s.util.computeStrides(a.shape),d,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const ui={kernelName:s.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i}=t,{filterSize:o,strides:u,pad:c,dimRoundingMode:l}=r;(0,ca.H)([a,i],"avgPool3DGrad");const d=s.backend_util.computePool3DInfo(i.shape,o,u,1,c,l),p=d.strideDepth,h=d.strideHeight,f=d.strideWidth,m=d.filterDepth,g=d.filterHeight,y=d.filterWidth,b=d.dilationDepth,x=d.dilationHeight,v=d.dilationWidth,w=d.effectiveFilterDepth,k=d.effectiveFilterHeight,N=d.effectiveFilterWidth,S=w-1-d.padInfo.front,I=N-1-d.padInfo.left,T=k-1-d.padInfo.top,C=(0,s.buffer)(i.shape,"float32"),E=1/(m*g*y),A=n.bufferSync(a);for(let s=0;s<d.batchSize;++s)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inDepth;++t)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const a=t-S,i=n-T,o=r-I;let u=0;for(let t=0;t<w;t+=b){const n=(a+t)/p;if(!(n<0||n>=d.outDepth||Math.floor(n)!==n))for(let t=0;t<k;t+=x){const r=(i+t)/h;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let t=0;t<N;t+=v){const a=(o+t)/f;if(a<0||a>=d.outWidth||Math.floor(a)!==a)continue;u+=A.get(s,n,r,a,e)}}}C.set(u*E,s,t,n,r,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const ci={kernelName:s.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i}=t,o=i;(0,ca.H)([a,i],"avgPoolGrad");const{filterSize:u,strides:c,pad:l}=r,d=s.backend_util.computePool2DInfo(o.shape,u,c,1,l),p=d.strideHeight,h=d.strideWidth,f=d.filterHeight,m=d.filterWidth,g=d.dilationHeight,y=d.dilationWidth,b=d.effectiveFilterHeight,x=d.effectiveFilterWidth,v=x-1-d.padInfo.left,w=b-1-d.padInfo.top,k=(0,s.buffer)(o.shape,"float32"),N=1/(f*m),S=n.data.get(a.dataId).values,I=(0,s.buffer)(a.shape,"float32",S);for(let s=0;s<d.batchSize;++s)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inHeight;++t)for(let n=0;n<d.inWidth;++n){const r=t-w,a=n-v;let i=0;for(let t=0;t<b;t+=g){const n=(r+t)/p;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let t=0;t<x;t+=y){const r=(a+t)/h;if(r<0||r>=d.outWidth||Math.floor(r)!==r)continue;i+=I.get(s,n,r,e)}}k.set(i*N,s,t,n,e)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const li={kernelName:s.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,scale:i,offset:o,mean:u,variance:c}=t;s.util.assert(u.shape.length===c.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),s.util.assert(null==o||u.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),s.util.assert(null==i||u.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),(0,ca.H)([a,u,c,i,o],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const d=n.data.get(a.dataId).values,p=n.data.get(u.dataId).values,h=n.data.get(c.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(d.length),y=m.length,b=f.length,x=h.length,v=p.length;let w=0,k=0,N=0,S=0;for(let s=0;s<d.length;++s)g[s]=m[w++]+(d[s]-p[k++])*f[N++]/Math.sqrt(h[S++]+l),w>=y&&(w=0),k>=v&&(k=0),N>=b&&(N=0),S>=x&&(S=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};var di=n(2578);const pi={kernelName:s.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,crops:o}=r;(0,ca.H)([a],"batchToSpaceND");const u=i.reduce(((e,t)=>e*t)),c=s.backend_util.getReshaped(a.shape,i,u),l=s.backend_util.getPermuted(c.length,i.length),d=s.backend_util.getReshapedPermuted(a.shape,i,u),p=s.backend_util.getSliceBeginCoords(o,i.length),h=s.backend_util.getSliceSize(d,o,i.length),f=Aa({inputs:{x:a},backend:n,attrs:{shape:c}}),m=(0,Pa.p)({inputs:{x:f},backend:n,attrs:{perm:l}}),g=Aa({inputs:{x:m},backend:n,attrs:{shape:d}}),y=(0,di.tP)({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};var hi=n(8607);const fi={kernelName:s.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=(0,hi.W)(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,c)}};var mi=n(5003);const gi={kernelName:s.BroadcastArgs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,u=s.backend_util.assertAndGetBroadcastShape(Array.from(i),Array.from(o));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}};var yi=n(9258),bi=n(4769);const xi=(0,pa.A)(s.ClipByValue,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),vi={kernelName:s.ClipByValue,backendName:"cpu",kernelFunc:xi};var wi=n(6961);const ki={kernelName:s.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(s.util.sizeFromShape(t.shape)),a=n.data.get(t.dataId),i=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,u=n.data.get(i.dataId).values,c=n.data.get(o.dataId).values;for(let s=0;s<u.length;s++){const e=u[s],t=c[s];r[s]=Math.hypot(e,t)}return n.makeOutput(r,t.shape,"float32")}};var Ni=n(8926);function Si(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Ii={kernelName:s.Imag,backendName:"cpu",kernelFunc:Si};var Ti=n(2186);function Ci(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,i=s.util.parseAxisParam(a,t[0].shape)[0],o=t.map((e=>e.shape));s.backend_util.assertParamsConsistent(o,i);let u=s.backend_util.computeOutShape(t.map((e=>e.shape)),i);if(0===s.util.sizeFromShape(u))return n.makeTensorInfo(u,t[0].dtype,[]);const c=t.filter((e=>s.util.sizeFromShape(e.shape)>0));if(1===c.length)return(0,ma.y)({inputs:{x:c[0]},backend:n});if("complex64"===c[0].dtype){const e=c.map((e=>(0,Ti.k)({inputs:{input:e},backend:n}))),t=c.map((e=>Si({inputs:{input:e},backend:n}))),r=Ci({inputs:e,backend:n,attrs:{axis:i}}),s=Ci({inputs:t,backend:n,attrs:{axis:i}}),a=(0,wi.P)({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),a}const l=c.map((e=>{const t=s.util.sizeFromShape(e.shape.slice(i));return Aa({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),d=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));u=s.backend_util.computeOutShape(l.map((e=>e.shape)),1);const p=1===l[0].shape[0],h=(0,Ni.j)(d,u,t[0].dtype,p),f=s.backend_util.computeOutShape(c.map((e=>e.shape)),i),m=n.makeTensorInfo(f,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),m}const Ei={kernelName:s.Concat,backendName:"cpu",kernelFunc:Ci};function Ai(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dataFormat:c,dilations:l,dimRoundingMode:d}=r;(0,ca.H)([a,i],"conv2d");const p=s.backend_util.convertConv2DDataFormat(c),h=s.backend_util.computeConv2DInfo(a.shape,i.shape,o,l,u,d,!1,p),f=h.filterHeight,m=h.filterWidth,g=h.dilationHeight,y=h.dilationWidth,b=h.padInfo.left,x=h.padInfo.top,v="channelsLast"===h.dataFormat,w=new s.TensorBuffer(h.outShape,a.dtype),k=s.util.computeStrides(a.shape),N=s.util.computeStrides(i.shape),S=k[0],I=v?k[1]:k[2],T=v?k[2]:1,C=v?1:k[1],E=w.strides[0],A=v?w.strides[1]:w.strides[2],$=v?w.strides[2]:1,_=v?1:w.strides[1],R=n.data.get(a.dataId).values,F=n.data.get(i.dataId).values,D=w.values;for(let s=0;s<h.batchSize;++s){const e=s*S,t=s*E;for(let n=0;n<h.outHeight;++n){const r=t+n*A,s=n*h.strideHeight-x;for(let t=0;t<f;++t){const n=s+t*g;if(n<0||n>=h.inHeight)continue;const a=t*N[0],i=e+n*I;for(let e=0;e<h.outWidth;++e){const t=r+e*$,n=e*h.strideWidth-b;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=h.inWidth)continue;const s=i+r*T;let o=a+e*N[1];for(let e=0;e<h.inChannels;++e){const n=R[s+e*C];for(let e=0;e<h.outChannels;++e)D[t+e*_]+=n*F[o+e];o+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const $i={kernelName:s.Conv2D,backendName:"cpu",kernelFunc:Ai};const _i={kernelName:s.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,pad:u,dataFormat:c,dimRoundingMode:l,filterShape:d}=r;(0,ca.H)([a,i],"conv2dBackpropFilter");const p=s.backend_util.convertConv2DDataFormat(c),h=s.backend_util.computeConv2DInfo(a.shape,d,o,1,u,l,!1,p),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=h,b="channelsLast"===h.dataFormat,x=new s.TensorBuffer(h.filterShape,"float32"),v=h.padInfo.left,w=h.padInfo.top,k=n.data.get(a.dataId).values,N=n.data.get(i.dataId).values,S=new s.TensorBuffer(a.shape,a.dtype,k),I=new s.TensorBuffer(i.shape,i.dtype,N);for(let s=0;s<g;++s){const e=Math.max(0,Math.ceil((w-s)/f)),t=Math.min(h.outHeight,(h.inHeight+w-s)/f);for(let n=0;n<y;++n){const r=Math.max(0,Math.ceil((v-n)/m)),a=Math.min(h.outWidth,(h.inWidth+v-n)/m);for(let i=0;i<h.inChannels;++i)for(let o=0;o<h.outChannels;++o){let u=0;for(let c=0;c<h.batchSize;++c)for(let l=e;l<t;++l){const e=s+l*f-w;for(let t=r;t<a;++t){const r=n+t*m-v;u+=b?S.get(c,e,r,i)*I.get(c,l,t,o):S.get(c,i,e,r)*I.get(c,o,l,t)}}x.set(u,s,n,i,o)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}};const Ri={kernelName:s.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{inputShape:o,strides:u,pad:c,dataFormat:l,dimRoundingMode:d}=r;(0,ca.H)([a,i],"conv2dBackpropInput");const p=s.util.computeStrides(i.shape),h=s.util.computeStrides(a.shape);let f=s.backend_util.convertConv2DDataFormat(l);const m=s.backend_util.computeConv2DInfo(o,i.shape,u,1,c,d,!1,f),g=new s.TensorBuffer(m.inShape,"float32"),y=g.values,b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,[v,w,k]=p,{batchSize:N,filterHeight:S,filterWidth:I,inChannels:T,inHeight:C,inWidth:E,outChannels:A,outHeight:$,outWidth:_,strideHeight:R,strideWidth:F}=m;f=m.dataFormat;const D=S-1-m.padInfo.top,O=I-1-m.padInfo.left,M="channelsLast"===f,z=g.strides[0],B=M?g.strides[1]:g.strides[2],L=M?g.strides[2]:1,P=M?1:g.strides[1],V=h[0],W=M?h[1]:h[2],U=M?h[2]:1,G=M?1:h[1];for(let s=0;s<N;++s)for(let e=0;e<T;++e)for(let t=0;t<C;++t){const n=t-D,r=Math.max(0,Math.ceil(n/R)),a=Math.min($,(S+n)/R);for(let i=0;i<E;++i){const o=i-O,u=Math.max(0,Math.ceil(o/F)),c=Math.min(_,(I+o)/F);let l=0;for(let t=r;t<a;++t){const r=t*R-n;for(let n=u;n<c;++n){const a=V*s+W*t+U*n,i=v*(S-1-r)+w*(I-1-(n*F-o))+k*e;for(let e=0;e<A;++e){l+=b[a+G*e]*x[i+e]}}}y[z*s+B*t+L*i+P*e]=l}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const Fi={kernelName:s.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:c}=r;(0,ca.H)([a,i],"conv3d");const l=s.backend_util.computeConv3DInfo(a.shape,i.shape,o,c,u),{filterDepth:d,filterHeight:p,filterWidth:h,dilationDepth:f,dilationHeight:m,dilationWidth:g,padInfo:y}=l,b=y.front,x=y.left,v=y.top,w=new s.TensorBuffer(l.outShape,a.dtype),k=n.data.get(a.dataId).values,N=n.data.get(i.dataId).values,S=w.values,I=s.util.computeStrides(a.shape),T=s.util.computeStrides(i.shape);for(let s=0;s<l.batchSize;++s){const e=s*I[0],t=s*w.strides[0];for(let n=0;n<l.outDepth;++n){const r=t+n*w.strides[1],s=n*l.strideDepth-b;for(let t=0;t<d;++t){const n=s+t*f;if(n<0||n>=l.inDepth)continue;const a=t*T[0],i=e+n*I[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-v;for(let e=0;e<p;++e){const r=n+e*m;if(r<0||r>=l.inHeight)continue;const s=a+e*T[1],o=i+r*I[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-x;for(let e=0;e<h;++e){const t=r+e*g;if(t<0||t>=l.inWidth)continue;const a=s+e*T[2],i=o+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=k[i+e];for(let e=0;e<l.outChannels;++e)S[n+e]+=t*N[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Di={kernelName:s.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,pad:u,filterShape:c}=r;(0,ca.H)([a,i],"conv3dBackpropFilterV2");const l=s.util.computeStrides(a.shape),d=s.util.computeStrides(i.shape),p=s.backend_util.computeConv3DInfo(a.shape,c,o,1,u),h=p.strideDepth,f=p.strideHeight,m=p.strideWidth,g=p.filterDepth,y=p.filterHeight,b=p.filterWidth,x=new s.TensorBuffer(p.filterShape,"float32"),v=x.values,[w,k,N,S]=x.strides,I=n.data.get(i.dataId).values,[T,C,E,A]=d,$=n.data.get(a.dataId).values,[_,R,F,D]=l,O=p.padInfo.front,M=p.padInfo.left,z=p.padInfo.top;for(let s=0;s<g;++s){const e=Math.max(0,Math.ceil((O-s)/h)),t=Math.min(p.outDepth,(p.inDepth+O-s)/h),n=s*w;for(let r=0;r<y;++r){const a=Math.max(0,Math.ceil((z-r)/f)),i=Math.min(p.outHeight,(p.inHeight+z-r)/f),o=r*k+n;for(let n=0;n<b;++n){const u=Math.max(0,Math.ceil((M-n)/m)),c=Math.min(p.outWidth,(p.inWidth+M-n)/m),l=n*N+o;for(let o=0;o<p.inChannels;++o){const d=o*S+l;for(let l=0;l<p.outChannels;++l){let g=0;for(let d=0;d<p.batchSize;++d){const p=d*_,y=d*T;for(let d=e;d<t;++d){const e=(s+d*h-O)*R+p,t=d*C+y;for(let s=a;s<i;++s){const a=(r+s*f-z)*F+e,i=s*E+t;for(let e=u;e<c;++e){const t=e*A+i;g+=$[(n+e*m-M)*D+a+o]*I[t+l]}}}}v[d+l]=g}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}};const Oi={kernelName:s.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{pad:o,strides:u,inputShape:c}=r;(0,ca.H)([a],"conv3dBackpropInputV2");const l=s.util.computeStrides(a.shape),d=s.util.computeStrides(i.shape),p=s.backend_util.computeConv3DInfo(c,i.shape,u,1,o),h=new s.TensorBuffer(p.inShape,"float32"),f=h.values,[m,g,y,b]=h.strides,x=n.data.get(a.dataId).values,[v,w,k,N]=l,S=n.data.get(i.dataId).values,[I,T,C,E]=d,{batchSize:A,filterDepth:$,filterHeight:_,filterWidth:R,inChannels:F,inDepth:D,inHeight:O,inWidth:M,outChannels:z,outDepth:B,outHeight:L,outWidth:P,strideDepth:V,strideHeight:W,strideWidth:U}=p,G=$-1-p.padInfo.front,H=_-1-p.padInfo.top,j=R-1-p.padInfo.left;for(let s=0;s<A;++s)for(let e=0;e<F;++e)for(let t=0;t<D;++t){const n=t-G,r=Math.max(0,Math.ceil(n/V)),a=Math.min(B,($+n)/V);for(let i=0;i<O;++i){const o=i-H,u=Math.max(0,Math.ceil(o/W)),c=Math.min(L,(_+o)/W);for(let l=0;l<M;++l){const d=l-j,p=Math.max(0,Math.ceil(d/U)),h=Math.min(P,(R+d)/U);let A=0;for(let t=r;t<a;++t){const r=t*V-n;for(let n=u;n<c;++n){const a=n*W-o;for(let i=p;i<h;++i){const o=v*s+w*t+k*n+N*i,u=I*($-1-r)+T*(_-1-a)+C*(R-1-(i*U-d))+E*e;for(let e=0;e<z;++e){A+=x[o+e]*S[u+e]}}}}f[m*s+g*t+y*i+b*l+e]=A}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},Mi=(0,pa.A)(s.Cos,(e=>Math.cos(e))),zi={kernelName:s.Cos,backendName:"cpu",kernelFunc:Mi},Bi=(0,pa.A)(s.Cosh,(e=>Math.cosh(e))),Li={kernelName:s.Cosh,backendName:"cpu",kernelFunc:Bi};const Pi={kernelName:s.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:i,boxInd:o}=t,{cropSize:u,method:c,extrapolationValue:l}=r,[d,p,h,f]=a.shape,m=i.shape[0],[g,y]=u,b=(0,s.buffer)([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,v=n.data.get(o.dataId).values,w=n.data.get(a.dataId).values,k=s.util.computeStrides(a.shape),N=s.util.computeStrides(b.shape);for(let s=0;s<m;s++){const e=4*s,t=x[e],n=x[e+1],r=x[e+2],a=x[e+3],i=v[s];if(i>=d)continue;const o=g>1?(r-t)*(p-1)/(g-1):0,u=y>1?(a-n)*(h-1)/(y-1):0;for(let d=0;d<g;d++){const e=g>1?t*(p-1)+d*o:.5*(t+r)*(p-1);if(e<0||e>p-1)for(let t=0;t<y;t++)for(let e=0;e<f;e++){const n=e+t*N[2]+d*N[1]+s*N[0];b.values[n]=l}else if("bilinear"===c){const t=Math.floor(e),r=Math.ceil(e),o=e-t;for(let e=0;e<y;e++){const c=y>1?n*(h-1)+e*u:.5*(n+a)*(h-1);if(c<0||c>h-1){for(let t=0;t<f;t++){const n=t+e*N[2]+d*N[1]+s*N[0];b.values[n]=l}continue}const p=Math.floor(c),m=Math.ceil(c),g=c-p;for(let n=0;n<f;n++){let a=n+p*k[2]+t*k[1]+i*k[0];const u=w[a];a=n+m*k[2]+t*k[1]+i*k[0];const c=w[a];a=n+p*k[2]+r*k[1]+i*k[0];const l=w[a];a=n+m*k[2]+r*k[1]+i*k[0];const h=u+(c-u)*g,f=l+(w[a]-l)*g;a=n+e*N[2]+d*N[1]+s*N[0],b.values[a]=h+(f-h)*o}}}else for(let t=0;t<y;++t){const r=y>1?n*(h-1)+t*u:.5*(n+a)*(h-1);if(r<0||r>h-1){for(let e=0;e<f;e++){const n=e+t*N[2]+d*N[1]+s*N[0];b.values[n]=l}continue}const o=Math.round(r),c=Math.round(e);for(let e=0;e<f;e++){const n=e+o*k[2]+c*k[1]+i*k[0],r=e+t*N[2]+d*N[1]+s*N[0];b.values[r]=w[n]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Vi={kernelName:s.Cumprod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,exclusive:o,reverse:u}=r;(0,ca.H)(a,"cumprod");const c=s.backend_util.getAxesPermutation([i],a.shape.length);let l=a;null!=c&&(l=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:c}}));const d=s.backend_util.getInnerMostAxes(1,a.shape.length)[0];if(d!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${d}`);const p=(0,s.upcastType)(l.dtype,"int32"),h=s.util.makeOnesTypedArray(s.util.sizeFromShape(l.shape),p),f=n.data.get(l.dataId).values,m=l.shape[l.shape.length-1],g=u?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let s=0;s<f.length;s+=m)for(let e=0;e<m;e++){const t=g(s,e);if(0===e)h[t]=o?1:f[t];else{const n=g(s,e-1);h[t]=o?f[n]*h[n]:f[t]*h[n]}}const y=n.makeTensorInfo(l.shape,p,h);if(null!=c){const e=s.backend_util.getUndoAxesPermutation(c),t=(0,Pa.p)({inputs:{x:y},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(l),t}return y}};const Wi={kernelName:s.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,exclusive:o,reverse:u}=r;(0,ca.H)(a,"cumsum");const c=s.backend_util.getAxesPermutation([i],a.shape.length);let l=a;null!=c&&(l=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:c}}));const d=s.backend_util.getInnerMostAxes(1,a.shape.length)[0];if(d!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${d}`);const p=(0,s.upcastType)(l.dtype,"int32"),h=s.util.makeZerosTypedArray(s.util.sizeFromShape(l.shape),p),f=n.data.get(l.dataId).values,m=l.shape[l.shape.length-1],g=u?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let s=0;s<f.length;s+=m)for(let e=0;e<m;e++){const t=g(s,e);if(0===e)h[t]=o?0:f[t];else{const n=g(s,e-1);h[t]=o?f[n]+h[n]:f[t]+h[n]}}const y=n.makeTensorInfo(l.shape,p,h);if(null!=c){const e=s.backend_util.getUndoAxesPermutation(c),t=(0,Pa.p)({inputs:{x:y},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(l),t}return y}};const Ui={kernelName:s.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.data.get(s.dataId).values,t=n.data.get(a.dataId).values,r=(0,hi.W)(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=(0,hi.i)(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const Gi={kernelName:s.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:i,dataFormat:o}=r;s.util.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const u=a.shape[0],c=a.shape[1],l=a.shape[2],d=a.shape[3],p=c*i,h=l*i,f=d/(i*i),m=n.data.get(a.dataId).values,g=new Float32Array(u*p*h*f);let y=0;for(let s=0;s<u;++s)for(let e=0;e<p;++e){const t=Math.floor(e/i),n=e%i;for(let e=0;e<h;++e){const r=Math.floor(e/i),a=(n*i+e%i)*f;for(let e=0;e<f;++e){const n=e+a+d*(r+l*(t+c*s));g[y++]=m[n]}}}return n.makeTensorInfo([u,p,h,f],a.dtype,g)}};function Hi(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:c,dimRoundingMode:l}=r;(0,ca.H)([a,i],"depthwiseConv2DNative");const d=s.util.computeStrides(a.shape),p=s.util.computeStrides(i.shape);let h=c;null==h&&(h=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const f=s.backend_util.computeConv2DInfo(a.shape,i.shape,o,h,u,l,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,v=x.left,w=x.top,k=f.outChannels/f.inChannels,N=new s.TensorBuffer(f.outShape,a.dtype),S=n.data.get(a.dataId).values,I=n.data.get(i.dataId).values,T=N.values;for(let s=0;s<f.batchSize;++s){const e=s*d[0],t=s*N.strides[0];for(let n=0;n<f.outHeight;++n){const r=t+n*N.strides[1],s=n*f.strideHeight-w;for(let t=0;t<m;++t){const n=s+t*y;if(n<0||n>=f.inHeight)continue;const a=t*p[0],i=e+n*d[1];for(let e=0;e<f.outWidth;++e){const t=r+e*N.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const r=n+e*b;if(r<0||r>=f.inWidth)continue;const s=a+e*p[1],o=i+r*f.inChannels;let u=t,c=s;for(let e=0;e<f.inChannels;++e){const t=S[o+e];for(let e=0;e<k;++e)T[u+e]+=t*I[c+e];u+=k,c+=k}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const ji={kernelName:s.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:Hi};const qi={kernelName:s.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,dilations:u,pad:c,dimRoundingMode:l,filterShape:d}=r;(0,ca.H)([a,i],"depthwiseConv2dNativeBackpropFilter");const p=s.backend_util.computeConv2DInfo(a.shape,d,o,u,c,l,!0),{strideHeight:h,strideWidth:f,filterHeight:m,filterWidth:g}=p,y=new s.TensorBuffer(p.filterShape,"float32"),b=p.padInfo.left,x=p.padInfo.top,v=p.outChannels/p.inChannels,w=n.data.get(a.dataId).values,k=new s.TensorBuffer(a.shape,a.dtype,w),N=n.data.get(i.dataId).values,S=new s.TensorBuffer(i.shape,i.dtype,N);for(let s=0;s<m;++s){const e=Math.max(0,Math.ceil((x-s)/h)),t=Math.min(p.outHeight,(p.inHeight+x-s)/h);for(let n=0;n<g;++n){const r=Math.max(0,Math.ceil((b-n)/f)),a=Math.min(p.outWidth,(p.inWidth+b-n)/f);for(let i=0;i<p.outChannels;++i){const o=Math.trunc(i/v),u=i%v;let c=0;for(let l=0;l<p.batchSize;++l)for(let u=e;u<t;++u){const e=s+u*h-x;for(let t=r;t<a;++t){const r=n+t*f-b;c+=k.get(l,e,r,o)*S.get(l,u,t,i)}}y.set(c,s,n,o,u)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Xi={kernelName:s.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{strides:o,dilations:u,pad:c,dimRoundingMode:l,inputShape:d}=r;(0,ca.H)([a,i],"depthwiseConv2DNativeBackpropInput");const p=s.util.computeStrides(a.shape),h=s.util.computeStrides(i.shape),f=s.backend_util.computeConv2DInfo(d,i.shape,o,u,c,l,!0),m=new s.TensorBuffer(f.inShape,"float32"),g=m.values,[y,b,x]=m.strides,v=n.data.get(a.dataId).values,[w,k,N]=p,S=n.data.get(i.dataId).values,[I,T,C]=h,{batchSize:E,filterHeight:A,filterWidth:$,inChannels:_,inHeight:R,inWidth:F,outChannels:D,outHeight:O,outWidth:M,strideHeight:z,strideWidth:B}=f,L=A-1-f.padInfo.top,P=$-1-f.padInfo.left,V=D/_;for(let s=0;s<E;++s)for(let e=0;e<_;++e)for(let t=0;t<R;++t){const n=t-L,r=Math.max(0,Math.ceil(n/z)),a=Math.min(O,(A+n)/z);for(let i=0;i<F;++i){const o=i-P,u=Math.max(0,Math.ceil(o/B)),c=Math.min(M,($+o)/B);let l=0;for(let t=r;t<a;++t){const r=t*z-n;for(let n=u;n<c;++n){const a=w*s+k*t+N*n,i=I*(A-1-r)+T*($-1-(n*B-o))+C*e;for(let t=0;t<V;++t){l+=v[a+(e*V+t)]*S[i+t]}}}g[y*s+b*t+x*i+e]=l}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const Ki={kernelName:s.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=s.util.sizeFromShape(r.shape),i=n.data.get(r.dataId).values,o=(0,s.buffer)([a,a],r.dtype),u=o.values;for(let s=0;s<i.length;s++)u[s*a+s]=i[s];const c=[...r.shape,...r.shape];return n.makeTensorInfo(c,o.dtype,o.values)}},Qi={kernelName:s.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a}=e,{strides:i,pad:o,dilations:u}=n,c=t,l=c.data.get(r.dataId).values,d=r.shape.length,p=c.data.get(a.dataId).values,h=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:v,strideHeight:w,strideWidth:k,filterHeight:N,filterWidth:S,dilationHeight:I,dilationWidth:T,outShape:C}=s.backend_util.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",u),E=s.util.sizeFromShape(C),A=C.length,$=s.util.getArrayFromDType(r.dtype,E);for(let _=0;_<f;++_)for(let e=0;e<b;++e){const t=e*w-v.top;for(let n=0;n<x;++n){const i=n*k-v.left;for(let o=0;o<y;++o){let u=Number.MIN_SAFE_INTEGER;for(let e=0;e<N;++e){const n=t+e*I;if(n>=0&&n<m)for(let t=0;t<S;++t){const c=i+t*T;if(c>=0&&c<g){const i=s.util.locToIndex([_,n,c,o],d,s.util.computeStrides(r.shape)),f=s.util.locToIndex([e,t,o],h,s.util.computeStrides(a.shape)),m=l[i]+p[f];m>u&&(u=m)}}}$[s.util.locToIndex([_,e,n,o],A,s.util.computeStrides(C))]=u}}}return{dataId:c.write(s.util.toTypedArray($,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},Zi={kernelName:s.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:i}=e,{strides:o,pad:u,dilations:c}=n,l=t,d=s.util.toNestedArray(r.shape,l.data.get(r.dataId).values),p=s.util.toNestedArray(a.shape,l.data.get(a.dataId).values),{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=s.backend_util.computeDilation2DInfo(r.shape,a.shape,o,u,"NHWC",c);s.util.assert(i.rank===T.length,(()=>`Error in ${s.Dilation2DBackpropFilter}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=s.util.toNestedArray(T,l.data.get(i.dataId).values),E=s.util.makeZerosNestedTypedArray(a.shape,a.dtype);for(let s=0;s<h;++s)for(let e=0;e<y;++e){const t=e*v-x.top;for(let n=0;n<b;++n){const r=n*w-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<k;++e){const n=t+e*S;if(n>=0&&n<f)for(let t=0;t<N;++t){const c=r+t*I;if(c>=0&&c<m){const r=d[s][n][c][a]+p[e][t][a];r>i&&(i=r,o=e,u=t)}}}E[o][u][a]+=C[s][e][n][a]}}}return{dataId:l.write(s.util.toTypedArray(E,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},Yi={kernelName:s.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:i}=e,{strides:o,pad:u,dilations:c}=n,l=t,d=s.util.toNestedArray(r.shape,l.data.get(r.dataId).values),p=s.util.toNestedArray(a.shape,l.data.get(a.dataId).values),{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=s.backend_util.computeDilation2DInfo(r.shape,a.shape,o,u,"NHWC",c);s.util.assert(i.rank===T.length,(()=>`Error in ${s.Dilation2DBackpropInput}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=s.util.toNestedArray(T,l.data.get(i.dataId).values),E=s.util.makeZerosNestedTypedArray(r.shape,r.dtype);for(let s=0;s<h;++s)for(let e=0;e<y;++e){const t=e*v-x.top;for(let n=0;n<b;++n){const r=n*w-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=t<0?0:t,u=r<0?0:r;for(let e=0;e<k;++e){const n=t+e*S;if(n>=0&&n<f)for(let t=0;t<N;++t){const c=r+t*I;if(c>=0&&c<m){const r=d[s][n][c][a]+p[e][t][a];r>i&&(i=r,o=n,u=c)}}}E[s][o][u][a]+=C[s][e][n][a]}}}return{dataId:l.write(s.util.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const Ji={kernelName:s.Draw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s}=t,{canvas:a,options:i}=r,{contextOptions:o,imageOptions:u}=i||{},c=(null==u?void 0:u.alpha)||1,l=(null==o?void 0:o.contextType)||"2d";if("2d"!==l)throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);const d=a.getContext(l,(null==o?void 0:o.contextAttributes)||{});if(null==d)throw new Error(`Could not get the context with ${l} type.`);const[p,h]=s.shape.slice(0,2),f=2===s.shape.length?1:s.shape[2],m=n.data.get(s.dataId).values,g="float32"===s.dtype?255:1,y=new Uint8ClampedArray(h*p*4);for(let x=0;x<p*h;++x){const e=[0,0,0,255*c];for(let n=0;n<f;n++){const t=m[x*f+n];if("float32"===s.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===s.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===f?(e[0]=t*g,e[1]=t*g,e[2]=t*g):e[n]=t*g}const t=4*x;y[t+0]=Math.round(e[0]),y[t+1]=Math.round(e[1]),y[t+2]=Math.round(e[2]),y[t+3]=Math.round(e[3])}a.width=h,a.height=p;const b=new ImageData(y,h,p);return d.putImageData(b,0,0),s}};var eo=n(1917),to=n(9486);function no(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;let u;(0,ca.H)(a,"sum"),u="bool"===a.dtype?(0,yi.pj)({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):(0,ma.y)({inputs:{x:a},backend:n});const c=u.shape.length,l=s.util.parseAxisParam(i,u.shape),d=s.backend_util.getAxesPermutation(l,c);let p=l,h=u;null!=d&&(h=(0,Pa.p)({inputs:{x:u},backend:n,attrs:{perm:d}}),p=s.backend_util.getInnerMostAxes(p.length,c)),s.backend_util.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[f,m]=s.backend_util.computeOutAndReduceShapes(h.shape,p),g=s.backend_util.upcastType(h.dtype,"int32");let y=(0,to.l)(n,f,g);const b=s.util.sizeFromShape(m),x=n.data.get(y.dataId).values,v=n.data.get(h.dataId).values;for(let s=0;s<x.length;++s){const e=s*b;let t=0;for(let n=0;n<b;++n)t+=v[e+n];x[s]=t}if(o){const e=y;y=Aa({inputs:{x:y},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(y.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(u),null!=d&&n.disposeIntermediateTensorInfo(h),y}const ro={kernelName:s.Sum,backendName:"cpu",kernelFunc:no};const so={kernelName:s.Einsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,i=t,{allDims:o,summedDims:u,idDims:c}=s.backend_util.decodeEinsumEquation(a,i.length);s.backend_util.checkEinsumDimSizes(o.length,c,i);const{path:l,steps:d}=s.backend_util.getEinsumComputePath(u,c),p=d.length;let h=null,f=o.length;const m=[];for(let g=0;g<p;++g){for(const e of d[g]){const{permutationIndices:t,expandDims:r}=s.backend_util.getEinsumPermutation(f,c[e]);let a;s.backend_util.isIdentityPermutation(t)?a=i[e]:(a=(0,Pa.p)({inputs:{x:i[e]},backend:n,attrs:{perm:t}}),m.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);s.util.arraysEqual(a.shape,o)||(a=Aa({inputs:{x:a},backend:n,attrs:{shape:o}}),m.push(a)),null===h?h=a:(h=(0,eo.Jp)({inputs:{a:a,b:h},backend:n}),m.push(h))}g<p-1&&(l[g]>=0&&(h=no({inputs:{x:h},backend:n,attrs:{axis:l[g]-(o.length-f),keepDims:!1}}),m.push(h)),f--)}for(const s of m)s!==h&&n.disposeIntermediateTensorInfo(s);return h}};const ao={kernelName:s.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:a}=t;(0,ca.H)([r,a],"eluGrad");const i=new Float32Array(s.util.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values;for(let s=0;s<o.length;++s){const e=o[s];i[s]=e>=0?u[s]:u[s]*(e+1)}return n.makeTensorInfo(a.shape,"float32",i)}};var io=n(7679);const oo=s.backend_util.ERF_P,uo=s.backend_util.ERF_A1,co=s.backend_util.ERF_A2,lo=s.backend_util.ERF_A3,po=s.backend_util.ERF_A4,ho=s.backend_util.ERF_A5,fo=(0,pa.A)(s.Erf,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+oo*n);return t*(1-((((ho*r+po)*r+lo)*r+co)*r+uo)*r*Math.exp(-n*n))})),mo={kernelName:s.Erf,backendName:"cpu",kernelFunc:fo};var go=n(1211);function yo(e){const{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:i}=r,o=a.shape.length,u=a.shape.slice();let c=i;return i<0&&(s.util.assert(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),c=o+i+1),u.splice(c,0,1),Aa({inputs:{x:a},backend:n,attrs:{shape:u}})}const bo={kernelName:s.ExpandDims,backendName:"cpu",kernelFunc:yo};var xo=n(969);const vo=(0,ba.b)(((e,t)=>e/t)),wo=(0,Za.j)(s.RealDiv,vo),ko={kernelName:s.RealDiv,backendName:"cpu",kernelFunc:wo};var No=n(1649);function So(e,t,n){const r=e.shape,a=r[0],i=r[1],o=n.data.get(e.dataId),u=o.complexTensorInfos.real,c=o.complexTensorInfos.imag,l=[a,i],d=s.util.sizeFromShape(l),p=s.util.getTypedArrayFromDType("float32",d),h=s.util.getTypedArrayFromDType("float32",d);for(let y=0;y<a;y++){const e=(0,di.tP)({inputs:{x:u},backend:n,attrs:{begin:[y,0],size:[1,i]}}),r=(0,di.tP)({inputs:{x:c},backend:n,attrs:{begin:[y,0],size:[1,i]}}),a=(0,wi.P)({inputs:{real:e,imag:r},backend:n}),{real:o,imag:l}=Io(a,t,n),d=s.backend_util.mergeRealAndImagArrays(o,l);for(let t=0;t<i;t++){const e=s.backend_util.getComplexWithIndex(d,t);p[y*i+t]=e.real,h[y*i+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a)}const f=n.makeTensorInfo(l,"float32",p),m=n.makeTensorInfo(l,"float32",h),g=(0,wi.P)({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Io(e,t,n){const r=s.util.sizeFromShape(e.shape),a=n.data.get(e.dataId),i=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((u=r)&u-1)){const a=To(i,o,r,t,n),u=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(u,"float32",a.real),t=n.makeTensorInfo(u,"float32",a.imag),i=n.makeTensorInfo([],"float32",s.util.createScalarValue(r,"float32")),o=(0,ma.y)({inputs:{x:i},backend:n}),c=ko.kernelFunc({inputs:{a:e,b:i},backend:n}),l=ko.kernelFunc({inputs:{a:t,b:o},backend:n}),d=n.data.get(c.dataId).values,p=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(l),{real:d,imag:p}}return a}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let a=0;a<t;a++){let i=0,o=0;for(let r=0;r<t;r++){const u=s.backend_util.exponent(a*r,t,n),c=s.backend_util.getComplexWithIndex(e,r);i+=c.real*u.real-c.imag*u.imag,o+=c.real*u.imag+c.imag*u.real}n&&(i/=t,o/=t),s.backend_util.assignToTypedArray(r,i,o,a)}return r}(s.backend_util.mergeRealAndImagArrays(i,o),r,t);return s.backend_util.splitRealAndImagArrays(e)}var u}function To(e,t,n,r,a){if(1===n)return{real:e,imag:t};const i=s.backend_util.mergeRealAndImagArrays(e,t),o=n/2,u=s.backend_util.complexWithEvenIndex(i),c=u.real,l=u.imag,d=[c.length],p=a.makeTensorInfo(d,"float32",c),h=a.makeTensorInfo(d,"float32",l),f=(0,wi.P)({inputs:{real:p,imag:h},backend:a}),m=s.backend_util.complexWithOddIndex(i),g=m.real,y=m.imag,b=[g.length],x=a.makeTensorInfo(b,"float32",g),v=a.makeTensorInfo(b,"float32",y),w=(0,wi.P)({inputs:{real:x,imag:v},backend:a}),k=To(c,l,o,r,a),N=k.real,S=k.imag,I=[N.length],T=a.makeTensorInfo(I,"float32",N),C=a.makeTensorInfo(I,"float32",S),E=(0,wi.P)({inputs:{real:T,imag:C},backend:a}),A=To(g,y,o,r,a),$=A.real,_=A.imag,R=[$.length],F=a.makeTensorInfo(R,"float32",$),D=a.makeTensorInfo(R,"float32",_),O=(0,wi.P)({inputs:{real:F,imag:D},backend:a}),M=s.backend_util.exponents(n,r),z=[M.real.length],B=a.makeTensorInfo(z,"float32",M.real),L=a.makeTensorInfo(z,"float32",M.imag),P=(0,wi.P)({inputs:{real:B,imag:L},backend:a}),V=(0,eo.Jp)({inputs:{a:P,b:O},backend:a}),W=(0,Ea.IH)({inputs:{a:E,b:V},backend:a}),U=(0,No.lu)({inputs:{a:E,b:V},backend:a}),G=(0,Ti.k)({inputs:{input:W},backend:a}),H=(0,Ti.k)({inputs:{input:U},backend:a}),j=Si({inputs:{input:W},backend:a}),q=Si({inputs:{input:U},backend:a}),X=Ci({inputs:[G,H],backend:a,attrs:{axis:0}}),K=Ci({inputs:[j,q],backend:a,attrs:{axis:0}}),Q=a.data.get(X.dataId).values,Z=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(C),a.disposeIntermediateTensorInfo(E),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(K),{real:Q,imag:Z}}const Co={kernelName:s.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=s.util.sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=Aa({inputs:{x:r},backend:n,attrs:{shape:[a/i,i]}}),u=So(o,!1,n),c=Aa({inputs:{x:u},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}};function Eo(e){const{backend:t,attrs:n}=e,{shape:r,value:a,dtype:i}=n,o=i||s.util.inferDtype(a),u=s.util.getArrayFromDType(o,s.util.sizeFromShape(r));return function(e,t,n){e.fill(t)}(u,a),t.makeTensorInfo(r,o,u)}const Ao={kernelName:s.Fill,backendName:"cpu",kernelFunc:Eo};const $o={kernelName:s.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,a=n,i=s.util.getTypedArrayFromDType(r.dtype,s.util.sizeFromShape(r.shape)),[o,u,c,l]=r.shape,d=a.data.get(r.dataId).values;for(let s=0;s<o;s++){const e=s*c*u*l;for(let t=0;t<u;t++){const n=t*(c*l);for(let t=0;t<c;t++){const r=t*l;for(let s=0;s<l;s++){const a=Math.round(c-t-1),o=e+n+r+s;let u=d[o];if(a>=0&&a<c){u=d[e+n+a*l+s]}i[o]=u}}}}return{dataId:a.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};var _o=n(6574);const Ro=(0,ba.b)(((e,t)=>Math.floor(e/t))),Fo=(0,Za.j)(s.FloorDiv,Ro,null,"int32"),Do={kernelName:s.FloorDiv,backendName:"cpu",kernelFunc:Fo};const Oo={kernelName:s.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:c,dataFormat:l,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r;let m=Ai({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:c,dataFormat:l,dilations:d,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===l&&1===i.shape.length&&1!==i.shape[0]){const e=Aa({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=(0,Ea.IH)({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=(0,Ea.IH)({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(h){const e=m;if("NCHW"===l&&"prelu"===h&&1===o.shape.length&&1!==o.shape[0]){const e=Aa({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Ca(n,m,h,e,f),n.disposeIntermediateTensorInfo(e)}else m=Ca(n,m,h,o,f);n.disposeIntermediateTensorInfo(e)}return m}};const Mo={kernelName:s.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:c,dataFormat:l,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r;let m=Hi({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:c,dataFormat:l,dilations:d,dimRoundingMode:p}});if(i){const e=m;m=(0,Ea.IH)({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=Ca(n,m,h,o,f),n.disposeIntermediateTensorInfo(e)}return m}};var zo=n(1820);const Bo={kernelName:s.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,i=s.util.sizeFromShape(r.shape),o=a.shape,u=o[o.length-1],[c,l,d,p]=s.backend_util.prepareAndValidate(r,a);if(0===l)return n.makeTensorInfo(c,r.dtype,[]);const h=n.data.get(a.dataId).values,f=n.bufferSync(r),m=(0,zo.m)(h,f,r.dtype,l,u,d,p,r.shape,i);return n.makeTensorInfo(c,r.dtype,m.values)}};var Lo=n(4468);const Po={kernelName:s.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:i}=t,{axis:o,batchDims:u}=r;(0,ca.H)([a,i],"gatherV2");const c=s.util.parseAxisParam(o,a.shape)[0],l=n.data.get(i.dataId).values,d=a.shape[c];for(let w=0;w<l.length;++w){const e=l[w];s.util.assert(e<=d-1&&e>=0,(()=>`GatherV2: the index value ${e} is not in [0, ${d-1}]`))}let p=u;null==u&&(p=0);const h=s.util.sizeFromShape(i.shape),f=s.backend_util.segment_util.collectGatherOpShapeInfo(a,i,c,p),m=Aa({inputs:{x:a},backend:n,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),g=Aa({inputs:{x:i},backend:n,attrs:{shape:[f.batchSize,h/f.batchSize]}}),y=[f.batchSize,f.outerSize,h/f.batchSize,f.sliceSize],b=n.bufferSync(g),x=n.bufferSync(m),v=(0,Lo.i)(x,b,y);return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.makeTensorInfo(f.outputShape,v.dtype,v.values)}};var Vo=n(6272),Wo=n(6259);const Uo={kernelName:s.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=s.util.sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=Aa({inputs:{x:r},backend:n,attrs:{shape:[a/i,i]}}),u=So(o,!0,n),c=Aa({inputs:{x:u},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}},Go=(0,pa.A)(s.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),Ho={kernelName:s.IsFinite,backendName:"cpu",kernelFunc:Go},jo=(0,pa.A)(s.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),qo={kernelName:s.IsInf,backendName:"cpu",kernelFunc:jo},Xo=(0,pa.A)(s.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),Ko={kernelName:s.IsNan,backendName:"cpu",kernelFunc:Xo};var Qo=n(8405),Zo=n(635),Yo=n(1325);const Jo={kernelName:s.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=(0,Yo.b)(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}};var eu=n(5223);const tu=(0,pa.A)(s.Log1p,(e=>Math.log1p(e))),nu={kernelName:s.Log1p,backendName:"cpu",kernelFunc:tu},ru=(0,ba.b)(((e,t)=>e&&t)),su=(0,Za.j)(s.LogicalAnd,ru,null,"bool"),au={kernelName:s.LogicalAnd,backendName:"cpu",kernelFunc:su},iu=(0,pa.A)(s.LogicalNot,(e=>e?0:1),"bool"),ou={kernelName:s.LogicalNot,backendName:"cpu",kernelFunc:iu},uu=(0,ba.b)(((e,t)=>e||t)),cu=(0,Za.j)(s.LogicalOr,uu,null,"bool"),lu={kernelName:s.LogicalOr,backendName:"cpu",kernelFunc:cu};const du={kernelName:s.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:u,beta:c}=r;(0,ca.H)(a,"LRN");const l=a.shape[3],d=l-1,p=n.data.get(a.dataId).values,h=s.util.sizeFromShape(a.shape),f=new Float32Array(h);function m(e){const t=e%l;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,d);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let s=0;s<h;s++){const e=m(s),t=p[s]*Math.pow(o+u*e,-c);f[s]=t}return n.makeTensorInfo(a.shape,a.dtype,f)}};const pu={kernelName:s.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,y:i,dy:o}=t,{depthRadius:u,bias:c,alpha:l,beta:d}=r;(0,ca.H)(o,"LRNGrad");const p=s.util.sizeFromShape(o.shape),h=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(i.dataId).values,y=new Float32Array(p),b=p;for(let s=0;s<b;s++){const e=s%h,t=s-e+Math.max(0,e-u),n=s-e+Math.min(h,e+u+1);let r=0;for(let s=t;s<n;s++)r+=Math.pow(m[s],2);r=l*r+c;for(let a=t;a<n;a++){let e=-2*l*d*m[a]*g[s]/r;s===a&&(e+=Math.pow(r,-d)),e*=f[s],y[a]+=e}}return n.makeTensorInfo(o.shape,a.dtype,y)}};var hu=n(5126),fu=n(7107);function mu(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=r,u=n;let c=a.shape;const l=c.length,d=s.util.parseAxisParam(i,c);let p=d;const h=s.backend_util.getAxesPermutation(p,l);let f=u.data.get(a.dataId).values;if(null!=h){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=c[h[t]];f=(0,fu.H)(f,c,a.dtype,h,e),p=s.backend_util.getInnerMostAxes(p.length,l),c=e}(0,ca.H)(a,"max"),s.backend_util.assertAxesAreInnerMostDims("max",p,l);const[m,g]=s.backend_util.computeOutAndReduceShapes(c,p),y=s.util.sizeFromShape(g),b=(0,hu.B)(f,y,m,a.dtype),x=u.write(b,m,a.dtype);let v=m;if(o){v=s.backend_util.expandShapeToKeepDim(m,d)}return{dataId:x,shape:v,dtype:a.dtype}}const gu={kernelName:s.Max,backendName:"cpu",kernelFunc:mu};var yu=n(1717);const bu={kernelName:s.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;(0,ca.H)(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=s.backend_util.computePool2DInfo(a.shape,i,o,1,u,c);let d;if(1===l.filterWidth&&1===l.filterHeight&&s.util.arraysEqual(l.inShape,l.outShape))d=(0,ma.y)({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=s.util.computeStrides(a.shape),r=ri(e,a.shape,a.dtype,t,l,"max");d=n.makeTensorInfo(l.outShape,a.dtype,r.values)}return d}};const xu={kernelName:s.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:c,dataFormat:l}=r;(0,ca.H)(a,"maxPool3d");const d=s.backend_util.computePool3DInfo(a.shape,i,o,1,u,c,l),p=ai(n.data.get(a.dataId).values,a.shape,a.dtype,s.util.computeStrides(a.shape),d,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const vu={kernelName:s.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i}=t,{filterSize:o,strides:u,pad:c,dimRoundingMode:l}=r;(0,ca.H)([a,i],"maxPool3DGrad");const d=s.backend_util.computePool3DInfo(i.shape,o,u,1,c,l),p=function(e,t){const n=(0,s.buffer)(t.outShape,"int32"),r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let s=0;s<t.batchSize;++s)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const v=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*a-f;let h=l;for(;h<0;)h+=u;const w=Math.min(t.inHeight,d+l);for(let a=0;a<t.outWidth;++a){const f=a*i-m;let k=f;for(;k<0;)k+=c;const N=Math.min(t.inWidth,p+f);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<v;t+=o){const n=t-b;for(let r=h;r<w;r+=u){const a=r-l;for(let i=k;i<N;i+=c){const o=i-f,u=e.get(s,t,r,i,g);u>=S&&(S=u,I=n*d*p+a*d+o)}}}n.set(I,s,y,r,a,g)}}}return n}(n.bufferSync(i),d),h=d.strideDepth,f=d.strideHeight,m=d.strideWidth,g=d.dilationDepth,y=d.dilationHeight,b=d.dilationWidth,x=d.effectiveFilterDepth,v=d.effectiveFilterHeight,w=d.effectiveFilterWidth,k=x-1-d.padInfo.front,N=w-1-d.padInfo.left,S=v-1-d.padInfo.top,I=(0,s.buffer)(i.shape,"float32"),T=n.bufferSync(a);for(let s=0;s<d.batchSize;++s)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inDepth;++t)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const a=t-k,i=n-S,o=r-N;let u=0;for(let t=0;t<x;t+=g){const n=(a+t)/h;if(!(n<0||n>=d.outDepth||Math.floor(n)!==n))for(let r=0;r<v;r+=y){const a=(i+r)/f;if(!(a<0||a>=d.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=b){const c=(o+i)/m;if(c<0||c>=d.outWidth||Math.floor(c)!==c)continue;const l=x*v*w-1-p.get(s,n,a,c,e)===t*v*w+r*w+i?1:0;if(0===l)continue;u+=T.get(s,n,a,c,e)*l}}}I.set(u,s,t,n,r,e)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const wu={kernelName:s.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i,output:o}=t,u=i;(0,ca.H)([i,o],"maxPoolGrad");const{filterSize:c,strides:l,pad:d,dimRoundingMode:p}=r,h=s.backend_util.computePool2DInfo(u.shape,c,l,1,d,p),f=n.data.get(u.dataId).values,m=(0,s.buffer)(h.outShape,u.dtype,si(f,u.shape,u.dtype,h).values),g=h.strideHeight,y=h.strideWidth,b=h.dilationHeight,x=h.dilationWidth,v=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,N=v-1-h.padInfo.top,S=(0,s.buffer)(u.shape,"float32"),I=n.data.get(a.dataId).values,T=(0,s.buffer)(a.shape,"float32",I);for(let s=0;s<h.batchSize;++s)for(let e=0;e<h.inChannels;++e)for(let t=0;t<h.inHeight;++t)for(let n=0;n<h.inWidth;++n){const r=t-N,a=n-k;let i=0;for(let t=0;t<v;t+=b){const n=(r+t)/g;if(!(n<0||n>=h.outHeight||Math.floor(n)!==n))for(let r=0;r<w;r+=x){const o=(a+r)/y;if(o<0||o>=h.outWidth||Math.floor(o)!==o)continue;const u=v*w-1-m.get(s,n,o,e)===t*w+r?1:0;if(0===u)continue;i+=T.get(s,n,o,e)*u}}S.set(i,s,t,n,e)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const ku={kernelName:s.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=t,c=n;(0,ca.H)(r,"MaxPoolWithArgmax");const l=c.data.get(r.dataId).values,d=s.backend_util.computePool2DInfo(r.shape,a,i,[1,1],o),[p,h]=function(e,t,n,r,a){const i=ri(e,0,n,s.util.computeStrides(t),a,"max"),o=si(e,t,n,a,!0,r);return[i.values,o.values]}(l,r.shape,r.dtype,u,d),f=c.write(p,d.outShape,r.dtype),m=c.write(h,d.outShape,r.dtype);return[{dataId:f,shape:d.outShape,dtype:r.dtype},{dataId:m,shape:d.outShape,dtype:"int32"}]}};const Nu={kernelName:s.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,u=s.util.parseAxisParam(i,a.shape),c=s.backend_util.computeOutAndReduceShapes(a.shape,u)[1],l=s.util.sizeFromShape(c),d=[],p=n.makeTensorInfo([],"float32",new Float32Array([l]));d.push(p);const h=(0,yi.pj)({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});d.push(h);const f=wo({inputs:{a:h,b:p},backend:n});d.push(f);const m=no({inputs:{x:f},backend:n,attrs:{axis:i,keepDims:o}});return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),m}};const Su={kernelName:s.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;(0,ca.H)(a,"min");const u=s.util.parseAxisParam(i,a.shape);let c=u;const l=s.backend_util.getAxesPermutation(c,a.shape.length);let d=a;null!=l&&(d=(0,Pa.p)({inputs:{x:a},backend:n,attrs:{perm:l}}),c=s.backend_util.getInnerMostAxes(c.length,a.shape.length)),s.backend_util.assertAxesAreInnerMostDims("min",c,d.shape.length);const[p,h]=s.backend_util.computeOutAndReduceShapes(d.shape,c),f=s.util.sizeFromShape(h),m=s.util.makeZerosTypedArray(s.util.sizeFromShape(p),d.dtype),g=n.data.get(d.dataId).values;for(let s=0;s<m.length;++s){const e=s*f;let t=g[e];for(let n=0;n<f;++n){const r=g[e+n];(Number.isNaN(r)||r<t)&&(t=r)}m[s]=t}null!=l&&n.disposeIntermediateTensorInfo(d);const y=n.makeTensorInfo(p,d.dtype,m);if(o){const e=Aa({inputs:{x:y},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(p,u)}});return n.disposeIntermediateTensorInfo(y),e}return y}};var Iu=n(612);const Tu={kernelName:s.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:i,mode:o}=r;(0,ca.H)(a,"mirrorPad");const u=i.map(((e,t)=>e[0]+a.shape[t]+e[1])),c=i.map((e=>e[0])),l=i.map(((e,t)=>e[0]+a.shape[t])),d="reflect"===o?0:1,p=n.data.get(a.dataId).values,h=a.shape.length,f=s.util.computeStrides(a.shape),m=s.util.sizeFromShape(u),g=u.length,y=s.util.computeStrides(u),b=s.util.getTypedArrayFromDType(a.dtype,m);for(let x=0;x<m;x++){let e=s.util.indexToLoc(x,g,y);for(let n=0;n<g;n++)e[n]<c[n]?e[n]=2*c[n]-e[n]-d:e[n]>=l[n]&&(e[n]=2*(l[n]-1)-e[n]+d);e=e.map(((e,t)=>e-c[t]));const t=s.util.locToIndex(e,h,f);b[x]=p[t]}return{dataId:n.write(b,u,a.dtype),shape:u,dtype:a.dtype}}},Cu=(0,ba.b)(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Eu=(0,Za.j)(s.Mod,Cu),Au={kernelName:s.Mod,backendName:"cpu",kernelFunc:Eu};function $u(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:i}=r,o=a.shape.length;let u=i;if(-1===u&&(u=o-1),u!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${u}`);const c=s.util.parseAxisParam([u],a.shape),l=mu({inputs:{x:a},backend:n,attrs:{reductionIndices:c,keepDims:!1}}),d=s.backend_util.expandShapeToKeepDim(l.shape,c),p=Aa({inputs:{x:l},backend:n,attrs:{shape:d}}),h=(0,No.lu)({inputs:{a:a,b:p},backend:n}),f=(0,go.Qq)({inputs:{x:h},backend:n}),m=no({inputs:{x:f},backend:n,attrs:{axis:c,keepDims:!1}}),g=Aa({inputs:{x:m},backend:n,attrs:{shape:d}}),y=wo({inputs:{a:f,b:g},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}const _u={kernelName:s.Softmax,backendName:"cpu",kernelFunc:$u};const Ru={kernelName:s.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:i,seed:o,normalized:u}=r;(0,ca.H)(a,"multinomial");const c=u?a:$u({inputs:{logits:a},backend:n,attrs:{dim:-1}}),l=c.shape[0],d=c.shape[1],p=n.data.get(c.dataId).values,h=[l,i],f=s.util.makeZerosTypedArray(s.util.sizeFromShape(h),"int32");for(let s=0;s<l;++s){const e=s*d,t=new Float32Array(d-1);t[0]=p[e];for(let s=1;s<t.length;++s)t[s]=t[s-1]+p[e+s];const n=Jr.alea(o.toString()),r=s*i;for(let s=0;s<i;++s){const e=n();f[r+s]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){f[r+s]=n;break}}}return u||n.disposeIntermediateTensorInfo(c),n.makeTensorInfo(h,"int32",f)}};var Fu=n(854);const Du=s.kernel_impls.nonMaxSuppressionV3Impl;const Ou={kernelName:s.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r;(0,ca.H)(s,"NonMaxSuppression");const c=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,{selectedIndices:d}=Du(c,l,i,o,u);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},Mu=s.kernel_impls.nonMaxSuppressionV4Impl;const zu={kernelName:s.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:c}=r;(0,ca.H)(s,"NonMaxSuppressionPadded");const l=n.data.get(s.dataId).values,d=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:h}=Mu(l,d,i,o,u,c);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},Bu=s.kernel_impls.nonMaxSuppressionV5Impl;const Lu={kernelName:s.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:c}=r;(0,ca.H)(s,"NonMaxSuppressionWithScore");const l=n.data.get(s.dataId).values,d=n.data.get(a.dataId).values,p=i,h=o,f=u,m=c,{selectedIndices:g,selectedScores:y}=Bu(l,d,p,h,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};var Pu=n(8584);const Vu={kernelName:s.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:i,depth:o,onValue:u,offValue:c}=r;(0,ca.H)(a,"oneHot");const l=s.util.sizeFromShape(a.shape),d=new Float32Array(l*o);d.fill(c);const p=n.data.get(a.dataId).values;for(let s=0;s<l;++s)p[s]>=0&&p[s]<o&&(d[s*o+p[s]]=u);return n.makeTensorInfo([...a.shape,o],i,d)}};function Wu(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=(0,Ti.k)({inputs:{input:r},backend:n}),t=Wu({inputs:{x:e},backend:n}),s=Si({inputs:{input:r},backend:n}),a=Wu({inputs:{x:s},backend:n}),i=(0,wi.P)({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return Eo({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const Uu={kernelName:s.ZerosLike,backendName:"cpu",kernelFunc:Wu};const Gu={kernelName:s.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=(0,Ti.k)({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=Si({inputs:{input:s},backend:r}),i=Wu({inputs:{x:a},backend:r}),o=(0,wi.P)({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return Eo({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function Hu(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return yo({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach((e=>{s.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),s.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],c=Ci({inputs:t.map((e=>{const t=yo({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t})),backend:n,attrs:{axis:a}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const ju={kernelName:s.Pack,backendName:"cpu",kernelFunc:Hu};const qu={kernelName:s.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:i,constantValue:o}=r;(0,ca.H)(a,"pad");const u=i.map(((e,t)=>e[0]+a.shape[t]+e[1])),c=i.map((e=>e[0])),l=n.data.get(a.dataId).values,d=s.util.sizeFromShape(a.shape),p=a.shape.length,h=s.util.computeStrides(a.shape),f=s.util.sizeFromShape(u),m=u.length,g=s.util.computeStrides(u),y=s.util.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let b=0;b<d;b++){const e=s.util.indexToLoc(b,p,h).map(((e,t)=>e+c[t]));y[s.util.locToIndex(e,m,g)]=l[b]}return{dataId:n.write(y,u,a.dtype),shape:u,dtype:a.dtype}}},Xu=(0,ba.b)(((e,t)=>Math.pow(e,t))),Ku=(0,Za.j)(s.Pow,Xu),Qu={kernelName:s.Pow,backendName:"cpu",kernelFunc:Ku};var Zu=n(9560),Yu=n(9885);const Ju={kernelName:s.RaggedGather,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=r,u=s.map((e=>n.data.get(e.dataId).values)),c=s.map((e=>e.shape)),l=n.data.get(a.dataId).values,d=n.data.get(i.dataId).values,[p,h,f]=(0,Yu.c)(u,c,l,a.shape,a.dtype,d,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,h);return m.concat([g])}};var ec=n(6486);const tc={kernelName:s.RaggedRange,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[c,l]=(0,ec.S)(i,r.shape,r.dtype,o,s.shape,u,a.shape);return[n.makeTensorInfo([c.length],"int32",c),n.makeTensorInfo([l.length],r.dtype,l)]}};var nc=n(8306);const rc={kernelName:s.RaggedTensorToTensor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=r,c=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,d=n.data.get(i.dataId).values,p=o.map((e=>n.data.get(e.dataId).values)),h=o.map((e=>e.shape)),[f,m]=(0,nc.p)(c,s.shape,l,a.shape,a.dtype,d,i.shape,p,h,u);return n.makeTensorInfo(f,a.dtype,m)}};var sc=n(9230);const ac={kernelName:s.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=(0,sc.b)(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},ic=(0,pa.A)(s.Reciprocal,(e=>1/e)),oc={kernelName:s.Reciprocal,backendName:"cpu",kernelFunc:ic};const uc={kernelName:s.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=r;(0,ca.H)(a,"resizeBilinear");const c=s.util.computeStrides(a.shape),[l,d]=u,[p,h,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(s.util.sizeFromShape([p,l,d,m])),b=[i&&l>1?h-1:h,i&&d>1?f-1:f],x=[i&&l>1?l-1:l,i&&d>1?d-1:d];let v=0;const w=b[0]/x[0],k=b[1]/x[1];for(let s=0;s<p;s++)for(let e=0;e<l;e++){let t;t=o?w*(e+.5)-.5:w*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(h-1,Math.ceil(t)),i=s*c[0]+n*c[1],u=s*c[0]+a*c[1];for(let e=0;e<d;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),l=i+n*c[2],d=u+n*c[2],p=i+a*c[2],h=u+a*c[2];for(let e=0;e<m;e++){const t=g[l+e],n=g[d+e],a=t+(g[p+e]-t)*s,i=a+(n+(g[h+e]-n)*s-a)*r;y[v++]=i}}}return n.makeTensorInfo([p,l,d,m],"float32",y)}};const cc={kernelName:s.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:i}=t,{alignCorners:o}=r;(0,ca.H)([i,a],"resizeBilinearGrad");const u=s.util.computeStrides(a.shape),[c,l,d,p]=a.shape,[,h,f]=i.shape,m=new Float32Array(c*l*d*p),g=[o&&h>1?l-1:l,o&&f>1?d-1:d],y=[o&&h>1?h-1:h,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],v=n.data.get(i.dataId).values;let w=0;for(let s=0;s<c;s++){const e=s*u[0];for(let t=0;t<h;t++){const n=t*b,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=e+r*u[1],i=e+s*u[1],o=n-r,c=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),r=Math.min(Math.ceil(t),d-1),s=t-n,l=1-s,h=a+n*u[2],f=a+r*u[2],g=i+n*u[2],y=i+r*u[2],b=c*l,k=c*s,N=o*l,S=o*s;for(let e=0;e<p;e++){const t=v[w++];m[h+e]+=t*b,m[f+e]+=t*k,m[g+e]+=t*N,m[y+e]+=t*S}}}}return n.makeTensorInfo([c,d,l,p],"float32",m)}};const lc={kernelName:s.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=r;(0,ca.H)(a,"resizeNearestNeighbor");const c=s.util.computeStrides(a.shape),[l,d]=u,[p,h,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(p*l*d*m),b=[i&&l>1?h-1:h,i&&d>1?f-1:f],x=[i&&l>1?l-1:l,i&&d>1?d-1:d],v=b[0]/x[0],w=b[1]/x[1];let k=0;for(let s=0;s<p;s++){const e=s*c[0];for(let t=0;t<l;t++){const n=o?v*(t+.5):v*t;let r=Math.min(h-1,i?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=e+r*c[1];for(let e=0;e<d;e++){const t=o?w*(e+.5):w*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*c[2];for(let e=0;e<m;e++){const t=g[r+e];y[k++]=t}}}}return n.makeTensorInfo([p,l,d,m],a.dtype,y)}};const dc={kernelName:s.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:i}=t,{alignCorners:o}=r;(0,ca.H)([i,a],"resizeNearestNeighborGrad");const u=s.util.computeStrides(a.shape),c=s.util.computeStrides(i.shape),[l,d,p,h]=a.shape,[,f,m]=i.shape,g=new Float32Array(l*d*p*h),y=n.data.get(i.dataId).values,b=[o&&f>1?d-1:d,o&&m>1?p-1:p],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],v=b[0]/x[0],w=b[1]/x[1],k=1/v,N=1/w,S=2*Math.ceil(k)+2,I=2*Math.ceil(N)+2;for(let s=0;s<l;s++){const e=s*u[0];for(let t=0;t<d;t++){const n=e+t*u[1],r=Math.floor(t*k),s=Math.floor(r-S/2);for(let a=0;a<p;a++){const r=n+a*u[2],i=Math.floor(a*N),l=Math.floor(i-I/2);for(let n=0;n<h;n++){let i=0;for(let r=0;r<S;r++){const u=r+s;if(u<0||u>=f)continue;const h=e+u*c[1],g=u*v;if(t===Math.min(d-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<I;e++){const t=e+l;if(t<0||t>=m)continue;const r=h+t*c[2],s=t*w;a===Math.min(p-1,o?Math.round(s):Math.floor(s))&&(i+=y[r+n])}}g[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}};const pc={kernelName:s.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:i}=r;(0,ca.H)(a,"reverse");const o=a.shape.length,u=s.util.parseAxisParam(i,a.shape);if(0===o)return(0,ma.y)({inputs:{x:a},backend:n});const c=new s.TensorBuffer(a.shape,a.dtype),l=n.bufferSync(a);for(let s=0;s<c.size;s++){const e=c.indexToLoc(s),t=e.slice();u.forEach((e=>t[e]=a.shape[e]-1-t[e])),c.set(l.get(...t),...e)}return n.makeTensorInfo(c.shape,c.dtype,c.values)}},hc={kernelName:s.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:i,center:o}=t,u=n,c=s.util.getTypedArrayFromDType(r.dtype,s.util.sizeFromShape(r.shape)),[l,d,p,h]=r.shape,[f,m]=s.backend_util.getImageCenter(o,d,p),g=Math.sin(a),y=Math.cos(a),b=u.data.get(r.dataId).values;for(let s=0;s<l;s++){const e=s*p*d*h;for(let t=0;t<d;t++){const n=t*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let a=0;a<h;a++){const o=[l,t,r,a],u=o[2],x=o[1];let v=(u-f)*y-(x-m)*g,w=(u-f)*g+(x-m)*y;v=Math.round(v+f),w=Math.round(w+m);let k=i;if("number"!=typeof i&&(k=3===a?255:i[a]),v>=0&&v<p&&w>=0&&w<d){k=b[e+w*(p*h)+v*h+a]}c[e+n+s+a]=k}}}}return{dataId:u.write(c,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},fc=(0,pa.A)(s.Round,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),mc={kernelName:s.Round,backendName:"cpu",kernelFunc:fc};var gc=n(7742),yc=n(1);const bc={kernelName:s.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:i}=t,{shape:o}=r,{sliceRank:u,numUpdates:c,sliceSize:l,strides:d,outputSize:p}=s.backend_util.calculateShapes(i,a,o),h=n.bufferSync(a),f=n.bufferSync(i),m=(0,yc.N)(h,f,o,p,l,c,u,d,0,!0);return n.makeTensorInfo(o,m.dtype,m.values)}};function xc(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function vc(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}const wc={kernelName:s.SearchSorted,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:i}=t,{side:o}=r,u=function(e,t,n,r,a,i){const o=s.util.getArrayFromDType("int32",n*a);for(let s=0;s<n;++s){const n=e.slice(s*r,(s+1)*r),u=s*a;for(let e=0;e<a;++e)o[u+e]="left"===i?xc(n,t[e+u]):vc(n,t[e+u])}return o}(n.data.get(a.dataId).values,n.data.get(i.dataId).values,a.shape[0],a.shape[1],i.shape[1],o);return n.makeTensorInfo(i.shape,"int32",u)}};const kc={kernelName:s.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:i}=t;(0,ca.H)([r,a,i],"select");const o=r.shape.length,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values,d=(0,s.upcastType)(a.dtype,i.dtype),p=s.util.makeZerosTypedArray(s.util.sizeFromShape(a.shape),d);let h=0;const f=0===o||o>1||1===a.shape.length?1:s.util.sizeFromShape(a.shape.slice(1));for(let s=0;s<u.length;s++)for(let e=0;e<f;e++)1===u[s]?p[h++]=c[s]:p[h++]=l[s];return n.makeTensorInfo(a.shape,d,p)}},Nc=s.backend_util.SELU_SCALEALPHA,Sc=s.backend_util.SELU_SCALE,Ic=(0,pa.A)(s.Selu,(e=>e>=0?Sc*e:Nc*(Math.exp(e)-1))),Tc={kernelName:s.Selu,backendName:"cpu",kernelFunc:Ic},Cc=(0,pa.A)(s.Sign,(e=>e<0?-1:e>0?1:0)),Ec={kernelName:s.Sign,backendName:"cpu",kernelFunc:Cc},Ac=(0,pa.A)(s.Sin,(e=>Math.sin(e))),$c={kernelName:s.Sin,backendName:"cpu",kernelFunc:Ac},_c=(0,pa.A)(s.Sinh,(e=>Math.sinh(e))),Rc={kernelName:s.Sinh,backendName:"cpu",kernelFunc:_c},Fc=Math.log(1.1920928955078125e-7)+2,Dc=(0,pa.A)(s.Softplus,(e=>{const t=e>-Fc,n=e<Fc,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),Oc={kernelName:s.Softplus,backendName:"cpu",kernelFunc:Dc};const Mc={kernelName:s.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,paddings:o}=r;(0,ca.H)([a],"spaceToBatchND");const u=s.util.sizeFromShape(i),c=[[0,0]];c.push(...o);for(let s=1+i.length;s<a.shape.length;++s)c.push([0,0]);const l=qu.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:c,constantValue:0}}),d=s.backend_util.getReshaped(l.shape,i,u,!1),p=s.backend_util.getPermuted(d.length,i.length,!1),h=s.backend_util.getReshapedPermuted(l.shape,i,u,!1),f=Aa({inputs:{x:l},backend:n,attrs:{shape:d}}),m={x:f},g={perm:p},y=(0,Pa.p)({inputs:m,backend:n,attrs:g}),b=Aa({inputs:{x:y},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),b}};var zc=n(2123);const Bc={kernelName:s.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[d,p,h,f,m]=(0,zc.c)(o,r.shape,r.dtype,u,s.dtype,c,l);return[n.makeTensorInfo(p,r.dtype,d),n.makeTensorInfo([p[0]],s.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};var Lc=n(3849);const Pc={kernelName:s.SparseReshape,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(s.dataId).values),o=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[c,l,d]=(0,Lc.U)(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(l,r.dtype,c),n.makeTensorInfo([d.length],a.dtype,new Int32Array(d))]}};var Vc=n(3989);const Wc={kernelName:s.SparseSegmentMean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[c,l]=(0,Vc.V)(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(l,r.dtype,c)}};const Uc={kernelName:s.SparseSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[c,l]=(0,Vc.V)(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(l,r.dtype,c)}};const Gc={kernelName:s.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:u}=r,{sliceRank:c,numUpdates:l,sliceSize:d,strides:p,outputSize:h}=s.backend_util.calculateShapes(i,a,u),f=!1,m=n.bufferSync(a);let g;switch(i.dtype){case"bool":{const e=n.bufferSync(i),t=Boolean(n.data.get(o.dataId).values[0]);g=(0,yc.N)(m,e,u,h,d,l,c,p,t,f);break}case"float32":{const e=n.bufferSync(i),t=n.data.get(o.dataId).values[0];g=(0,yc.N)(m,e,u,h,d,l,c,p,t,f);break}case"int32":{const e=n.bufferSync(i),t=n.data.get(o.dataId).values[0];g=(0,yc.N)(m,e,u,h,d,l,c,p,t,f);break}case"string":{const e=n.bufferSync(i),t=s.util.decodeString(n.data.get(o.dataId).values[0]);g=(0,yc.N)(m,e,u,h,d,l,c,p,t,f);break}default:throw new Error(`Unsupported type ${i.dtype}`)}return n.makeTensorInfo(u,g.dtype,g.values)}};const Hc={kernelName:s.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=r,u=s.util.parseAxisParam(o,a.shape)[0],c=s.backend_util.prepareSplitSize(a,i,u),l=new Array(a.shape.length).fill(0),d=a.shape.slice();return c.map((e=>{const t=[...d];t[u]=e;const r=(0,di.tP)({inputs:{x:a},backend:n,attrs:{begin:l,size:t}});return l[u]+=e,r}))}};var jc=n(440);const qc={kernelName:s.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;(0,ca.H)(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let i=0;i<s.length;++i){const e=s[i];a[i]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Xc=(0,ba.b)(((e,t)=>{const n=e-t;return n*n})),Kc=(0,Za.j)(s.SquaredDifference,Xc),Qc={kernelName:s.SquaredDifference,backendName:"cpu",kernelFunc:Kc};var Zc=n(7693);const Yc=(0,pa.A)(s.Step,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Jc={kernelName:s.Step,backendName:"cpu",kernelFunc:Yc};var el=n(2210);const tl={kernelName:s.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:i,end:o,strides:u,beginMask:c,endMask:l,ellipsisMask:d,newAxisMask:p,shrinkAxisMask:h}=r;(0,ca.H)(a,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=s.slice_util.sliceInfo(a.shape,i,o,u,c,l,d,p,h);let k;if(g)k=Aa({inputs:{x:a},backend:n,attrs:{shape:m}});else if(y||b){s.util.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=s.slice_util.computeOutShape(x,v,w),t=(0,di.tP)({inputs:{x:a},backend:n,attrs:{begin:x,size:e}});k=Aa({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{const e=n.bufferSync(a),t=(0,el.t)(f,e,w,x);k=n.makeTensorInfo(m,t.dtype,t.values)}return k}};var nl=n(6841);const rl={kernelName:s.StringNGrams,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:c}=r,{data:l,dataSplits:d}=t,p=n.data.get(l.dataId).values,h=n.data.get(d.dataId).values,[f,m]=(0,nl.A)(p,h,s,a,i,o,u,c);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}};var sl=n(8639);const al={kernelName:s.StringSplit,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values[0],[c,l,d]=(0,sl.Q)(o,u,s),p=l.length;return[n.makeTensorInfo([p,2],"int32",c),n.makeTensorInfo([p],"string",l),n.makeTensorInfo([2],"int32",new Int32Array(d))]}};var il=n(6626);const ol={kernelName:s.StringToHashBucketFast,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=n.data.get(a.dataId).values,o=(0,il.h)(i,s);return n.makeTensorInfo(a.shape,"int32",o)}},ul=(0,pa.A)(s.Tan,(e=>Math.tan(e))),cl={kernelName:s.Tan,backendName:"cpu",kernelFunc:ul},ll=(0,pa.A)(s.Tanh,(e=>Math.tanh(e))),dl={kernelName:s.Tanh,backendName:"cpu",kernelFunc:ll};const pl={kernelName:s.TensorScatterUpdate,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:r,indices:a,updates:i}=t,{sliceRank:o,numUpdates:u,sliceSize:c,strides:l,outputSize:d}=s.backend_util.calculateShapes(i,a,r.shape),p=n.bufferSync(a),h=n.bufferSync(i),f=n.bufferSync(r),m=(0,yc.N)(p,h,r.shape,d,c,u,o,l,f,!1);return n.makeTensorInfo(r.shape,m.dtype,m.values)}};var hl=n(7723);const fl={kernelName:s.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;(0,ca.H)(s,"tile");const i=(0,hl.R)(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var ml=n(9556);const gl={kernelName:s.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r;(0,ca.H)(s,"topk");const o=n.data.get(s.dataId).values,[u,c]=(0,ml.W)(o,s.shape,s.dtype,a,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}};const yl={kernelName:s.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:a,transforms:i}=t,{interpolation:o,fillMode:u,fillValue:c,outputShape:l}=n,[d,p,h,f]=a.shape,[m,g]=null!=l?l:[p,h],y=[d,m,g,f],b=s.util.computeStrides(a.shape),x=b[0],v=b[1],w=b[2],k=s.util.computeStrides(y),N=k[0],S=k[1],I=k[2],T=s.util.getTypedArrayFromDType(a.dtype,s.util.sizeFromShape(y));T.fill(c);const C=r.data.get(a.dataId).values,E=r.data.get(i.dataId).values;for(let s=0;s<d;++s){const e=1===i.shape[0]?E:E.subarray(8*s,8*s+8);for(let t=0;t<m;++t)for(let n=0;n<g;++n)for(let r=0;r<f;++r){let a;const i=e[6]*n+e[7]*t+1;if(0===i)continue;const l=(e[0]*n+e[1]*t+e[2])/i,d=(e[3]*n+e[4]*t+e[5])/i,f=bl(l,h,u),m=bl(d,p,u);switch(o){case"nearest":a=vl(C,p,h,x,v,w,s,m,f,r,c);break;case"bilinear":a=wl(C,p,h,x,v,w,s,m,f,r,c);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}T[s*N+t*S+n*I+r]=a}return r.makeTensorInfo(y,a.dtype,T)}return{dataId:r.write(T,y,a.dtype),shape:a.shape,dtype:a.dtype}}};function bl(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return s.util.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return s.util.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return s.util.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function xl(e,t,n,r,s,a,i,o,u,c,l){return 0<=o&&o<t&&0<=u&&u<n?e[i*r+o*s+u*a+c]:l}function vl(e,t,n,r,s,a,i,o,u,c,l){return xl(e,t,n,r,s,a,i,Math.round(o),Math.round(u),c,l)}function wl(e,t,n,r,s,a,i,o,u,c,l){const d=Math.floor(o),p=Math.floor(u),h=d+1,f=p+1;return(h-o)*((f-u)*xl(e,t,n,r,s,a,i,d,p,c,l)+(u-p)*xl(e,t,n,r,s,a,i,d,f,c,l))+(o-d)*((f-u)*xl(e,t,n,r,s,a,i,h,p,c,l)+(u-p)*xl(e,t,n,r,s,a,i,h,f,c,l))}var kl=n(5638);const Nl={kernelName:s.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;(0,ca.H)(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:c}=(0,kl.S)(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([c.length],"int32",c)]}};const Sl={kernelName:s.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],u=new Array(i-1);let c=0;for(let h=0;h<i;h++)h!==a&&(u[c++]=s.shape[h]);const l=new Array(i).fill(0),d=s.shape.slice();d[a]=1;const p=new Array(o);for(let h=0;h<p.length;h++){l[a]=h;const e=(0,di.tP)({inputs:{x:s},backend:n,attrs:{begin:l,size:d}});p[h]=Aa({inputs:{x:e},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(e)}return p}};const Il={kernelName:s.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:i}=t,{numSegments:o}=r;(0,ca.H)(a,"unsortedSegmentSum");const u=[],c=[],l=a.shape.length-i.shape.length;let d=i;for(let s=0;s<l;++s){const e=yo({inputs:{input:d},backend:n,attrs:{dim:s+1}});d=e,c.push(e)}for(let h=0;h<o;++h){const e=s.util.createScalarValue(h,"int32"),t=n.makeTensorInfo([],"int32",e),r=(0,io.Dg)({inputs:{a:t,b:d},backend:n}),i=(0,yi.pj)({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),o=(0,eo.Jp)({inputs:{a:i,b:a},backend:n}),l=no({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});u.push(l),c.push(t),c.push(r),c.push(i),c.push(o),c.push(l)}const p=Hu({inputs:u,backend:n,attrs:{axis:0}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},Tl=[Fa,Da.fC,Ma,Ba,Ea.j4,La,Va,Wa,Ua,Ga,ja,Xa,Qa,ei,ni,ii,oi,ui,ci,Ra,li,pi,fi,mi.T0,gi,yi.Mq,bi.y2,vi,wi.z,ki,Ei,$i,_i,Ri,Fi,Di,Oi,zi,Li,Pi,Vi,Wi,Ui,Gi,ji,qi,Xi,Ki,Qi,Zi,Yi,Ji,so,fa,ao,io.Kx,mo,go.SX,bo,xo.Vu,Co,Ao,$o,_o.Ao,Do,Oo,Mo,Bo,Po,Vo.Ce,Wo.V,ma.I,Uo,Ii,Ho,qo,Ko,ya,Qo.zh,Zo.m3,Jo,eu.xM,nu,au,ou,lu,du,pu,gu,yu.eJ,bu,xu,vu,wu,ku,Nu,Su,Iu.u0,Tu,Au,Ru,eo.f$,Fu.AF,Ou,zu,Lu,Pu.nP,Vu,Gu,ju,qu,Qu,wa,Zu.Iz,Ju,tc,rc,ac,Ti.O,ko,oc,Na,Ia,$a,uc,cc,lc,dc,pc,hc,mc,gc.FY,bc,wc,kc,Tc,Ta.BP,Ec,$c,Rc,di.C6,_u,Oc,Mc,Bc,Pc,Wc,Uc,Gc,Hc,jc.cz,qc,Qc,Zc.j,Jc,tl,rl,al,ol,No.GR,ro,cl,dl,pl,fl,gl,yl,Pa.b,Nl,Sl,Il,Uu];for(const _y of Tl)(0,s.registerKernel)(_y);var Cl=n(4739);s.device_util.isBrowser()&&(0,s.registerBackend)("webgl",(()=>new Cl.QC),2);var El=n(6697);const Al="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class $l{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=(0,El.C9)(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}var _l=n(1034),Rl=n(5156);const Fl="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class Dl{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=(0,El.C9)(a);let i="";if(r)if(0===a||1===s.util.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(i=`\n          ${(0,Rl.kW)(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?i+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=(0,_l.Ky)("coords",a);this.enableShapeUniforms?i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function Ol(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Ml={kernelName:s.Identity,backendName:"webgl",kernelFunc:Ol};function zl(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=Ol({inputs:{x:r},backend:n}),u=Ol({inputs:{x:s},backend:n});return i.complexTensorInfos={real:o,imag:u},a}const Bl={kernelName:s.Complex,backendName:"webgl",kernelFunc:zl},Ll="return (a < 0.) ? b * a : a;",Pl="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Vl={kernelName:s.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:i}=r,o=n.makeTensorInfo([],"float32",s.util.createScalarValue(i,"float32")),u=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dl(Pl,a.shape,o.shape):new $l(Ll,a.shape,o.shape),c=n.runWebGLProgram(u,[a,o],"float32");return n.disposeIntermediateTensorInfo(o),c}},Wl="return (a < 0.) ? b * a : a;",Ul="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Gl={kernelName:s.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t,i=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dl(Ul,r.shape,a.shape):new $l(Wl,r.shape,a.shape);return n.runWebGLProgram(i,[r,a],"float32")}};var Hl=n(4518),jl=n(9365);const ql="if (isnan(x)) return x;";function Xl({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:i})=>{const{x:o}=a,u=i,c=r||o.dtype;if(u.shouldExecuteOnCPU([o])&&null!=n){const e=u.texData.get(o.dataId),t=n(e.values,c);return u.makeTensorInfo(o.shape,c,t)}let l;return l=(0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new jl.cc(o.shape,t):new Hl.l(o.shape,e),u.runWebGLProgram(l,[o],c)}}function Kl({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:i}){return({inputs:o,backend:u})=>{const{a:c,b:l}=o,d=u;if(r&&"complex64"===c.dtype){const t=d.texData.get(c.dataId),n=d.texData.get(l.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:c.shape},i={dataId:r.dataId,dtype:r.dtype,shape:l.shape},o=new $l(e,c.shape,l.shape);return d.runWebGLProgram(o,[a,i],(0,s.upcastType)(n.dtype,r.dtype))})),i=zl({inputs:{real:r,imag:a},backend:d});return d.disposeIntermediateTensorInfo(r),d.disposeIntermediateTensorInfo(a),i}const p=i||(0,s.upcastType)(c.dtype,l.dtype);if(("string"===c.dtype||"string"===l.dtype||d.shouldExecuteOnCPU([c,l]))&&null!=a){const e=d.texData.get(c.dataId).values,t=d.texData.get(l.dataId).values,n="string"===c.dtype?s.backend_util.fromUint8ToStringArray(e):e,r="string"===c.dtype?s.backend_util.fromUint8ToStringArray(t):t,[i,o]=a(c.shape,l.shape,n,r,p),u=d.makeTensorInfo(o,p);return d.texData.get(u.dataId).values=i,u}let h;return h=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Dl(t,c.shape,l.shape,n):new $l(e,c.shape,l.shape),d.runWebGLProgram(h,[c,l],p)}}function Ql(e,t=!1){if("linear"===e)return t?jl.t$:Hl.t$;if("relu"===e)return t?jl.RX:Hl.RX;if("elu"===e)return t?jl.Cv:Hl.Cv;if("relu6"===e)return t?jl.eW:Hl.eW;if("prelu"===e)return t?Ul:Wl;if("leakyrelu"===e)return t?Pl:Ll;if("sigmoid"===e)return t?jl.Tq:Hl.Tq;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Zl{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=(0,El.C9)(this.outputShape.length);const c=r?e[1]:e[2],l=Math.ceil(c/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=s?"rc.z, i * 2":"i * 2, rc.z",h=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${x};\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const Yl={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class Jl{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var ed=n(2368);const td="return a * b;";function nd(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,i=s.backend_util.upcastType(r.dtype,a.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),s=new Jl(Yl.REAL,r.shape,a.shape),i=new Jl(Yl.IMAG,r.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],u=n.runWebGLProgram(s,o,"float32"),c=n.runWebGLProgram(i,o,"float32"),l=zl({inputs:{real:u,imag:c},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),l}if(n.shouldExecuteOnCPU([r,a])){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),[s,o]=(0,ed.Th)(r.shape,a.shape,e.values,t.values,i),u=n.makeTensorInfo(o,i);return n.texData.get(u.dataId).values=s,u}let o;return o=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dl(td,r.shape,a.shape):new $l(td,r.shape,a.shape),n.runWebGLProgram(o,[r,a],i)}const rd={kernelName:s.Multiply,backendName:"webgl",kernelFunc:nd};var sd=n(8831),ad=n(1906);function id(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:i}=r,o=n,u=s.util.sizeFromShape(a.shape),c=s.util.inferFromImplicitShape(i,u),l=s.util.sizeFromShape(c);s.util.assert(u===l,(()=>`The new shape (${c}) has ${l} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const d=o.texData.get(a.dataId);return!d.isPacked||(0,ad.oT)(a.shape,c)||null!==d.texture&&(0,ad.oT)(d.shape,c)?(o.incRef(a.dataId),{dataId:a.dataId,shape:c,dtype:a.dtype}):function(e,t,n){const r=[(0,ad.Cp)(e.shape),...(0,ad.W8)(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[(0,ad.Cp)(t),...(0,ad.W8)(t)],i=new sd.v(a,r),o=[r],u=n.runWebGLProgram(i,[s],e.dtype,o,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(a,c,o)}const od={kernelName:s.Reshape,backendName:"webgl",kernelFunc:id};class ud{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:i}=e;this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4;let c="sumValue += dot(values, ones);";if(null!=t){const e=1/t;c=`sumValue += dot(values * ${s.util.isInt(e)?e.toPrecision(2):e}, ones);`}let l="";a%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}class cd{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const c=4*Math.floor(n/4),l=n%4;let d=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===l}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===l}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===l}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function ld(e,t,n,r){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=s.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let i=e;for(let s=0;s<a.length;s++){const{inSize:o,windowSize:u,outSize:c}=a[s];let l,d;l="mean"===n?0===s?new ud({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:c},o):new ud({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:c}):new cd({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:c},n),d=i,i=r.runWebGLProgram(l,[i],t),d.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(d)}return i}class dd{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const r=(0,Rl.kW)(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let s=0;s<e.length;s++)r[e[s]]=n[s];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class pd{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let c=0;c<n.length;c++)n[c]=e[t[c]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=(0,Rl.kW)(this.rank),s=(0,_l.k6)("rc",this.rank),a=new Array(this.rank);for(let c=0;c<t.length;c++)a[t[c]]=s[c];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function hd(e,t,n){const r=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pd(e.shape,t):new dd(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function fd(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;return function(e,t,n,r){const a=t,i=e.shape.length,o=s.util.parseAxisParam(a,e.shape);let u=o;const c=s.backend_util.getAxesPermutation(u,i),l=null!=c;let d=e;l&&(d=hd(e,c,r),u=s.backend_util.getInnerMostAxes(u.length,i)),s.backend_util.assertAxesAreInnerMostDims("sum",u,i);const[p,h]=s.backend_util.computeOutAndReduceShapes(d.shape,u);let f=p;n&&(f=s.backend_util.expandShapeToKeepDim(p,o));const m=s.util.sizeFromShape(h),g=id({inputs:{x:d},attrs:{shape:[s.util.sizeFromShape(e.shape)/m,m]},backend:r}),y=ld(g,(0,s.sumOutType)(e.dtype),"sum",r),b=id({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),l&&r.disposeIntermediateTensorInfo(d),b}(a,i,o,n)}const md={kernelName:s.Sum,backendName:"webgl",kernelFunc:fd};function gd(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=s.shape.length,u=new Array(o);for(let l=0;l<u.length;l++)u[l]=s.shape[a[l]];let c;if(i.shouldExecuteOnCPU([s])){const e=i.texData.get(s.dataId).values,t=(0,ed.Fv)(e,s.shape,s.dtype,a,u);c=i.makeTensorInfo(u,s.dtype);i.texData.get(c.dataId).values=t}else c=hd(s,a,i);return c}const yd={kernelName:s.Transpose,backendName:"webgl",kernelFunc:gd},bd=1e3;function xd({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:c=null}){const l=e.shape.length,d=t.shape.length,p=n?e.shape[l-2]:e.shape[l-1],h=r?t.shape[d-1]:t.shape[d-2],f=n?e.shape[l-1]:e.shape[l-2],m=r?t.shape[d-2]:t.shape[d-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=s.util.sizeFromShape(g),x=s.util.sizeFromShape(y),v=s.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);s.util.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[b,p,f]:[b,f,p],k=r?[x,m,h]:[x,h,m],N=id({inputs:{x:e},backend:a,attrs:{shape:w}}),S=id({inputs:{x:t},backend:a,attrs:{shape:k}}),I=[N,S],T=Math.max(b,x),C=n?N.shape[1]:N.shape[2],E=null!=i,A=null!=o,$="leakyrelu"===c,_=null!=c?Ql(c,!0):null;let R;if((1===f||1===m)&&C>bd&&!1===(E||A||$||null!=_)){let e=N,t=S;n&&(e=gd({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),I.push(e)),r&&(t=gd({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),I.push(t));const s=1===m;let i=e;1!==m&&(i=id({inputs:{x:e},backend:a,attrs:{shape:[T,C,1]}}),I.push(i));const o=1===m?2:1;let u=t;s&&(u=id({inputs:{x:t},backend:a,attrs:{shape:[T,1,C]}}),I.push(u));const c=nd({inputs:{a:i,b:u},backend:a});R=fd({inputs:{x:c},backend:a,attrs:{axis:o,keepDims:!0}}),I.push(c)}else{const c=(0,s.upcastType)(e.dtype,t.dtype),l=new Zl(w,k,[T,f,m],n,r,E,_,A,$),d=[N,S];if(null!=i&&d.push(i),A&&d.push(o),$){const e=a.makeTensorInfo([],"float32",s.util.createScalarValue(u,"float32"));d.push(e),I.push(e)}R=a.runWebGLProgram(l,d,c)}const F=id({inputs:{x:R},backend:a,attrs:{shape:v}});I.push(R);for(const s of I)a.disposeIntermediateTensorInfo(s);return F}const vd={kernelName:s._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:d}=r;return xd({a:s,b:a,transposeA:u,transposeB:c,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:d,activation:l})}},wd="return abs(x);";const kd={kernelName:s.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=(0,ed.CJ)(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let a;return a=(0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new jl.cc(r.shape,wd):new Hl.l(r.shape,wd),n.runWebGLProgram(a,[r],r.dtype)}},Nd=Xl({opSnippet:Hl.D1+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Sd={kernelName:s.Acos,backendName:"webgl",kernelFunc:Nd},Id=Xl({opSnippet:Hl.D1+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Td={kernelName:s.Acosh,backendName:"webgl",kernelFunc:Id},Cd="return a + b;",Ed=Kl({opSnippet:Cd,packedOpSnippet:Cd,supportsComplex:!0,cpuKernelImpl:ed.cK}),Ad={kernelName:s.Add,backendName:"webgl",kernelFunc:Ed};class $d{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class _d{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const Rd={kernelName:s.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,a=n;if(1===a.length)return Ol({inputs:{x:a[0]},backend:r});if(a.length>(0,s.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:r}),s=e({inputs:a.slice(t),backend:r});return e({inputs:[n,s],backend:r})}const i=a.map((e=>e.dtype)).reduce(((e,t)=>(0,s.upcastType)(e,t))),o=a.map((e=>e.shape)),u=(0,s.env)().getBool("WEBGL_PACK")?new _d(a[0].shape,o):new $d(a[0].shape,o);return r.runWebGLProgram(u,a,i)}};const Fd={kernelName:s.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,u=a.shape.length,c=s.util.parseAxisParam(i,a.shape);let l=c;const d=s.backend_util.getAxesPermutation(l,u);let p=a;null!=d&&(p=gd({inputs:{x:a},backend:n,attrs:{perm:d}}),l=s.backend_util.getInnerMostAxes(l.length,u)),s.backend_util.assertAxesAreInnerMostDims("all",l,u);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,l),m=id({inputs:{x:p},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(f)]}}),g=ld(m,m.dtype,"all",n);let y;if(o){y=id({inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(h,c)}})}else y=id({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}};const Dd={kernelName:s.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,u=a.shape.length,c=s.util.parseAxisParam(i,a.shape);let l=c;const d=s.backend_util.getAxesPermutation(l,u);let p=a;null!=d&&(p=gd({inputs:{x:a},backend:n,attrs:{perm:d}}),l=s.backend_util.getInnerMostAxes(l.length,u)),s.backend_util.assertAxesAreInnerMostDims("any",l,u);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,l),m=id({inputs:{x:p},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(f)]}}),g=ld(m,m.dtype,"any",n);let y;if(o){y=id({inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(h,c)}})}else y=id({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}};class Od{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Md{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,s.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],i=Math.ceil(a/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,u=o.length,c=(0,Rl.kW)(u),l=(0,_l.Ky)("coords",u);let d,p;if(1===i){p=u+1;const e=(0,Rl.kW)(p);d=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[u-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[u-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[u-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[u-2]};`}else p=u,d=`\n        ${c} sourceLocR = coords;\n        ++${l[u-1]};\n        ${c} sourceLocG = coords;\n        ++${l[u-2]};\n        ${c} sourceLocA = coords;\n        --${l[u-1]};\n        ${c} sourceLocB = coords;\n        --${l[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],m=h.map((e=>"int "+e)),g=(0,_l.Ky)("sourceLocR",p-1).concat("inIdx.r"),y=(0,_l.Ky)("sourceLocG",p-1).concat("inIdx.g"),b=(0,_l.Ky)("sourceLocB",p-1).concat("inIdx.b"),x=(0,_l.Ky)("sourceLocA",p-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${c} coords = getOutputCoords();\n        bool hasNextCol = ${l[u-1]} < ${o[u-1]-1};\n        bool hasNextRow = ${l[u-2]} < ${o[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function zd(e,t,n,r=null){let a=t.shape[0],i=t.shape[1];null!=r&&(a=r.shape[0],i=r.shape[1]);const o=s.backend_util.computeOptimalWindowSize(i),u={windowSize:o,inSize:i,batchSize:a,outSize:Math.ceil(i/o)},c=new Od(u,n,null==r),l=[t];null!=r&&l.push(r);const d=e.runWebGLProgram(c,l,"int32");if(1===d.shape[1])return d;const p=zd(e,t,n,d);return e.disposeIntermediateTensorInfo(d),p}function Bd(e,t,n,r=null){const a=null!=r?r.shape:t.shape,i=a[a.length-1],o=s.backend_util.computeOptimalWindowSize(i),u=new Md(a,o,n,null==r),c=null==r?[t]:[t,r],l=e.runWebGLProgram(u,c,"int32");if(l.shape.length===t.shape.length){const r=Bd(e,t,n,l);return e.disposeIntermediateTensorInfo(l),r}return l}function Ld(e,t,n,r){const a=[n];if(s.backend_util.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!(0,s.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],i=e.texData.get(t.dataId);let o=t;null!==i&&i.isPacked&&(o=e.unpackTensor(t),n.push(o));const[u,c]=s.backend_util.computeOutAndReduceShapes(o.shape,a),l=s.util.sizeFromShape(c),d=id({inputs:{x:o},backend:e,attrs:{shape:[-1,l]}});n.push(d);const p=zd(e,d,r);n.push(p);const h=id({inputs:{x:p},backend:e,attrs:{shape:u}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return Bd(e,t,r)}const Pd={kernelName:s.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;let o=s.util.parseAxisParam(i,a.shape);const u=s.backend_util.getAxesPermutation(o,a.shape.length);let c=a;const l=[];null!=u&&(c=gd({inputs:{x:a},backend:n,attrs:{perm:u}}),l.push(c),o=s.backend_util.getInnerMostAxes(o.length,c.shape.length)),s.backend_util.assertAxesAreInnerMostDims("argMax",[o[0]],c.shape.length);const d=Ld(n,c,o[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const Vd={kernelName:s.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;let o=s.util.parseAxisParam(i,a.shape);const u=s.backend_util.getAxesPermutation(o,a.shape.length);let c=a;const l=[];null!=u&&(c=gd({inputs:{x:a},backend:n,attrs:{perm:u}}),l.push(c),o=s.backend_util.getInnerMostAxes(o.length,c.shape.length)),s.backend_util.assertAxesAreInnerMostDims("argMin",[o[0]],c.shape.length);const d=Ld(n,c,o[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},Wd=Xl({opSnippet:Hl.D1+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Ud={kernelName:s.Asin,backendName:"webgl",kernelFunc:Wd},Gd=Xl({opSnippet:Hl.D1+"return log(x + sqrt(x * x + 1.0));"}),Hd={kernelName:s.Asinh,backendName:"webgl",kernelFunc:Gd},jd=Xl({opSnippet:Hl.D1+"\n  return atan(x);\n"}),qd={kernelName:s.Atan,backendName:"webgl",kernelFunc:jd},Xd=Kl({opSnippet:Al+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Fl+"\n  return result;\n"}),Kd={kernelName:s.Atan2,backendName:"webgl",kernelFunc:Xd},Qd=Xl({opSnippet:Hl.D1+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Zd={kernelName:s.Atanh,backendName:"webgl",kernelFunc:Qd};class Yd{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${l};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),v=a%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${h});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${l};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Jd{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,c=e.dilationDepth,l=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${l}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / max(count, 1.0)");const w=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n        }\n        setOutput(${v});\n      }\n    `}}const ep={kernelName:s.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;(0,ad.HS)(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=s.backend_util.computePool2DInfo(a.shape,i,o,1,u,c);if(1===l.filterWidth&&1===l.filterHeight&&s.util.arraysEqual(l.inShape,l.outShape))return Ol({inputs:{x:a},backend:n});const d=new Yd(l,"avg",!1);return n.runWebGLProgram(d,[a],"float32")}};const tp={kernelName:s.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:c,dataFormat:l}=r,d=s.backend_util.computePool3DInfo(a.shape,i,o,[1,1,1],u,c,l),p=new Jd(d,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};class np{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.top,l=u-1-e.padInfo.left,d=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${l});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rp{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=l-1-e.padInfo.front,f=d-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${c}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const sp={kernelName:s.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i}=t,o=i,{filterSize:u,strides:c,pad:l,dimRoundingMode:d}=r,p=s.backend_util.computePool3DInfo(o.shape,u,c,[1,1,1],l,d),h=new rp(p);return n.runWebGLProgram(h,[a],o.dtype)}};const ap={kernelName:s.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i}=t,o=i;(0,ad.HS)([a,i],"avgPoolGrad");const{filterSize:u,strides:c,pad:l}=r,d=s.backend_util.computePool2DInfo(o.shape,u,c,1,l),p=new np(d);return n.runWebGLProgram(p,[a],o.dtype)}};const ip={kernelName:s.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return xd({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class op{constructor(e,t,n,r,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],s.backend_util.assertAndGetBroadcastShape(e,t),s.backend_util.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(s.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let u="1.0";null!=a&&(s.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class up{constructor(e,t,n,r,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],s.backend_util.assertAndGetBroadcastShape(e,t),s.backend_util.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(s.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=a&&(s.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const cp={kernelName:s.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:a,variance:i,offset:o,scale:u}=e;s.util.assert(a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),s.util.assert(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),s.util.assert(null==u||a.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:c}=n;null==c&&(c=.001);const l=[r,a,i];let d=null;null!=o&&(d=o.shape,l.push(o));let p=null;null!=u&&(p=u.shape,l.push(u));const h=(0,s.env)().getBool("WEBGL_PACK_NORMALIZATION")?new up(r.shape,a.shape,i.shape,d,p,c):new op(r.shape,a.shape,i.shape,d,p,c);return t.runWebGLProgram(h,l,l[0].dtype)}};class lp{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=(0,Rl.kW)(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return dp.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${dp[t]} = start[${t}] + coords.${dp[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const dp=["x","y","z","w","u","v"];class pp{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=(0,Rl.kW)(this.rank),n=(0,_l.Ky)("coords",this.rank),r=(0,_l.Ky)("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function hp(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:i,size:o}=r,[u,c]=s.slice_util.parseSliceParams(a,i,o);if(s.slice_util.assertParamsValid(a,u,c),0===s.util.sizeFromShape(c))return n.makeTensorInfo(c,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=(0,ed.nT)(e.values,u,c,a.shape,a.dtype);return n.makeTensorInfo(c,a.dtype,t)}const{isPacked:l}=n.texData.get(a.dataId),d=s.slice_util.isSliceContinous(a.shape,u,c);if(l||!d){const e=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pp(c):new lp(c),t=[u];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){const a=r.texData.get(e.dataId),i=r.makeTensorInfo(n,e.dtype),o=r.texData.get(i.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let u=s.slice_util.computeFlatOffset(t,s.util.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),o.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const c=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,c+1),i}(a,u,c,n)}const fp={kernelName:s.Slice,backendName:"webgl",kernelFunc:hp},mp={kernelName:s.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,crops:o}=r;s.util.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const u=i.reduce(((e,t)=>e*t)),c=s.backend_util.getReshaped(a.shape,i,u),l=s.backend_util.getPermuted(c.length,i.length),d=s.backend_util.getReshapedPermuted(a.shape,i,u),p=s.backend_util.getSliceBeginCoords(o,i.length),h=s.backend_util.getSliceSize(d,o,i.length),f=[],m=id({inputs:{x:a},backend:n,attrs:{shape:c}}),g=gd({inputs:{x:m},backend:n,attrs:{perm:l}}),y=id({inputs:{x:g},backend:n,attrs:{shape:d}}),b=hp({inputs:{x:y},backend:n,attrs:{begin:p,size:h}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const gp={kernelName:s.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.readSync(s.dataId),u=n.readSync(a.dataId),c=(0,ed.qO)(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,c)}};const yp={kernelName:s.BitwiseAnd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,i=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=(0,s.env)().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([r,a])||1===o){const e=n.texData.get(r.dataId).values,t=n.texData.get(a.dataId).values,[s,i]=(0,ed.XM)(r.shape,a.shape,e,t,r.dtype),o=n.makeTensorInfo(i,r.dtype);return n.texData.get(o.dataId).values=s,o}let u;return u=i?new Dl("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",r.shape,a.shape,!1):new $l("\n  return float(int(a.r) & int(b.r));\n",r.shape,a.shape),n.runWebGLProgram(u,[r,a],r.dtype)}};const bp={kernelName:s.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,i=n.readSync(r.dataId),o=n.readSync(a.dataId),u=s.backend_util.assertAndGetBroadcastShape(Array.from(i),Array.from(o));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},xp=Kl({opSnippet:"return float(a != b);",cpuKernelImpl:ed.cZ,dtype:"bool"}),vp={kernelName:s.NotEqual,backendName:"webgl",kernelFunc:xp};function wp(e){const{inputs:t,backend:n}=e,{input:r}=t;return Ol({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const kp={kernelName:s.Real,backendName:"webgl",kernelFunc:wp},Np="return float(int(x));";const Sp={kernelName:s.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return Ol({inputs:{x:i},backend:r});const t=s.zeros(i.shape),n=e({inputs:{x:i},backend:r,attrs:{dtype:"float32"}}),a=zl({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===i.dtype){const t=wp({inputs:{input:i},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!s.util.hasEncodingLoss(i.dtype,o)){const e=Ol({inputs:{x:i},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([i])){const e=r.texData.get(i.dataId).values,[t,n,s]=(0,ed.cm)(e,i.shape,i.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return function(e,t){const n=new Hl.l(e.shape,Np),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(i,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",s.util.getTypedArrayFromDType("bool",1)),t=xp({inputs:{a:i,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},Ip="return ceil(x);",Tp=Xl({opSnippet:Ip,packedOpSnippet:Ip,cpuKernelImpl:ed.pk}),Cp={kernelName:s.Ceil,backendName:"webgl",kernelFunc:Tp};class Ep{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Ap{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const $p={kernelName:s.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{clipValueMin:i,clipValueMax:o}=r;let u;u=(0,s.env)().getBool("WEBGL_PACK_CLIP")?new Ap(a.shape):new Ep(a.shape);const c=[[i],[o]];return n.runWebGLProgram(u,[a],a.dtype,c)}};class _p{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Rp(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Fp={kernelName:s.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new _p(r.shape),i=[Rp(r,s.complexTensorInfos.real),Rp(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class Dp{constructor(e){this.outputShape=[],this.outputShape=s.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let s=1;s<t.length;s++)t[s]=t[s-1]+e[s][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let s=1;s<t.length;s++){const e=t[s-1];n.push(`else if (yC < ${t[s]}) setOutput(getT${s}(yR, yC-${e}));`)}const r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Op{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=s.backend_util.computeOutShape(e,t);const n=this.outputShape,r=n.length,a=(0,Rl.kW)(r),i=(0,_l.Ky)("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const u=new Array(e.length-1);u[0]=e[0][t];for(let s=1;s<u.length;s++)u[s]=u[s-1]+e[s][t];const c=o[t],l=o.slice(-2),d=o.join();let p=`if (${c} < ${u[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${l.join()}));\n        }`;for(let s=1;s<u.length;s++){const e=u[s-1];p+=`\n        if (${c} < ${u[s]}  && ${c} >= ${u[s-1]}) {\n          return getChannel(\n            getT${s}(${Mp(o,c,e)}),\n            vec2(${Mp(l,c,e)}));\n        }`}const h=u.length,f=u[u.length-1];p+=`\n        return getChannel(\n          getT${h}(${Mp(o,c,f)}),\n          vec2(${Mp(l,c,f)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[r-1]} = ${i[r-1]} + 1;\n        if (${i[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[r-2]} = ${i[r-2]} + 1;\n        if (${i[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[r-1]} = ${i[r-1]} - 1;\n        if (${i[r-2]} < ${n[r-2]} &&\n            ${i[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function Mp(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function zp(e){const{inputs:t,backend:n}=e,{input:r}=t;return Ol({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const Bp={kernelName:s.Imag,backendName:"webgl",kernelFunc:zp};function Lp(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>wp({inputs:{input:e},backend:n}))),s=e.map((e=>zp({inputs:{input:e},backend:n}))),a=Lp(r,t,n),i=Lp(s,t,n),o=zl({inputs:{real:a,imag:i},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let a=n.shouldExecuteOnCPU(e);if("string"===r&&(a=!0),a){const a=e.map((e=>{const r=s.util.sizeFromShape(e.shape.slice(t));return id({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),i=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=s.backend_util.computeOutShape(a.map((e=>e.shape)),1),u=1===a[0].shape[0],c=(0,ed.n7)(i,o,r,u),l=s.backend_util.computeOutShape(e.map((e=>e.shape)),t),d=n.makeTensorInfo(l,r,c);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const i=e.filter((e=>s.util.sizeFromShape(e.shape)>0)),o=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&i[0].shape.length>1;if(1===i.length){const t=o?new Hl.l(e[0].shape,Hl.bl):new jl.cc(e[0].shape,Hl.bl);return n.runWebGLProgram(t,e,r)}const u=(0,s.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(i.length>u){const e=[];for(let s=0;s<i.length;s+=u){const r=i.slice(s,s+u);e.push(Lp(r,t,n))}const r=Lp(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return r}if(o){const e=new Op(i.map((e=>e.shape)),t);return n.runWebGLProgram(e,i,r)}const{tensors2D:c,outShape:l}=function(e,t,n){const r=s.backend_util.computeOutShape(e.map((e=>e.shape)),t),a=e.map((e=>id({inputs:{x:e},attrs:{shape:[-1,s.util.sizeFromShape(e.shape.slice(t))]},backend:n})));return{tensors2D:a,outShape:r}}(i,t,n),d=new Dp(c.map((e=>e.shape))),p=n.runWebGLProgram(d,c,r);c.forEach((e=>n.disposeIntermediateTensorInfo(e)));const h=id({inputs:{x:p},attrs:{shape:l},backend:n});return n.disposeIntermediateTensorInfo(p),h}function Pp(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,i=s.util.parseAxisParam(a,t[0].shape)[0],o=t.map((e=>e.shape));s.backend_util.assertParamsConsistent(o,i);const u=s.backend_util.computeOutShape(t.map((e=>e.shape)),i);if(0===s.util.sizeFromShape(u))return n.makeTensorInfo(u,t[0].dtype,[]);const c=t.filter((e=>s.util.sizeFromShape(e.shape)>0));return 1===c.length?Ol({inputs:{x:c[0]},backend:n}):Lp(c,i,n)}const Vp={kernelName:s.Concat,backendName:"webgl",kernelFunc:Pp};class Wp{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,c=e.dilationHeight,l=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",v="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class Up{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${l}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Gp{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=(0,El.C9)(this.outputShape.length);const i=e.padInfo.left,o=e.strideWidth,u=e.dilationWidth,c=e.filterHeight,l=e.filterWidth,d=l;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let s=0;s<l;s++)p+=`\n           vec4 xTexelC${2*s};\n           int xTexelC${2*s}Ready;\n           vec4 xTexelC${2*s+1};\n           int xTexelC${2*s+1}Ready;\n           vec4 xC${s};`;p+=`\n     for (int r = 0; r < ${c}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let s=0;s<l;s++)p+=`\n           xTexelC${2*s} = vec4(0.0);\n           xTexelC${2*s}Ready = 0;\n           xTexelC${2*s+1} = vec4(0.0);\n           xTexelC${2*s+1}Ready = 0;\n           xC${s} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let g=0;g<(d+1)/2;g++){const t=2*g;if(p+=`\n           xC = xCCorner + ${t*u};\n           `,1===o){if(t<l&&(i%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n               `,p+=1===u&&t>0?`\n                 xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                   } else {\n                     xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xC${t} = xTexelC${t};\n                 `,t+1<l)){const e=i%2==0?s.util.nearestLargerEven(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                     xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${t+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${t+1}Ready = 1;\n                   }\n                   `,p+=u>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                     } else {\n                      xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                     }\n                     `:`\n                     xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                     `):p+=1===e?`\n                     xC${t+1} = xTexelC${t};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                       xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${t+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${t+1}Ready = 1;\n                     }\n\n                     xC${t+1} = xTexelC${t+1};\n                     `}}else t<l&&(i%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n               `,t+1<l&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(\n                   xTexelC${t}.xy, xTexelC${t+1}.xy);\n               `,t+1<l&&(p+=`\n                   xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                 `)));t<l&&(p+=`\n             wTexel = getW(r, ${t}, d1, d2);\n             dotProd += xC${t}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${t}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,t+1<l&&(p+=`\n               wTexel = getW(r, ${t+1}, d1, d2);\n               dotProd += xC${t+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${t+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",f="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}var Hp=n(9610);class jp{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=(0,El.C9)(this.outputShape.length);const{dataFormat:n}=t,r=(0,Hp.A)(),s="channelsLast"===n,a=s?1:2,i=s?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let e=0;e<=1;e++)u+=`\n          blockIndex = rc.z + ${e};\n          pos = rc.y + ${c};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+e}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+e}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function qp(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function Xp({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const c=e.shape,l=r.texData.get(e.dataId),d=n.inChannels,p=c[0]*c[1]*c[2],h=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[];if(null!=i){const e=qp(i.shape,f);null!=e&&(i=id({inputs:{x:i},backend:r,attrs:{shape:e}}),g.push(i))}if(null!=a){const e=qp(a.shape,f);null!=e&&(a=id({inputs:{x:a},backend:r,attrs:{shape:e}}),g.push(a))}if(!((1===p||1===h)&&d>bd)&&l.isPacked&&f&&null!=l.texture&&c[2]%2!=0&&s.util.arraysEqual(l.shape.slice(-3),c.slice(-3))){const d=c[0]*c[1]*(c[2]+1),p={dataId:e.dataId,shape:[1,d,n.inChannels],dtype:e.dtype},h=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,s.util.assert(ad.oT(l.shape,p.shape),(()=>`packed reshape ${l.shape} to ${p.shape} isn't free`));const f=id({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(f);const y=xd({a:p,b:f,backend:r,transposeA:false,transposeB:false,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o}),b=r.texData.get(y.dataId);s.util.assert(b.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=h,b.shape=n.outShape,m=Ol({inputs:{x:y},backend:r}),m.shape=n.outShape,g.push(y)}else{const s=n.outHeight*n.outWidth,c=id({inputs:{x:e},backend:r,attrs:{shape:f?[n.batchSize,s,n.inChannels]:[n.batchSize,n.inChannels,s]}}),l=id({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),d=xd({a:f?c:l,b:f?l:c,transposeA:!f,transposeB:false,backend:r,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o});m=id({inputs:{x:d},backend:r,attrs:{shape:n.outShape}}),g.push(c),g.push(l),g.push(d)}for(const s of g)r.disposeIntermediateTensorInfo(s);return m}function Kp({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const{filterWidth:c,filterHeight:l,inChannels:d,outWidth:p,outHeight:h,dataFormat:f}=n,m="channelsLast"===f,g=c*l*d,y=h*p,b=[n.batchSize,g,y],x=[];if(null!=i){const e=qp(i.shape,m);null!=e&&(i=id({inputs:{x:i},backend:r,attrs:{shape:e}}),x.push(i))}if(null!=a){const e=qp(a.shape,m);null!=e&&(a=id({inputs:{x:a},backend:r,attrs:{shape:e}}),x.push(a))}const v=id({inputs:{x:t},backend:r,attrs:{shape:[1,g,s.util.sizeFromShape(t.shape)/g]}});x.push(v);const w=new jp(b,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],N=r.runWebGLProgram(w,[e],"float32",k),S=id({inputs:{x:N},backend:r,attrs:{shape:b}});x.push(N),x.push(S);const I=null!=a,T=null!=i,C="leakyrelu"===u,E=u?Ql(u,!0):null,A=new Zl(m?S.shape:v.shape,m?v.shape:S.shape,m?[n.batchSize,y,n.outChannels]:[n.batchSize,n.outChannels,y],!0,!1,I,E,T,C),$=m?[S,v]:[v,S];if(a&&$.push(a),T&&$.push(i),C){const e=r.makeTensorInfo([],"float32",s.util.createScalarValue(o,"float32"));$.push(e),x.push(e)}const _=r.runWebGLProgram(A,$,"float32"),R=id({inputs:{x:_},backend:r,attrs:{shape:n.outShape}});x.push(_);for(const s of x)r.disposeIntermediateTensorInfo(s);return R}const Qp={kernelName:s.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dataFormat:c,dilations:l,dimRoundingMode:d}=r,p=s.backend_util.convertConv2DDataFormat(c),h=s.backend_util.computeConv2DInfo(a.shape,i.shape,o,l,u,d,!1,p);let f;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&(0,s.env)().getBool("WEBGL_EXP_CONV")){const e=new Gp(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];f=n.runWebGLProgram(e,[a,i],"float32",t)}else if((0,s.env)().getBool("WEBGL_CONV_IM2COL"))f=Kp({x:a,filter:i,convInfo:h,backend:n});else{const e=new Wp(h);f=n.runWebGLProgram(e,[a,i],"float32")}else f=Xp({x:a,filter:i,convInfo:h,backend:n});const m=id({inputs:{x:f},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class Zp{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Yp{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${l}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Jp{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class eh{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,u=n-1-e.padInfo.top,c=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${c});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const th={kernelName:s.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,pad:u,dataFormat:c,dimRoundingMode:l,filterShape:d}=r,p=s.backend_util.convertConv2DDataFormat(c),h=s.backend_util.computeConv2DInfo(a.shape,d,o,1,u,l,!1,p),f=new Zp(h);return n.runWebGLProgram(f,[a,i],"float32")}};class nh{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=(0,El.C9)(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,r=t-1-e.padInfo.top,s=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const rh={kernelName:s.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{inputShape:o,strides:u,pad:c,dataFormat:l,dimRoundingMode:d}=r,p=s.backend_util.convertConv2DDataFormat(l),h=s.backend_util.computeConv2DInfo(o,i.shape,u,1,c,d,!1,p);if((0,s.env)().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===p){const e=[[h.strideHeight,h.strideWidth]],t=new nh(h);return n.runWebGLProgram(t,[a,i],"float32",e)}{const e=new Yp(h);return n.runWebGLProgram(e,[a,i],"float32")}}};const sh={kernelName:s.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:c}=r,l=s.backend_util.computeConv3DInfo(a.shape,i.shape,o,c,u),d=new Up(l);return n.runWebGLProgram(d,[a,i],"float32")}};const ah={kernelName:s.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,pad:u,filterShape:c}=r,l=s.backend_util.computeConv3DInfo(a.shape,c,o,1,u),d=new Jp(l);return n.runWebGLProgram(d,[a,i],"float32")}};const ih={kernelName:s.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{pad:o,strides:u,inputShape:c}=r,l=s.backend_util.computeConv3DInfo(c,i.shape,u,1,o),d=new eh(l);return n.runWebGLProgram(d,[a,i],"float32")}},oh=Xl({opSnippet:ql+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${Fl}\n  return result;\n`}),uh={kernelName:s.Cos,backendName:"webgl",kernelFunc:oh},ch=Xl({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),lh={kernelName:s.Cosh,backendName:"webgl",kernelFunc:ch};class dh{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[c]=t,[l,d]=n;this.outputShape=[c,l,d,u];const p="bilinear"===r?1:0,[h,f]=[i-1+".0",o-1+".0"],[m,g,y]=l>1?[""+(i-1)/(l-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[b,x,v]=d>1?[""+(o-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const ph={kernelName:s.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:c}=r,l=new dh(s.shape,a.shape,o,u,c);return n.runWebGLProgram(l,[s,a,i],"float32")}};var hh;!function(e){e.Prod="*",e.Sum="+"}(hh||(hh={}));class fh{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===hh.Prod?"1.0":"0.0",i=n?a:`getX(${mh(s,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let u="",c="";n?(u=r?"end != "+(o-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${o}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${(0,Rl.kW)(s)} coords = getOutputCoords();\n        int end = ${gh(s,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${gh(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${mh(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function mh(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function gh(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function yh(e,t,n,r,a,i){const o=t.shape.length,u=s.backend_util.getAxesPermutation([r],o);let c=t;null!=u&&(c=gd({inputs:{x:t},backend:n,attrs:{perm:u}}));const l=s.backend_util.getInnerMostAxes(1,o)[0];if(l!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const d=c.shape[l];let p=Ol({inputs:{x:c},backend:n});for(let s=0;s<=Math.ceil(Math.log2(d))-1;s++){const t=new fh(e,c.shape,!1,i),r=[[s]],a=p;p=n.runWebGLProgram(t,[p],p.dtype,r),n.disposeIntermediateTensorInfo(a)}if(a){const t=new fh(e,c.shape,a,i),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=u){const e=gd({inputs:{x:p},backend:n,attrs:{perm:s.backend_util.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c),e}return p}const bh={kernelName:s.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return yh(hh.Prod,s,n,a,i,o)}};const xh={kernelName:s.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return yh(hh.Sum,s,n,a,i,o)}};const vh={kernelName:s.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=(0,ed.qO)(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=(0,ed.cx)(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class wh{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const kh={kernelName:s.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r,o=s.shape[0],u=("NHWC"===i?s.shape[1]:s.shape[2])*a,c=("NHWC"===i?s.shape[2]:s.shape[3])*a,l=("NHWC"===i?s.shape[3]:s.shape[1])/(a*a),d=new wh("NHWC"===i?[o,u,c,l]:[o,l,u,c],a,i);return n.runWebGLProgram(d,[s],s.dtype)}};class Nh{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=(0,El.C9)(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let u="",c="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,c="result = activation(result);");const l=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${l}\n        ${c}\n        setOutput(result);\n      }\n    `}}class Sh{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=(0,El.C9)(this.outputShape.length);const i=e.outChannels/e.inChannels,o=e.padInfo.left,u=e.strideWidth,c=e.dilationWidth,l=e.filterHeight,d=e.filterWidth,p=d;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let s=0;s<d;s++)h+=`\n          vec4 xTexelC${2*s};\n          int xTexelC${2*s}Ready;\n          vec4 xTexelC${2*s+1};\n          int xTexelC${2*s+1}Ready;\n          vec4 xC${s};`;h+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let s=0;s<d;s++)h+=`\n          xTexelC${2*s} = vec4(0.0);\n          xTexelC${2*s}Ready = 0;\n          xTexelC${2*s+1} = vec4(0.0);\n          xTexelC${2*s+1}Ready = 0;\n          xC${s} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(p+1)/2;y++){const e=2*y;if(h+=`\n          xC = xCCorner + ${e*c};\n          `,1===u){if(e<d&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n              `,h+=1===c&&e>0?`\n                xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                  } else {\n                    xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xC${e} = xTexelC${e};\n                `,e+1<d)){const t=o%2==0?s.util.nearestLargerEven(c):c;c%2==0&&o%2==1||c%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                    xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${e+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${e+1}Ready = 1;\n                  }\n                  `,h+=c>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${e+1} = vec4(previous.zw, xTexelC${e+1}.xy);\n                    } else {\n                     xC${e+1} = vec4(0.0, 0.0, xTexelC${e+1}.xy);\n                    }\n                    `:`\n                    xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                    `):h+=1===t?`\n                    xC${e+1} = xTexelC${e};\n                    `:`\n                    xCOffset = xC + ${t};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                      xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${e+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${e+1}Ready = 1;\n                    }\n\n                    xC${e+1} = xTexelC${e+1};\n                    `}}else e<d&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n              `,e+1<d&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(\n                  xTexelC${e}.xy, xTexelC${e+1}.xy);\n              `,e+1<d&&(h+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                `)));e<d&&(h+=`\n            wTexel = getW(r, ${e}, d1, q);\n            dotProd += xC${e} * vec4(wTexel.xz, wTexel.xz);\n          `,e+1<d&&(h+=`\n              wTexel = getW(r, ${e+1}, d1, q);\n              dotProd += xC${e+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let f="",m="";n&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const Ih={kernelName:s.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:c,dimRoundingMode:l}=r;let d=c;null==d&&(d=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const p=s.backend_util.computeConv2DInfo(a.shape,i.shape,o,d,u,l,!0);let h;h=(0,s.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new Sh(p):new Nh(p);const f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[a,i],"float32",f)}};class Th{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ch{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Eh={kernelName:s.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,dilations:u,pad:c,dimRoundingMode:l,filterShape:d}=r,p=s.backend_util.computeConv2DInfo(a.shape,d,o,u,c,l,!0),h=new Th(p);return n.runWebGLProgram(h,[a,i],"float32")}};const Ah={kernelName:s.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{strides:o,dilations:u,pad:c,dimRoundingMode:l,inputShape:d}=r,p=s.backend_util.computeConv2DInfo(d,i.shape,o,u,c,l,!0),h=new Ch(p);return n.runWebGLProgram(h,[a,i],"float32")}};class $h{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const _h={kernelName:s.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],i=s.util.sizeFromShape(r.shape),o=id({inputs:{x:r},backend:n,attrs:{shape:[i]}}),u=new $h(i),c=n.runWebGLProgram(u,[o],o.dtype),l=id({inputs:{x:c},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(c),l}};class Rh{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:c}=e,{top:l,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${l}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Fh={kernelName:s.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:c}=r,l=s.backend_util.computeDilation2DInfo(a.shape,i.shape,o,u,"NHWC",c);let d;const p=new Rh(l);d=n.runWebGLProgram(p,[a,i],"float32");const h=id({inputs:{x:d},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(d),h}};const Dh={kernelName:s.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,i=t,{allDims:o,summedDims:u,idDims:c}=s.backend_util.decodeEinsumEquation(a,i.length);s.backend_util.checkEinsumDimSizes(o.length,c,i);const{path:l,steps:d}=s.backend_util.getEinsumComputePath(u,c),p=d.length;let h=null,f=o.length;const m=[];for(let g=0;g<p;++g){for(const e of d[g]){const{permutationIndices:t,expandDims:r}=s.backend_util.getEinsumPermutation(f,c[e]);let a;s.backend_util.isIdentityPermutation(t)?a=i[e]:(a=gd({inputs:{x:i[e]},backend:n,attrs:{perm:t}}),m.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);s.util.arraysEqual(a.shape,o)||(a=id({inputs:{x:a},backend:n,attrs:{shape:o}}),m.push(a)),null===h?h=a:(h=nd({inputs:{a:a,b:h},backend:n}),m.push(h))}g<p-1&&(l[g]>=0&&(h=fd({inputs:{x:h},backend:n,attrs:{axis:l[g]-(o.length-f),keepDims:!1}}),m.push(h)),f--)}for(const s of m)s!==h&&n.disposeIntermediateTensorInfo(s);return h}},Oh=Xl({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Mh={kernelName:s.Elu,backendName:"webgl",kernelFunc:Oh},zh={kernelName:s.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:a}=t,i=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dl("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,a.shape):new $l("return (b >= 0.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(i,[r,a],r.dtype)}},Bh=Kl({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:ed.gv}),Lh={kernelName:s.Equal,backendName:"webgl",kernelFunc:Bh},Ph=Xl({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${s.backend_util.ERF_P};\n  float a1 = ${s.backend_util.ERF_A1};\n  float a2 = ${s.backend_util.ERF_A2};\n  float a3 = ${s.backend_util.ERF_A3};\n  float a4 = ${s.backend_util.ERF_A4};\n  float a5 = ${s.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Vh={kernelName:s.Erf,backendName:"webgl",kernelFunc:Ph},Wh=Xl({opSnippet:ql+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:ed.aX,dtype:"float32"}),Uh={kernelName:s.Exp,backendName:"webgl",kernelFunc:Wh};function Gh(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,u=i.shape.slice();let c=a;return a<0&&(s.util.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),c=o+a+1),u.splice(c,0,1),id({inputs:{x:i},backend:r,attrs:{shape:u}})}const Hh={kernelName:s.ExpandDims,backendName:"webgl",kernelFunc:Gh},jh="return exp(x) - 1.0;",qh=Xl({opSnippet:jh,packedOpSnippet:jh,cpuKernelImpl:ed.tx}),Xh={kernelName:s.Expm1,backendName:"webgl",kernelFunc:qh};class Kh{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Qh(e,t,n){const r=n.texData.get(e.dataId),a=s.util.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=id({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}),u=o.shape,c=new Kh("real",u,t),l=new Kh("imag",u,t),d=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],p=n.runWebGLProgram(c,d,"float32"),h=n.runWebGLProgram(l,d,"float32"),f=zl({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const m=id({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const Zh={kernelName:s.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Qh(r,!1,n)}};class Yh{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function Jh(e){const{backend:t,attrs:n}=e,{shape:r,value:a}=n;let{dtype:i}=n;if(i=i||s.util.inferDtype(a),"string"===i){const e=s.util.getArrayFromDType(i,s.util.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,i,e)}{const e=new Yh(r,a),n=[[a]];return t.runWebGLProgram(e,[],i,n)}}const ef={kernelName:s.Fill,backendName:"webgl",kernelFunc:Jh};class tf{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const nf={kernelName:s.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new tf(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},rf="return floor(x);",sf=Xl({opSnippet:rf,packedOpSnippet:rf,cpuKernelImpl:ed.MZ}),af={kernelName:s.Floor,backendName:"webgl",kernelFunc:sf},of=Kl({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),uf={kernelName:s.FloorDiv,backendName:"webgl",kernelFunc:of};var cf=n(8378);class lf{constructor(e){this.variableNames=["A"];const t=(0,Hp.A)(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class df{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=(0,Hp.A)(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const pf={kernelName:s.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:i}=r,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[c,l]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],d=[l,c],p=[l,c,i];if(u||o){const e=(0,s.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=hf&&e===ff||(ff=e,hf=document.createElement("canvas").getContext("2d",{willReadFrequently:ff})),hf.canvas.width=c,hf.canvas.height=l,hf.drawImage(a,0,0,c,l),a=hf.canvas}const h=n.makeTensorInfo(d,"int32");n.texData.get(h.dataId).usage=cf.v2.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),a);const f=(0,s.env)().getBool("WEBGL_PACK")?new df(p):new lf(p),m=n.runWebGLProgram(f,[h],"int32");return n.disposeData(h.dataId),m}};let hf,ff=(0,s.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const mf={kernelName:s.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=t,{strides:c,pad:l,dataFormat:d,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r,g=s.backend_util.convertConv2DDataFormat(d),y=s.backend_util.computeConv2DInfo(a.shape,i.shape,c,p,l,h,!1,g);let b;const x=[],v=null!=o,w=null!=u,k="leakyrelu"===f,N=()=>{const e=[a,i],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=id({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(v&&e.push(t(o,d)),w&&e.push(t(u,d)),k){const t=n.makeTensorInfo([],"float32",s.util.createScalarValue(m,"float32"));e.push(t),x.push(t)}return e};if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if(y.strideWidth<=2&&"channelsLast"===g&&(0,s.env)().getBool("WEBGL_EXP_CONV")){const e=f?Ql(f,!0):null,t=new Gp(y,v,e,w,k),r=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],s=N();b=n.runWebGLProgram(t,s,"float32",r)}else if((0,s.env)().getBool("WEBGL_CONV_IM2COL"))b=Kp({x:a,filter:i,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:u,leakyreluAlpha:m});else{const e=f?Ql(f,!1):null,t=new Wp(y,v,e,w,k),r=N();b=n.runWebGLProgram(t,r,"float32")}else b=Xp({x:a,filter:i,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:u,leakyreluAlpha:m});const S=id({inputs:{x:b},backend:n,attrs:{shape:y.outShape}});return x.push(b),x.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};const gf={kernelName:s.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=t,{strides:c,pad:l,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r,m=[];let g=d;null==g&&(g=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(c,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${c} and dilations '${g}'`));const y=s.backend_util.computeConv2DInfo(a.shape,i.shape,c,g,l,p,!0),b=(0,s.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=h?Ql(h,b):null,v=[a,i],w=null!=o,k=null!=u,N="leakyrelu"===h;if(w&&v.push(o),k&&v.push(u),N){const e=n.makeTensorInfo([],"float32",s.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let S;S=b?new Sh(y,w,x,k,N):new Nh(y,w,x,k,N);const I=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],T=n.runWebGLProgram(S,v,"float32",I);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),T}};class yf{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=(0,Rl.kW)(n.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const bf={kernelName:s.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,i=a.shape,o=i[i.length-1],u=s.util.sizeFromShape(r.shape),[c,l,d,p]=s.backend_util.prepareAndValidate(r,a),h=id({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=id({inputs:{x:r},backend:n,attrs:{shape:[s.util.sizeFromShape(r.shape)/d,d]}});if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(r),s=(0,ed.TD)(e,t,r.dtype,l,o,d,p,r.shape,u);return n.makeTensorInfo(c,r.dtype,s.values)}const m=new yf(o,p,[l,d],r.shape),g=n.runWebGLProgram(m,[f,h],f.dtype),y=id({inputs:{x:g},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class xf{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=(0,Rl.kW)(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<e.length;s++)2===s?r.push("index"):r.push(`${n[s]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function vf(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:i}=t,{axis:o,batchDims:u}=r,c=s.util.parseAxisParam(o,a.shape)[0];if((0,s.env)().get("DEBUG")){const e=n.readSync(i.dataId),t=a.shape[c];for(let n=0;n<e.length;++n){const r=e[n];s.util.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const l=s.backend_util.segment_util.collectGatherOpShapeInfo(a,i,c,u),d=s.util.sizeFromShape(i.shape),p=[],h=id({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),f=id({inputs:{x:i},backend:n,attrs:{shape:[l.batchSize,d/l.batchSize]}});p.push(h),p.push(f);const m=[l.batchSize,l.outerSize,d/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(f),t=n.bufferSync(h),r=(0,ed.m$)(t,e,m);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const g=new xf(h.shape,m),y=n.runWebGLProgram(g,[h,f],h.dtype);p.push(y);const b=id({inputs:{x:y},backend:n,attrs:{shape:l.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}const wf={kernelName:s.GatherV2,backendName:"webgl",kernelFunc:vf},kf=Kl({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:ed.B_,dtype:"bool"}),Nf={kernelName:s.Greater,backendName:"webgl",kernelFunc:kf},Sf=Kl({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:ed.ji}),If={kernelName:s.GreaterEqual,backendName:"webgl",kernelFunc:Sf};const Tf={kernelName:s.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Qh(r,!0,n)}},Cf=Xl({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Ef={kernelName:s.IsFinite,backendName:"webgl",kernelFunc:Cf},Af=Xl({opSnippet:"return float(isinf(x));",dtype:"bool"}),$f={kernelName:s.IsInf,backendName:"webgl",kernelFunc:Af},_f=Xl({opSnippet:"return float(isnan(x));",dtype:"bool"}),Rf={kernelName:s.IsNan,backendName:"webgl",kernelFunc:_f},Ff=Kl({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:ed.kY,dtype:"bool"}),Df={kernelName:s.Less,backendName:"webgl",kernelFunc:Ff},Of=Kl({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:ed.Rn,dtype:"bool"}),Mf={kernelName:s.LessEqual,backendName:"webgl",kernelFunc:Of};const zf={kernelName:s.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=(0,ed.PQ)(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},Bf=Xl({opSnippet:ql+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:ed.Sd}),Lf={kernelName:s.Log,backendName:"webgl",kernelFunc:Bf},Pf=Xl({opSnippet:ql+"\n  return log(1.0 + x);\n"}),Vf={kernelName:s.Log1p,backendName:"webgl",kernelFunc:Pf},Wf=Kl({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Uf={kernelName:s.LogicalAnd,backendName:"webgl",kernelFunc:Wf},Gf=Xl({opSnippet:"return float(!(x >= 1.0));"}),Hf={kernelName:s.LogicalNot,backendName:"webgl",kernelFunc:Gf},jf=Kl({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),qf={kernelName:s.LogicalOr,backendName:"webgl",kernelFunc:jf};class Xf{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class Kf{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const Qf={kernelName:s.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:u,beta:c}=r,l=(0,s.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Kf(a.shape,i,o,u,c):new Xf(a.shape,i,o,u,c);return n.runWebGLProgram(l,[a],a.dtype)}};class Zf{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Yf={kernelName:s.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:c,beta:l}=r,d=new Zf(s.shape,o,u,c,l);return n.runWebGLProgram(d,[s,a,i],s.dtype)}};function Jf(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=r,u=a.shape.length,c=s.util.parseAxisParam(i,a.shape);let l=c;const d=s.backend_util.getAxesPermutation(l,u),p=null!=d,h=n.shouldExecuteOnCPU([a]);let f=a;if(p){if(h){const e=n.texData.get(f.dataId).values,t=new Array(u);for(let n=0;n<t.length;n++)t[n]=a.shape[d[n]];const r=(0,ed.Fv)(e,a.shape,a.dtype,d,t);f=n.makeTensorInfo(t,a.dtype);n.texData.get(f.dataId).values=r}else f=hd(a,d,n);l=s.backend_util.getInnerMostAxes(l.length,u)}s.backend_util.assertAxesAreInnerMostDims("max",l,u);const[m,g]=s.backend_util.computeOutAndReduceShapes(f.shape,l);let y,b=m;if(o&&(b=s.backend_util.expandShapeToKeepDim(m,c)),h){const e=n.texData.get(f.dataId).values,t=(0,ed.$O)(e,s.util.sizeFromShape(g),b,a.dtype);y=n.makeTensorInfo(b,a.dtype);n.texData.get(y.dataId).values=t}else y=function(e,t,n,r){const a=s.util.sizeFromShape(t),i=id({inputs:{x:e},attrs:{shape:[s.util.sizeFromShape(e.shape)/a,a]},backend:r}),o=ld(i,e.dtype,"max",r),u=id({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),u}(f,g,b,n);return p&&n.disposeIntermediateTensorInfo(f),y}const em={kernelName:s.Max,backendName:"webgl",kernelFunc:Jf},tm=Kl({opSnippet:Al+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Fl+"\n  return result;\n",cpuKernelImpl:ed.nL}),nm={kernelName:s.Maximum,backendName:"webgl",kernelFunc:tm};const rm={kernelName:s.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;(0,ad.HS)(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=s.backend_util.computePool2DInfo(a.shape,i,o,1,u,c);if(1===l.filterWidth&&1===l.filterHeight&&s.util.arraysEqual(l.inShape,l.outShape))return Ol({inputs:{x:a},backend:n});const d=new Yd(l,"max",!1);return n.runWebGLProgram(d,[a],a.dtype)}};const sm={kernelName:s.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dataFormat:c,dimRoundingMode:l}=r,d=s.backend_util.computePool3DInfo(a.shape,i,o,[1,1,1],u,l,c),p=new Jd(d,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};class am{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=s-1-e.padInfo.top,o=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class im{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,u=e.effectiveFilterHeight,c=e.effectiveFilterWidth,l=o-1-e.padInfo.front,d=u-1-e.padInfo.top,p=c-1-e.padInfo.left,h=o*u*c-1;this.userCode=`\n      const ivec3 pads = ivec3(${l}, ${d}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const om={kernelName:s.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i}=t,o=i,{filterSize:u,strides:c,pad:l,dimRoundingMode:d}=r,p=s.backend_util.computePool3DInfo(o.shape,u,c,[1,1,1],l,d),h=new Jd(p,"max",!0),f=n.runWebGLProgram(h,[o],o.dtype),m=new im(p),g=n.runWebGLProgram(m,[a,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const um={kernelName:s.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:i,output:o}=t,u=i;(0,ad.HS)([i,o],"maxPoolGrad");const{filterSize:c,strides:l,pad:d,dimRoundingMode:p}=r,h=s.backend_util.computePool2DInfo(u.shape,c,l,1,d,p),f=new Yd(h,"max",!0),m=n.runWebGLProgram(f,[u],u.dtype),g=new am(h),y=n.runWebGLProgram(g,[a,m],u.dtype);return n.disposeIntermediateTensorInfo(m),y}};const cm={kernelName:s.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=t,c=n;s.util.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`));const d=s.backend_util.computePool2DInfo(r.shape,a,i,l,o),[p,h]=function(e,t,n,r){let s=new Yd(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new Yd(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,u,d,c);return[p,h]}};const lm={kernelName:s.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:a,axis:i}=t,o=n,u=r.shape.length,c=s.util.parseAxisParam(i,r.shape);let l=c;const d=s.backend_util.getAxesPermutation(l,u),p=null!=d,h=o.shouldExecuteOnCPU([r]),f=[];let m=r;if(p){if(h){const e=o.texData.get(m.dataId).values,t=new Array(u);for(let s=0;s<t.length;s++)t[s]=r.shape[d[s]];const n=(0,ed.Fv)(e,r.shape,r.dtype,d,t);m=o.makeTensorInfo(t,r.dtype);o.texData.get(m.dataId).values=n}else m=hd(r,d,o);f.push(m),l=s.backend_util.getInnerMostAxes(l.length,u)}s.backend_util.assertAxesAreInnerMostDims("sum",l,u);const[g,y]=s.backend_util.computeOutAndReduceShapes(m.shape,l);let b=g;a&&(b=s.backend_util.expandShapeToKeepDim(g,c));const x=function(e,t,n,r){const a=s.util.sizeFromShape(t),i=id({inputs:{x:e},attrs:{shape:[s.util.sizeFromShape(e.shape)/a,a]},backend:r}),o=ld(i,"float32","mean",r),u=id({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),u}(m,y,b,o);for(const s of f)o.disposeIntermediateTensorInfo(s);return x}};const dm={kernelName:s.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,u=a.shape.length,c=s.util.parseAxisParam(i,a.shape);let l=c;const d=s.backend_util.getAxesPermutation(l,u);let p=a;null!=d&&(p=gd({inputs:{x:a},backend:n,attrs:{perm:d}}),l=s.backend_util.getInnerMostAxes(l.length,a.shape.length)),s.backend_util.assertAxesAreInnerMostDims("min",l,u);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,l),m=id({inputs:{x:p},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(f)]}}),g=ld(m,m.dtype,"min",n);let y;if(o){y=id({inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(h,c)}})}else y=id({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}},pm=Kl({opSnippet:Al+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Fl+"\n  return result;\n",cpuKernelImpl:ed.r}),hm={kernelName:s.Minimum,backendName:"webgl",kernelFunc:pm};class fm{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=(0,Rl.kW)(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class mm{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=(0,Rl.kW)(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=(0,_l.Ky)("rc",r),u=(0,_l.Ky)("source",r),c=`${o[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${l});\n        ${o[r-1]} += 1;\n        if(${c}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${l});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${l});\n        ${o[r-1]} += 1;\n        if(${c}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${l});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${l});\n          ${o[r-1]} += 1;\n          if(${c}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${l});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const gm={kernelName:s.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:a,mode:i}=n,o=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mm(r.shape,a,i):new fm(r.shape,a,i);return t.runWebGLProgram(o,[r],r.dtype)}},ym=Kl({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+Fl+"\n  return result;\n"}),bm={kernelName:s.Mod,backendName:"webgl",kernelFunc:ym};class xm{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const vm=Kl({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),wm={kernelName:s.RealDiv,backendName:"webgl",kernelFunc:vm},km="return a - b;",Nm=Kl({opSnippet:km,packedOpSnippet:km,supportsComplex:!0,cpuKernelImpl:ed.kI}),Sm={kernelName:s.Sub,backendName:"webgl",kernelFunc:Nm};function Im(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:i}=r,o=s.util.parseAxisParam([i],a.shape),u=Jf({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),c=s.backend_util.expandShapeToKeepDim(u.shape,o),l=id({inputs:{x:u},backend:n,attrs:{shape:c}}),d=Nm({inputs:{a:a,b:l},backend:n}),p=Wh({inputs:{x:d},backend:n}),h=fd({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),f=id({inputs:{x:h},backend:n,attrs:{shape:c}}),m=vm({inputs:{a:p,b:f},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}const Tm={kernelName:s.Softmax,backendName:"webgl",kernelFunc:Im};const Cm={kernelName:s.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:Im({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),c=u.shape[0],l=u.shape[1],d=new xm(c,l,a),p=[[i]],h=n.runWebGLProgram(d,[u],"int32",p);return o||n.disposeIntermediateTensorInfo(u),h}},Em=Hl.D1+"\n  return -x;\n";const Am={kernelName:s.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=(0,ed.Bo)(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let a;return a=(0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new jl.cc(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Hl.l(r.shape,Em),n.runWebGLProgram(a,[r],r.dtype)}},$m=s.kernel_impls.nonMaxSuppressionV3Impl;const _m={kernelName:s.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:u,scoreThreshold:c}=r,l=n.readSync(a.dataId),d=n.readSync(i.dataId),{selectedIndices:p}=$m(l,d,o,u,c);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Rm=s.kernel_impls.nonMaxSuppressionV4Impl;const Fm={kernelName:s.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:u,scoreThreshold:c,padToMaxOutputSize:l}=r,d=n.readSync(a.dataId),p=n.readSync(i.dataId),{selectedIndices:h,validOutputs:f}=Rm(d,p,o,u,c,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},Dm=s.kernel_impls.nonMaxSuppressionV5Impl;const Om={kernelName:s.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:u,scoreThreshold:c,softNmsSigma:l}=r,d=n.readSync(a.dataId),p=n.readSync(i.dataId),h=o,f=u,m=c,g=l,{selectedIndices:y,selectedScores:b}=Dm(d,p,h,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class Mm{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const zm={kernelName:s.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:i,depth:o,onValue:u,offValue:c}=r,l=s.util.sizeFromShape(a.shape),d=new Mm(l,o,u,c),p=id({inputs:{x:a},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(d,[p],i);n.disposeIntermediateTensorInfo(p);const f=id({inputs:{x:h},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(h),f}};function Bm(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=wp({inputs:{input:r},backend:n}),t=Bm({inputs:{x:e},backend:n}),s=zp({inputs:{input:r},backend:n}),a=Bm({inputs:{x:s},backend:n}),i=zl({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return Jh({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const Lm={kernelName:s.ZerosLike,backendName:"webgl",kernelFunc:Bm};const Pm={kernelName:s.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=wp({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=zp({inputs:{input:s},backend:r}),i=Bm({inputs:{x:a},backend:r}),o=zl({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return Jh({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const Vm={kernelName:s.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Gh({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach((e=>{s.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),s.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],c=Pp({inputs:t.map((e=>{const t=Gh({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t})),backend:n,attrs:{axis:a}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class Wm{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=(0,Rl.kW)(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Um{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=(0,Rl.kW)(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=(0,_l.Ky)("rc",r),u=(0,_l.Ky)("source",r),c=`${o[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let f=0,m=1===r?2:4;f<m;f++)h+=`\n        ${d[f]}\n        if (${p}) {\n          result[${f}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${f}] = getChannel(getX(${u.join()}), ${l});\n        }\n      `;h+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const Gm=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:i,constantValue:o}=r;if(0===s.util.sizeFromShape(a.shape)){const e=i.map(((e,t)=>e[0]+a.shape[t]+e[1]));return Jh({backend:n,attrs:{shape:e,value:o,dtype:a.dtype}})}const u=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Um(a.shape,i,o):new Wm(a.shape,i,o),c=[[o]];return n.runWebGLProgram(u,[a],a.dtype,c)},Hm={kernelName:s.PadV2,backendName:"webgl",kernelFunc:Gm},jm=Kl({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+Fl+"\n  return result;\n"}),qm={kernelName:s.Pow,backendName:"webgl",kernelFunc:jm};const Xm={kernelName:s.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,u=a.shape.length,c=[],l=s.util.parseAxisParam(i,a.shape);let d=l;const p=s.backend_util.getAxesPermutation(d,u);let h,f=a;if(null!=p&&(f=gd({inputs:{x:a},backend:n,attrs:{perm:p}}),d=s.backend_util.getInnerMostAxes(d.length,u),c.push(f)),s.backend_util.assertAxesAreInnerMostDims("prod",d,u),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:r,outDtype:s}=(0,ed.Tg)(f.shape,f.dtype,e,d);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=s.backend_util.computeOutAndReduceShapes(f.shape,d),r=s.util.sizeFromShape(t),i=id({inputs:{x:f},backend:n,attrs:{shape:[-1,r]}}),o=ld(i,(0,s.sumOutType)(a.dtype),"prod",n);h=id({inputs:{x:o},backend:n,attrs:{shape:e}}),c.push(i),c.push(o)}if(o){c.push(h);const e=s.backend_util.expandShapeToKeepDim(h.shape,l);h=id({inputs:{x:h},backend:n,attrs:{shape:e}})}return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}};const Km={kernelName:s.RaggedGather,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=r,u=s.map((e=>n.readSync(e.dataId))),c=s.map((e=>e.shape)),l=n.readSync(a.dataId),d=n.readSync(i.dataId),[p,h,f]=(0,ed.Qs)(u,c,l,a.shape,a.dtype,d,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,h);return m.concat([g])}};const Qm={kernelName:s.RaggedRange,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[c,l]=(0,ed.M8)(i,r.shape,r.dtype,o,s.shape,u,a.shape);return[n.makeTensorInfo([c.length],"int32",c),n.makeTensorInfo([l.length],r.dtype,l)]}};const Zm={kernelName:s.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=r,c=n.readSync(s.dataId),l=n.readSync(a.dataId),d=n.readSync(i.dataId),p=o.map((e=>n.readSync(e.dataId))),h=o.map((e=>e.shape)),[f,m]=(0,ed.fy)(c,s.shape,l,a.shape,a.dtype,d,i.shape,p,h,u);return n.makeTensorInfo(f,a.dtype,m)}},Ym=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=(0,ed.hO)(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},Jm={kernelName:s.Range,backendName:"webgl",kernelFunc:Ym},eg=Xl({opSnippet:"return 1.0 / x;"}),tg={kernelName:s.Reciprocal,backendName:"webgl",kernelFunc:eg},ng=Xl({opSnippet:Hl.D1+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),rg={kernelName:s.Relu,backendName:"webgl",kernelFunc:ng},sg=Xl({opSnippet:Hl.D1+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ag={kernelName:s.Relu6,backendName:"webgl",kernelFunc:sg};class ig{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const c=[r&&t>1?i-1:i,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];let d;d=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class og{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const c=[r&&t>1?i-1:i,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];let d;d=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]},\n          ${c[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const ug={kernelName:s.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=r,[c,l]=u,d=(0,s.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new og(a.shape,c,l,i,o):new ig(a.shape,c,l,i,o);return n.runWebGLProgram(d,[a],"float32")}};class cg{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],c=o[0]/u[0],l=o[1]/u[1],d=1/c,p=1/l,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const lg={kernelName:s.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new cg(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class dg{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const c=[r&&t>1?i-1:i,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],d=r?"0.5":"0.0";let p;p=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class pg{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const c=[r&&t>1?i-1:i,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],d=r?"0.5":"0.0";let p;p=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]},\n          ${c[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const hg={kernelName:s.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=r,[c,l]=u,d=(0,s.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new pg(a.shape,c,l,i,o):new dg(a.shape,c,l,i,o);return n.runWebGLProgram(d,[a],a.dtype)}};class fg{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],c=o[0]/u[0],l=o[1]/u[1],d=1/c,p=1/l,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const mg={kernelName:s.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new fg(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class gg{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=(0,Rl.kW)(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class yg{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=(0,_l.Ky)("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=(0,Rl.kW)(n);function o(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const bg={kernelName:s.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:i}=r,o=a.shape.length,u=s.util.parseAxisParam(i,a.shape);if(0===o)return Ol({inputs:{x:a},backend:n});const c=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yg(a.shape,u):new gg(a.shape,u);return n.runWebGLProgram(c,[a],a.dtype)}};class xg{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const vg={kernelName:s.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:i,center:o}=t,u=n,c=new xg(r.shape,i),[l,d]=s.backend_util.getImageCenter(o,r.shape[1],r.shape[2]),p=[[l,d,Math.sin(a),Math.cos(a)]];return u.runWebGLProgram(c,[r],r.dtype,p)}},wg=Xl({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),kg={kernelName:s.Round,backendName:"webgl",kernelFunc:wg},Ng=Xl({opSnippet:"return inversesqrt(x);",cpuKernelImpl:ed.St}),Sg={kernelName:s.Rsqrt,backendName:"webgl",kernelFunc:Ng};class Ig{constructor(e,t,n,r,s,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const u=(0,Rl.kW)(s.length),c=(0,Rl.kW)(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const d=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${u} strides = ${u}(${s});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${d});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class Tg{constructor(e,t,n,r,s,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const u=(0,Rl.kW)(s.length),c=(0,Rl.kW)(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const d=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",y=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${u} strides = ${u}(${s});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${d});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${y};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${h};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const Cg={kernelName:s.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:i}=t,{shape:o}=r,{sliceRank:u,numUpdates:c,sliceSize:l,strides:d,outputSize:p}=s.backend_util.calculateShapes(i,a,o),h=[p/l,l];if(0===p)return n.makeTensorInfo(o,a.dtype);const f=id({inputs:{x:a},backend:n,attrs:{shape:[c,u]}}),m=id({inputs:{x:i},backend:n,attrs:{shape:[c,l]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0]));let y;y=(0,s.env)().getBool("WEBGL_PACK")?new Tg(c,u,f.shape.length,m.shape.length,d,h):new Ig(c,u,f.shape.length,m.shape.length,d,h);const b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=id({inputs:{x:b},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class Eg{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,i=2===(0,s.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":a,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const Ag={kernelName:s.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:i}=r,o=new Eg(s.shape[0],s.shape[1],a.shape[1],i),u=[[s.shape[1]]];return n.runWebGLProgram(o,[s,a],"int32",u)}};class $g{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=(0,Rl.kW)(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const _g={kernelName:s.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:i}=t,o=new $g(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(o,[r,a,i],(0,s.upcastType)(a.dtype,i.dtype))}},Rg=Xl({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${s.backend_util.SELU_SCALEALPHA};\n  float scale = ${s.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Fg={kernelName:s.Selu,backendName:"webgl",kernelFunc:Rg},Dg=Xl({opSnippet:ql+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:ed.UN}),Og={kernelName:s.Sigmoid,backendName:"webgl",kernelFunc:Dg},Mg=Xl({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),zg={kernelName:s.Sign,backendName:"webgl",kernelFunc:Mg},Bg=Xl({opSnippet:ql+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${Fl}\n  return result;\n`}),Lg={kernelName:s.Sin,backendName:"webgl",kernelFunc:Bg},Pg=Xl({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),Vg={kernelName:s.Sinh,backendName:"webgl",kernelFunc:Pg},Wg=Xl({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Ug={kernelName:s.Softplus,backendName:"webgl",kernelFunc:Wg},Gg={kernelName:s.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,paddings:o}=r;s.util.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const u=i.reduce(((e,t)=>e*t)),c=[[0,0]];c.push(...o);for(let s=1+i.length;s<a.shape.length;++s)c.push([0,0]);const l=[],d=Gm({inputs:{x:a},backend:n,attrs:{paddings:c,constantValue:0}}),p=s.backend_util.getReshaped(d.shape,i,u,!1),h=s.backend_util.getPermuted(p.length,i.length,!1),f=s.backend_util.getReshapedPermuted(d.shape,i,u,!1),m=id({inputs:{x:d},backend:n,attrs:{shape:p}}),g=gd({inputs:{x:m},backend:n,attrs:{perm:h}}),y=id({inputs:{x:g},backend:n,attrs:{shape:f}});return l.push(d),l.push(m),l.push(g),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const Hg={kernelName:s.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(r.dataId),u=n.readSync(s.dataId),c=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[d,p,h,f,m]=(0,ed.X8)(o,r.shape,r.dtype,u,s.dtype,c,l);return[n.makeTensorInfo(p,r.dtype,d),n.makeTensorInfo([p[0]],s.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const jg={kernelName:s.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(s.dataId)),o=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[c,l,d]=(0,ed.LS)(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(l,r.dtype,c),n.makeTensorInfo([d.length],a.dtype,new Int32Array(d))]}};const qg={kernelName:s.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[c,l]=(0,ed.AR)(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(l,r.dtype,c)}};const Xg={kernelName:s.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[c,l]=(0,ed.AR)(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(l,r.dtype,c)}};const Kg={kernelName:s.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:u}=r,{sliceRank:c,numUpdates:l,sliceSize:d,strides:p,outputSize:h}=s.backend_util.calculateShapes(i,a,u);if("string"===i.dtype){const e=n.bufferSync(a),t=n.bufferSync(i),r=s.util.decodeString(n.readSync(o.dataId)[0]),f=(0,ed.Y1)(e,t,u,h,d,l,c,p,r,false);return n.makeTensorInfo(u,f.dtype,f.values)}const f=new Ig(l,c,a.shape.length,i.shape.length,p,[h,1],false),m=n.runWebGLProgram(f,[i,a,o],i.dtype),g=id({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(m),g}};const Qg={kernelName:s.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=r,u=s.util.parseAxisParam(o,a.shape)[0],c=s.backend_util.prepareSplitSize(a,i,u),l=a.shape.length,d=new Array(l).fill(0),p=a.shape.slice();return c.map((e=>{const t=[...p];t[u]=e;const r=hp({inputs:{x:a},backend:n,attrs:{begin:d,size:t}});return d[u]+=e,r}))}},Zg="return sqrt(x);",Yg=Xl({opSnippet:Zg,packedOpSnippet:Zg,cpuKernelImpl:ed.Bk}),Jg={kernelName:s.Sqrt,backendName:"webgl",kernelFunc:Yg},ey=Xl({opSnippet:"return x * x;"}),ty={kernelName:s.Square,backendName:"webgl",kernelFunc:ey},ny="return (a - b) * (a - b);",ry=Kl({opSnippet:ny,packedOpSnippet:ny}),sy={kernelName:s.SquaredDifference,backendName:"webgl",kernelFunc:ry};const ay={kernelName:s.StaticRegexReplace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");const i=n.readSync(a.dataId),o=s.backend_util.fromUint8ToStringArray(i),u=(0,ed.F1)(o,"string",r);return n.makeTensorInfo(a.shape,"string",u)}};const iy={kernelName:s.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=Hl.D1+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new Hl.l(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class oy{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=(0,Rl.kW)(n.length),a=(0,Rl.kW)(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const uy={kernelName:s.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:i,end:o,strides:u,beginMask:c,endMask:l,ellipsisMask:d,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=s.slice_util.sliceInfo(a.shape,i,o,u,c,l,d,p,h);let k;if(g)k=id({inputs:{x:a},backend:n,attrs:{shape:m}});else if(y||b){s.util.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=s.slice_util.computeOutShape(x,v,w),t=hp({inputs:{x:a},backend:n,attrs:{begin:x,size:e}});k=id({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=(0,s.buffer)(a.shape,a.dtype,e),r=(0,ed.$u)(f,t,w,x);k=n.makeTensorInfo(m,a.dtype,r.values)}else{const e=new oy(x,w,f);k=n.runWebGLProgram(e,[a],a.dtype)}}const N=id({inputs:{x:k},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(k),N}};const cy={kernelName:s.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:c}=r,{data:l,dataSplits:d}=t,p=n.readSync(l.dataId),h=n.readSync(d.dataId),[f,m]=(0,ed.$j)(p,h,s,a,i,o,u,c);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}};const ly={kernelName:s.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),u=n.readSync(i.dataId)[0],[c,l,d]=(0,ed.A0)(o,u,s),p=l.length;return[n.makeTensorInfo([p,2],"int32",c),n.makeTensorInfo([p],"string",l),n.makeTensorInfo([2],"int32",new Int32Array(d))]}};const dy={kernelName:s.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=(0,ed._9)(i,s);return n.makeTensorInfo(a.shape,"int32",o)}},py=Xl({opSnippet:"return tan(x);"}),hy={kernelName:s.Tan,backendName:"webgl",kernelFunc:py},fy=Xl({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),my={kernelName:s.Tanh,backendName:"webgl",kernelFunc:fy};const gy={kernelName:s.TensorScatterUpdate,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{tensor:a,indices:i,updates:o}=t,{}=r,{sliceRank:u,numUpdates:c,sliceSize:l,strides:d,outputSize:p}=s.backend_util.calculateShapes(o,i,a.shape),h=[p/l,l];if(0===p)return n.makeTensorInfo(a.shape,i.dtype);const f=id({inputs:{x:i},backend:n,attrs:{shape:[c,u]}}),m=id({inputs:{x:o},backend:n,attrs:{shape:[c,l]}}),g=id({inputs:{x:a},backend:n,attrs:{shape:h}}),y=new Ig(c,u,f.shape.length,m.shape.length,d,h,!1,!0),b=n.runWebGLProgram(y,[m,f,g],g.dtype),x=id({inputs:{x:b},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(b),x}};class yy{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const r=(0,Rl.kW)(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<e.length;s++)r.push(`imod(${n[s]}, ${e[s]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function by(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:i}=r;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>s.util.decodeString(e))):e,r=(0,s.buffer)(a.shape,a.dtype,t),o=(0,ed.KX)(r,i);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new yy(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}const xy={kernelName:s.Tile,backendName:"webgl",kernelFunc:by};class vy{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class wy{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function ky(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Ny(e){let t=1;for(;t<e;)t*=2;return t}const Sy={kernelName:s.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:i,sorted:o}=r,u=(0,s.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),c=(0,s.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=a.shape,d=l[l.length-1];if(n.shouldExecuteOnCPU([a])||d<u||i>c){const e=n.readSync(a.dataId),[t,r]=(0,ed.oC)(e,l,a.dtype,i,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===i)return l[l.length-1]=0,[n.makeTensorInfo(l,a.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===d)return[a,Jh({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const p=n.texData.get(a.dataId),h=null!==p&&p.isPacked,f=h?n.unpackTensor(a):a,m=s.util.sizeFromShape(l)/d,g=id({inputs:{x:f},attrs:{shape:[m,d]},backend:n});h&&ky(n,f);const y=Ny(i),b=Ny(d);let x=null;const v=()=>null===x?[g,g]:[g,x],w=(e,t,r)=>{const s=v(),a=new vy(r),i=[[d],[null===x?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=x;x=n.runWebGLProgram(a,s,"int32",i),ky(n,o)};for(let s=1;s<y;s*=2){const e=2*s;for(let t=s;t>=1;t/=2)w(e,t,[m,b])}for(let s=b;s>y;s/=2){const e=v(),t=new wy([m,s/2]),r=[[d],[null===x?1:0],[y]],a=x;x=n.runWebGLProgram(t,e,"int32",r),ky(n,a);const i=y/2,o=2*i;for(let n=i;n>=1;n/=2)w(o,n,x.shape)}let k=x;x=hp({inputs:{x:x},backend:n,attrs:{begin:0,size:[m,i]}}),ky(n,k);let N=vf({inputs:{x:g,indices:x},backend:n,attrs:{axis:1,batchDims:1}});ky(n,g);const S=l.slice(0,-1);S.push(i),k=x,x=id({inputs:{x:x},attrs:{shape:S},backend:n}),ky(n,k);const I=N;return N=id({inputs:{x:N},attrs:{shape:S},backend:n}),ky(n,I),[N,x]}};class Iy{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(r){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const Ty={kernelName:s.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:c}=r,[l,d,p,h]=s.shape,[f,m]=null!=c?c:[d,p],g=new Iy(d,p,i,o,u,[l,f,m,h]);return n.runWebGLProgram(g,[s,a],"float32")}};const Cy={kernelName:s.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;(0,ad.HS)(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:c}=(0,ed.CV)(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([c.length],"int32",c)]}};const Ey={kernelName:s.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],c=new Array(o-1);let l=0;for(let m=0;m<o;m++)m!==a&&(c[l++]=i.shape[m]);const d=[],p=new Array(o).fill(0),h=i.shape.slice();h[a]=1;const f=new Array(u);for(let m=0;m<f.length;m++){p[a]=m;const e=hp({inputs:{x:i},backend:n,attrs:{begin:p,size:h}}),t=id({inputs:{x:e},backend:n,attrs:{shape:c}});f[m]=t,d.push(e)}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class Ay{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ";let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}const $y=[vd,kd,Sd,Td,Ad,Rd,Fd,Dd,Pd,Vd,Ud,Hd,qd,Kd,Zd,ep,tp,sp,ap,ip,cp,mp,gp,yp,bp,Sp,Cp,$p,Bl,Fp,Vp,Qp,th,rh,sh,ah,ih,uh,lh,ph,bh,xh,vh,kh,Ih,Eh,Ah,_h,Fh,Dh,Mh,zh,Lh,Vh,Uh,Hh,Xh,Zh,ef,nf,af,uf,pf,mf,gf,bf,wf,Nf,If,Ml,Tf,Bp,Ef,$f,Rf,Vl,Df,Mf,zf,Lf,Vf,Uf,Hf,qf,Qf,Yf,em,nm,rm,sm,om,um,cm,lm,dm,hm,gm,bm,Cm,rd,Am,_m,Fm,Om,vp,zm,Pm,Vm,Hm,qm,Gl,Xm,Km,Qm,Zm,Jm,kp,wm,tg,rg,ag,od,ug,lg,hg,mg,bg,vg,kg,Sg,Cg,Ag,_g,Fg,Og,zg,Lg,Vg,fp,Tm,Ug,Gg,Hg,jg,qg,Xg,Kg,Qg,Jg,ty,sy,ay,iy,uy,cy,ly,dy,Sm,md,hy,my,gy,xy,Sy,Ty,yd,Cy,Ey,{kernelName:s.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:i}=t,{numSegments:o}=r,u=a.shape.length,c=[];let l=0;const d=s.backend_util.getAxesPermutation([l],u);let p=a;null!=d&&(p=gd({inputs:{x:a},backend:n,attrs:{perm:d}}),c.push(p),l=s.backend_util.getInnerMostAxes(1,u)[0]);const h=s.backend_util.segment_util.computeOutShape(p.shape,l,o),f=s.util.sizeFromShape([p.shape[l]]),m=id({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});c.push(m);const g=(0,s.sumOutType)(a.dtype),y=(e,t,r,a,i)=>{const o=e.shape[0],u=e.shape[1],l=s.backend_util.segment_util.segOpComputeOptimalWindowSize(u,i),d=new Ay({windowSize:l,inSize:u,batchSize:o,numSegments:i},t),p=n.compileAndRun(d,[e,r],a);if(c.push(p),p.shape[1]===i)return p;const h=Ym({backend:n,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),f=by({inputs:{x:h},backend:n,attrs:{reps:[u/l]}});c.push(h),c.push(f);return y(p,t,f,a,i)},b=id({inputs:{x:y(m,"unsortedSegmentSum",i,g,o)},backend:n,attrs:{shape:h}});let x=b;if(null!=d){c.push(b);const e=s.backend_util.getUndoAxesPermutation(d);x=gd({inputs:{x:x},backend:n,attrs:{perm:e}})}return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},Lm];for(const _y of $y)(0,s.registerKernel)(_y);s.version_core,Zr.i,Yr.gJ},3720:function(e){e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(I){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var s={},a={};function i(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=u(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=s[e])?r:(n=u(e,e<0?-1:0,!1),i&&(s[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return k}else{if(e<=-f)return N;if(e+1>=f)return w}return e<0?o(-e,t).neg():u(e%p|0,e/p|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=i,n.fromNumber=o,n.fromBits=u;var c=Math.pow;function l(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return l(e.substring(1),t,n).neg();for(var s=o(c(n,8)),a=g,i=0;i<e.length;i+=8){var u=Math.min(8,e.length-i),d=parseInt(e.substring(i,i+u),n);if(u<8){var p=o(c(n,u));a=a.mul(p).add(o(d))}else a=(a=a.mul(s)).add(o(d))}return a.unsigned=t,a}function d(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?l(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=l,n.fromValue=d;var p=4294967296,h=p*p,f=h/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var v=i(-1);n.NEG_ONE=v;var w=u(-1,2147483647,!1);n.MAX_VALUE=w;var k=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var N=u(0,-2147483648,!1);n.MIN_VALUE=N;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(N)){var t=o(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=o(c(e,6),this.unsigned),a=this,i="";;){var u=a.div(s),l=(a.sub(u.mul(s)).toInt()>>>0).toString(e);if((a=u).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(N)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(e){return r(e)||(e=d(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(r(e)||(e=d(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(N)?N:this.not().add(b)},S.neg=S.negate,S.add=function(e){r(e)||(e=d(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,i=e.high>>>16,o=65535&e.high,c=e.low>>>16,l=0,p=0,h=0,f=0;return h+=(f+=a+(65535&e.low))>>>16,p+=(h+=s+c)>>>16,l+=(p+=n+o)>>>16,l+=t+i,u((h&=65535)<<16|(f&=65535),(l&=65535)<<16|(p&=65535),this.unsigned)},S.subtract=function(e){return r(e)||(e=d(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=d(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(N))return e.isOdd()?N:g;if(e.eq(N))return this.isOdd()?N:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,a=this.low>>>16,i=65535&this.low,c=e.high>>>16,l=65535&e.high,p=e.low>>>16,h=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*h)>>>16,y+=(b+=a*h)>>>16,b&=65535,y+=(b+=i*p)>>>16,f+=(y+=s*h)>>>16,y&=65535,f+=(y+=a*p)>>>16,y&=65535,f+=(y+=i*l)>>>16,f+=n*h+s*p+a*l+i*c,u((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(r(e)||(e=d(e)),e.isZero())throw Error("division by zero");var n,s,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;a=y}else{if(this.eq(N))return e.eq(b)||e.eq(v)?N:e.eq(N)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:v:(s=this.sub(e.mul(n)),a=n.add(s.div(e)));if(e.eq(N))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(s=this;s.gte(e);){n=Math.max(1,Math.floor(s.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),l=i<=48?1:c(2,i-48),p=o(n),h=p.mul(e);h.isNegative()||h.gt(s);)h=(p=o(n-=l,this.unsigned)).mul(e);p.isZero()&&(p=b),a=a.add(p),s=s.sub(h)}return a},S.div=S.divide,S.modulo=function(e){return r(e)||(e=d(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return u(~this.low,~this.high,this.unsigned)},S.and=function(e){return r(e)||(e=d(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return r(e)||(e=d(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return r(e)||(e=d(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},6377:function(e,t,n){var r=n(4832),s=n(8652),a=n(801),i=n(2030),o=n(3618),u=n(9049),c=n(1971);c.alea=r,c.xor128=s,c.xorwow=a,c.xorshift7=i,c.xor4096=o,c.tychei=u,e.exports=c},4832:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n=function(){var e=4022871197,t=function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)};return t}();t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=n(" "),t.s1=n(" "),t.s2=n(" "),t.s0-=n(e),t.s0<0&&(t.s0+=1),t.s1-=n(e),t.s1<0&&(t.s1+=1),t.s2-=n(e),t.s2<0&&(t.s2+=1),n=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},1971:function(e,t,n){var r;!function(s,a,i){var o,u=256,c=i.pow(u,6),l=i.pow(2,52),d=2*l,p=u-1;function h(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(u):(e=new Uint8Array(u),(s.crypto||s.msCrypto).getRandomValues(e)),b(e)}catch(r){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,b(a)]}}():e,3),r),h=new f(r),x=function(){for(var e=h.g(6),t=c,n=0;e<l;)e=(e+n)*u,t*=u,n=h.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|h.g(4)},x.quick=function(){return h.g(4)/4294967296},x.double=x,y(b(h.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,h),e.state=function(){return m(h,{})}),n?(i.random=e,t):e})(x,p,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*u+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(a){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),a),e.exports){e.exports=h;try{o=n(5042)}catch(x){}}else void 0===(r=function(){return h}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},5410:function(){},8628:function(){},1601:function(){},7792:function(){},4977:function(){},5042:function(){}}]);
//# sourceMappingURL=e81ec0c59a9909986fb347f42dca4c43da55c2dd-a90b4f86492219af9257.js.map