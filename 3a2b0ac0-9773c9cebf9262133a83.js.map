{"version":3,"file":"3a2b0ac0-9773c9cebf9262133a83.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/@tensorflow/tfjs-layers/dist/engine/container.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/engine/topology.py */\nimport { tidy } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize as deserializeLayer } from '../layers/serialization';\nimport * as generic_utils from '../utils/generic_utils';\nimport { convertTsToPythonic } from '../utils/serialization_utils';\nimport * as types_utils from '../utils/types_utils';\nimport { batchSetValue } from '../variables';\nimport { version as layersVersion } from '../version';\nimport { execute, FeedDict } from './executor';\nimport { InputLayer } from './input_layer';\nimport { Layer, Node } from './topology';\n// get weights key from tensor map in order to check if it is from keras v3.\n// e.g. dense/0\nconst isKerasSavedModelFormat = (weights) => {\n    const keys = Object.keys(weights);\n    if (keys.length === 0) {\n        return false;\n    }\n    const key = keys[0].split('/');\n    return !isNaN(parseInt(key[key.length - 1], 10));\n};\n/**\n * A Container is a directed acyclic graph of layers.\n *\n * It is the topological form of a \"model\". A LayersModel\n * is simply a Container with added training routines.\n *\n */\nexport class Container extends Layer {\n    constructor(args) {\n        // No args passed to super's constructor.\n        super({});\n        this.containerNodes = new Set();\n        this.name = args.name;\n        if (this.name == null) {\n            const prefix = this.getClassName().toLowerCase();\n            this.name = getUid(prefix);\n        }\n        this.supportsMasking = false;\n        this.trainable_ = true;\n        // TODO(michaelterry): Initialize perInputLosses/Updates here.\n        // Container-specific properties.\n        if (Array.isArray(args.inputs)) {\n            this.inputs = args.inputs.slice();\n        }\n        else {\n            this.inputs = [args.inputs];\n        }\n        if (Array.isArray(args.outputs)) {\n            this.outputs = args.outputs.slice();\n        }\n        else {\n            this.outputs = [args.outputs];\n        }\n        // Check for redundancy in inputs.\n        if (generic_utils.unique(this.inputs).length !== this.inputs.length) {\n            throw new ValueError('The list of inputs passed to the model is ' +\n                'redundant. All inputs should only appear once. Found: ' +\n                `${this.inputs.map(x => x.name)}`);\n        }\n        // Check for redundancy in outputs.\n        if (generic_utils.unique(this.outputs).length !== this.outputs.length) {\n            console.warn('The list of outputs passed to the model is redundant. ' +\n                'All outputs should only appear once. Found: ' +\n                `${this.outputs.map(x => x.name)}`);\n        }\n        /*\n          List of initial layers (1 to 1 mapping with this.inputs, hence the same\n          layer might appear twice)\n        */\n        this.inputLayers = [];\n        this.inputLayersNodeIndices = [];\n        this.inputLayersTensorIndices = [];\n        /*\n          List of layers (1 to 1 mapping with this.outputs, hence the same layer\n          might appear twice)\n        */\n        this.outputLayers = [];\n        this.outputLayersNodeIndices = [];\n        this.outputLayersTensorIndices = [];\n        /*\n          All layers in order of horizontal graph traversal. Entries are unique.\n          Includes input and output layers.\n        */\n        this.layers = [];\n        /*\n          References to container layers that were constructed internally. We need\n          these to properly dispose of tensors from nested containers.\n        */\n        this.internalContainerRefs = [];\n        // TODO(michaelterry): Determine if caching still needed with eager\n        // backend.\n        /*\n          This is for performance optimization when calling the Container on new\n          inputs. Every time the Container is called on a set on input tensors,\n          we compute the output tensors, output masks and output shapes in one pass,\n          then cache them here. When one of these outputs is queried later,\n          we retrieve it from there instead of recomputing it.\n        */\n        // this.outputTensorCache = {};\n        // this.outputShapeCache = {};\n        // Build this.outputLayers:\n        for (const x of this.outputs) {\n            const layer = x.sourceLayer;\n            const nodeIndex = x.nodeIndex;\n            const tensorIndex = x.tensorIndex;\n            this.outputLayers.push(layer);\n            this.outputLayersNodeIndices.push(nodeIndex);\n            this.outputLayersTensorIndices.push(tensorIndex);\n        }\n        // TODO(michaelterry): Add output mask cache code.\n        // Build this.inputLayers:\n        for (const x of this.inputs) {\n            const layer = x.sourceLayer;\n            const nodeIndex = x.nodeIndex;\n            const tensorIndex = x.tensorIndex;\n            /*\n              It's supposed to be an input layer, so only one node\n              and one tensor output.\n            */\n            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n            this.inputLayers.push(layer);\n            this.inputLayersNodeIndices.push(nodeIndex);\n            this.inputLayersTensorIndices.push(tensorIndex);\n        }\n        // Build this.inputNames and this.outputNames.\n        this.inputNames = [];\n        this.outputNames = [];\n        this.feedInputShapes = [];\n        this.feedInputNames = [];\n        this.feedOutputNames = [];\n        for (let i = 0; i < this.inputLayers.length; i++) {\n            const layer = this.inputLayers[i];\n            // Check that layer is an InputLayer.\n            if (!(layer instanceof InputLayer)) {\n                throw new TypeError('Input layers to a LayersModel must be InputLayer objects. ' +\n                    `Received inputs: ${args.inputs}. ` +\n                    `Input ${i} (0-based) originates ` +\n                    `from layer type ${layer.getClassName()}.`);\n            }\n            this.inputNames.push(layer.name);\n            this.feedInputShapes.push(layer.batchInputShape);\n            this.feedInputNames.push(layer.name);\n        }\n        for (const layer of this.outputLayers) {\n            this.outputNames.push(layer.name);\n        }\n        this.internalInputShapes = this.inputs.map(x => x.shape);\n        this.internalOutputShapes = this.outputs.map(x => x.shape);\n        /*\n          Container_nodes: set of nodes included in the graph (not all nodes\n          included in the layers are relevant to the current graph).\n        */\n        // ids of all nodes relevant to the Container:\n        const nodesDepths = {};\n        // To recover nodes from their ID.\n        const nodeIDToNode = {};\n        const layersDepths = {};\n        // To layers from their ID.\n        const layerIDToLayer = {};\n        const layerIndices = {};\n        const nodesInDecreasingDepth = [];\n        /**\n         * Builds a map of the graph of layers.\n         *\n         * This recursively updates the map `layerIndices`,\n         * the list `nodesInDecreasingDepth` and the set `containerNodes`.\n         *\n         * @param tensor Some tensor in a graph.\n         * @param finishedNodes Set of nodes whose subgraphs have been traversed\n         *         completely. Useful to prevent duplicated work.\n         * @param nodesInProgress Set of nodes that are currently active on the\n         *         recursion stack. Useful to detect cycles.\n         * @param layer Layer from which `tensor` comes from. If not provided,\n         *   will be obtained from tensor.sourceLayer.\n         * @param nodeIndex Node index from which `tensor` comes from.\n         * @param tensorIndex TensorIndex from which `tensor` comes from.\n         *\n         * @exception RuntimeError if a cycle is detected.\n         */\n        const buildMapOfGraph = (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) => {\n            if (layer == null || nodeIndex == null || tensorIndex == null) {\n                layer = tensor.sourceLayer;\n                nodeIndex = tensor.nodeIndex;\n                tensorIndex = tensor.tensorIndex;\n            }\n            const node = layer.inboundNodes[nodeIndex];\n            // Prevent cycles.\n            if (nodesInProgress.indexOf(node) !== -1) {\n                throw new RuntimeError(`The tensor ${tensor.name} at layer \"${layer.name}\" ` +\n                    'is part of a cycle.');\n            }\n            // Don't repeat work for shared subgraphs\n            if (finishedNodes.indexOf(node) !== -1) {\n                return;\n            }\n            // Update containerNodes.\n            this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n            // Store the traversal order for layer sorting.\n            if (!(layer.id in layerIndices)) {\n                layerIndices[layer.id] = Object.keys(layerIndices).length;\n            }\n            if (nodesInProgress.indexOf(node) === -1) {\n                nodesInProgress.push(node);\n            }\n            // Propagate to all previous tensors connected to this node.\n            const numInboundLayers = node.inboundLayers.length;\n            for (let i = 0; i < numInboundLayers; i++) {\n                const x = node.inputTensors[i];\n                const layer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const tensorIndex = node.tensorIndices[i];\n                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex);\n            }\n            finishedNodes.push(node);\n            while (nodesInProgress.indexOf(node) >= 0) {\n                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n            }\n            nodesInDecreasingDepth.push(node);\n        };\n        const finishedNodes = [];\n        const nodesInProgress = [];\n        for (const x of this.outputs) {\n            buildMapOfGraph(x, finishedNodes, nodesInProgress);\n        }\n        const reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n        for (const node of reversedNodesInDecreasingDepth) {\n            nodeIDToNode[node.id] = node;\n            // If the depth is not set, the node has no outbound nodes (depth 0).\n            if (!(node.id in nodesDepths)) {\n                nodesDepths[node.id] = 0;\n            }\n            let depth = nodesDepths[node.id];\n            // Update the depth of the corresponding layer\n            const previousDepth = (layersDepths[node.outboundLayer.id] == null ?\n                0 :\n                layersDepths[node.outboundLayer.id]);\n            /*\n              If we've seen this layer before at a higher depth, we should use that\n              depth instead of the node depth.  This is necessary for shared layers\n              that have inputs at different depth levels in the graph.\n            */\n            depth = Math.max(depth, previousDepth);\n            layersDepths[node.outboundLayer.id] = depth;\n            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n            nodesDepths[node.id] = depth;\n            // Update the depth of inbound nodes.\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n                const inboundLayer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n                const previousDepth = (nodesDepths[inboundNode.id] == null ? 0 :\n                    nodesDepths[inboundNode.id]);\n                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);\n                nodeIDToNode[inboundNode.id] = inboundNode;\n            }\n        }\n        // Build a dict {depth: list of nodes with this depth}\n        const nodesByDepth = {};\n        for (const nodeID in nodesDepths) {\n            const depth = nodesDepths[nodeID];\n            if (!(depth in nodesByDepth)) {\n                nodesByDepth[depth] = [];\n            }\n            nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n        }\n        // Build a dict {depth: list of layers with this depth}\n        const layersByDepth = {};\n        for (const layerID in layersDepths) {\n            const depth = layersDepths[layerID];\n            if (!(depth in layersByDepth)) {\n                layersByDepth[depth] = [];\n            }\n            layersByDepth[depth].push(layerIDToLayer[layerID]);\n        }\n        // Get sorted list of layer depths.\n        let depthKeys = Object.keys(layersByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Set this.layers and this.layersByDepth.\n        this.layers = [];\n        for (const depth of depthKeys) {\n            const layersForDepth = layersByDepth[depth];\n            // Container.layers needs to have a deterministic order:\n            // here we order them by traversal order.\n            layersForDepth.sort((a, b) => {\n                const aIndex = layerIndices[a.id];\n                const bIndex = layerIndices[b.id];\n                if (aIndex < bIndex) {\n                    return -1;\n                }\n                if (aIndex > bIndex) {\n                    return 1;\n                }\n                return 0;\n            });\n            for (const layer of layersForDepth) {\n                if (layer instanceof Container) {\n                    this.internalContainerRefs.push(layer);\n                }\n                this.layers.push(layer);\n            }\n        }\n        this.layersByDepth = layersByDepth;\n        // Get sorted list of node depths;\n        depthKeys = Object.keys(nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Check that all tensors required are computable.\n        // computable_tensors: all tensors in the graph\n        // that can be computed from the inputs provided.\n        const computableTensors = this.inputs.slice();\n        // To provide a better error msg.\n        const layersWithCompleteInput = [];\n        for (const depth of depthKeys) {\n            for (const node of nodesByDepth[depth]) {\n                const layer = node.outboundLayer;\n                if (layer != null) {\n                    for (const x of node.inputTensors) {\n                        if (computableTensors.indexOf(x) === -1) {\n                            throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${x}` +\n                                ` at layer \"${layer.name}\". ` +\n                                'The following previous layers were accessed without ' +\n                                `issue: ${layersWithCompleteInput}`);\n                        }\n                    }\n                    for (const x of node.outputTensors) {\n                        computableTensors.push(x);\n                    }\n                    layersWithCompleteInput.push(layer.name);\n                }\n            }\n        }\n        // Set this.containerNodes and this.nodesByDepth.\n        this.nodesByDepth = nodesByDepth;\n        // Ensure name unicity, which will be crucial for serialization\n        // (since serialized nodes refer to layers by their name).\n        const allNames = this.layers.map(x => x.name);\n        for (const name of allNames) {\n            const numOccurrences = allNames.filter(x => x === name).length;\n            if (numOccurrences !== 1) {\n                throw new RuntimeError(`The name \"${name}\" is used ${numOccurrences} times ` +\n                    'in the model. All layer names should be unique. Layer names: ' +\n                    JSON.stringify(allNames));\n            }\n        }\n        // Layer parameters.\n        // The new container starts with a single inbound node\n        // for its inputs, and no outbound nodes.\n        // Will be appended to by future calls to apply().\n        this.outboundNodes = [];\n        // Will be appended to below, and by future calls to apply().\n        this.inboundNodes = [];\n        // Create the node linking internal inputs to internal outputs.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: this.inputs,\n            outputTensors: this.outputs,\n            inputMasks: this.inputs.map(x => null),\n            outputMasks: this.outputs.map(x => null),\n            inputShapes: this.inputs.map(x => x.shape),\n            outputShapes: this.outputs.map(x => x.shape)\n        });\n        this.built = true;\n        this._refCount = 1; // The ref count of a container always start at 1.\n    }\n    assertNotDisposed() {\n        if (this._refCount === 0) {\n            throw new Error(`Container '${this.name}' is already disposed.`);\n        }\n    }\n    /**\n     * Attempt to dispose a LayersModel's weights.\n     *\n     * This method decrease the reference count of the LayersModel object by 1.\n     *\n     * A LayersModel is reference-counted. Its reference count is incremented by 1\n     * when it is first constructed and when it is used as a Layer of another\n     * LayersModel.\n     *\n     * If the reference count of a LayersModel becomes 0, the `dispose` method of\n     * all its constituent `Layer`s will be called.\n     *\n     * Note: If the reference count is greater than 0 after the decrement, the\n     * `dispose` method of its constituent `Layer`s will *not* be called.\n     *\n     * After a LayersModel is disposed, it cannot be used in calls such as\n     * 'predict`, `evaluate` or `fit` anymore.\n     *\n     * @returns A DisposeResult Object with the following fields:\n     *   - refCountAfterDispose: The reference count of the LayersModel after this\n     *     `dispose()` call.\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n     *     during this `dispose()` call.\n     * @throws {Error} If the layer is not built yet, or if the LayersModel has\n     *   already been disposed.\n     */\n    dispose() {\n        this.assertNotDisposed();\n        const result = { refCountAfterDispose: null, numDisposedVariables: 0 };\n        if (--this._refCount === 0) {\n            for (const layer of this.layers) {\n                result.numDisposedVariables += layer.dispose().numDisposedVariables;\n            }\n            // Call dispose on each internally created container layer again to ensure\n            // their refCounts hit zero and their tensors are subsequently deleted.\n            for (const container of this.internalContainerRefs) {\n                result.numDisposedVariables += container.dispose().numDisposedVariables;\n            }\n        }\n        result.refCountAfterDispose = this._refCount;\n        return result;\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this.layers.forEach(layer => {\n            // tslint:disable-next-line:no-any\n            layer._trainableWeights\n                .forEach(w => w.trainable = trainable);\n        });\n        this.trainable_ = trainable;\n    }\n    get trainableWeights() {\n        // Porting Note: This check below is to prevent errors where the\n        //   _trainableWeights inherited from the parent class (Layer) gets\n        //   inadvertently used.\n        if (this._trainableWeights.length > 0) {\n            throw new ValueError('Container instance unexpectedly contains _trainableWeights.' +\n                'The trainable weights of a Container are a union of the ' +\n                'trainable weights of its consituent Layers. Its own ' +\n                '_trainableWeights must remain an empty Array.');\n        }\n        if (!this.trainable) {\n            return [];\n        }\n        let weights = [];\n        for (const layer of this.layers) {\n            weights = weights.concat(layer.trainableWeights);\n        }\n        return weights;\n    }\n    get nonTrainableWeights() {\n        const weights = [];\n        for (const layer of this.layers) {\n            weights.push(...layer.nonTrainableWeights);\n        }\n        if (!this.trainable) {\n            const trainableWeights = [];\n            for (const layer of this.layers) {\n                trainableWeights.push(...layer.trainableWeights);\n            }\n            return trainableWeights.concat(weights);\n        }\n        return weights;\n    }\n    get weights() {\n        return this.trainableWeights.concat(this.nonTrainableWeights);\n    }\n    /**\n     * Loads all layer weights from a JSON object.\n     *\n     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\n     *   TypeScript. The utility script at `scripts/pykeras.py` offers means\n     *   to convert them into JSON strings compatible with this method.\n     * Porting Note: TensorFlow.js Layers supports only loading by name currently.\n     *\n     * @param weights A JSON mapping weight names to weight values as nested\n     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\n     *   names to `tf.Tensor` objects.\n     * @param strict Require that the provided weights exactly match those\n     *   required by the container.  Default: `true`.  Passing `false` means that\n     *   extra weights and missing weights will be silently ignored.\n     */\n    loadWeights(weights, strict = true) {\n        const nameToWeight = {};\n        let totalWeightsCount = 0;\n        const modelIsKerasSavedModelFormat = isKerasSavedModelFormat(weights);\n        if (modelIsKerasSavedModelFormat) {\n            this.parseWeights(weights);\n        }\n        // Check if weights from keras v3.\n        for (const layer of this.layers) {\n            for (const [index, weight] of layer.weights.entries()) {\n                // Parse the name to layerName/index.\n                // e.g. dense/0, dense/1, dense_1/0, dense_1/1\n                const parsedName = modelIsKerasSavedModelFormat ?\n                    `${weight.name.split('/').slice(0, -1).join('/') + '/'}${index}` :\n                    weight.originalName;\n                if (nameToWeight[parsedName] != null) {\n                    throw new ValueError(`Duplicate weight name: ${parsedName}`);\n                }\n                nameToWeight[parsedName] = weight;\n                totalWeightsCount++;\n            }\n        }\n        const weightValueTuples = [];\n        for (const name in weights) {\n            // TF 2.2.0 added cell name to the weight name in the format of\n            // layer_name/cell_name/weight_name, we need to remove\n            // the inner cell name.\n            let validatedName = name;\n            if (nameToWeight[name] == null) {\n                const tokens = name.split('/');\n                const shortenNameArray = tokens.slice(0, -2).concat([tokens[tokens.length - 1]]);\n                validatedName = shortenNameArray.join('/');\n            }\n            if (nameToWeight[validatedName] != null) {\n                weightValueTuples.push([nameToWeight[validatedName], weights[name]]);\n            }\n            else if (strict) {\n                throw new ValueError(`Provided weight data has no target variable: ${name}`);\n            }\n            delete nameToWeight[validatedName];\n        }\n        if (strict) {\n            // Check that all weights are set.\n            const unsetNames = [];\n            for (const name in nameToWeight) {\n                unsetNames.push(name);\n            }\n            if (unsetNames.length > 0) {\n                throw new ValueError(`${unsetNames.length} of ${totalWeightsCount} weights are not set: ` +\n                    `${unsetNames}`);\n            }\n        }\n        batchSetValue(weightValueTuples);\n    }\n    parseWeights(weights) {\n        for (const key in Object.keys(weights)) {\n            const listParts = key.split('/');\n            const list = ['vars', 'layer_checkpoint_dependencies'];\n            // For keras v3, the weights name are saved based on the folder structure.\n            // e.g. _backbone/_layer_checkpoint_dependencies/transformer/_self../\n            // _output_dense/vars/0\n            // Therefore we discard the `vars` and `layer_checkpoint_depencies` within\n            // the saved name and only keeps the layer name and weights.\n            // This can help to mapping the actual name of the layers and load each\n            // weight accordingly.\n            const newKey = listParts\n                .map(str => {\n                if (str.startsWith('_')) {\n                    return str.slice(1);\n                }\n                return str;\n            })\n                .filter(str => !list.includes(str))\n                .join('/');\n            if (newKey !== key) {\n                weights[newKey] = weights[key];\n                delete weights[key];\n            }\n        }\n    }\n    /**\n     * Util shared between different serialization methods.\n     * @returns LayersModel config with Keras version information added.\n     */\n    updatedConfig() {\n        const theConfig = this.getConfig();\n        const modelConfig = {};\n        modelConfig['className'] = this.getClassName();\n        modelConfig['config'] = theConfig;\n        modelConfig['kerasVersion'] = `tfjs-layers ${layersVersion}`;\n        // TODO(nielsene): Replace something like K.backend() once\n        // possible.\n        modelConfig['backend'] = 'TensorFlow.js';\n        return modelConfig;\n    }\n    /**\n     * Returns a JSON string containing the network configuration.\n     *\n     * To load a network from a JSON save file, use\n     * models.modelFromJSON(jsonString);\n     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\n     * @param returnString Whether the return value should be stringified\n     *    (default: `true`).\n     * @returns a JSON string if `returnString` (default), or a JSON object if\n     *   `!returnString`.\n     */\n    // tslint:disable-next-line:no-any\n    toJSON(unused, returnString = true) {\n        const modelConfig = convertTsToPythonic(this.updatedConfig());\n        return returnString ? JSON.stringify(modelConfig) : modelConfig;\n    }\n    /**\n     * Call the model on new inputs.\n     *\n     * In this case `call` just reapplies all ops in the graph to the new inputs\n     * (e.g. build a new computational graph from the provided inputs).\n     *\n     * @param inputs A tensor or list of tensors.\n     * @param mask A mask or list of masks. A mask can be either a tensor or null\n     *   (no mask).\n     *\n     * @return A tensor if there is a single output, or a list of tensors if there\n     *   are more than one outputs.\n     */\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = generic_utils.toList(inputs);\n            const feedDict = new FeedDict();\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n            return execute(this.outputs, feedDict, kwargs);\n        });\n    }\n    /**\n     * Computes an output mask tensor.\n     *\n     * @param inputs Tensor or list of tensors.\n     * @param mask Tensor or list of tensors.\n     *\n     * @return null or a tensor (or list of tensors, one per output tensor of the\n     * layer).\n     */\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            inputs = generic_utils.toList(inputs);\n            let masks;\n            if (mask == null) {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            else {\n                masks = generic_utils.toList(mask);\n            }\n            // TODO(michaelterry): Add support for mask caching.\n            return this.runInternalGraph(inputs, masks)[1];\n        });\n    }\n    /**\n     * Computes the output shape of the layer.\n     *\n     * Assumes that the layer will be built to match that input shape provided.\n     *\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\n     *   (one per output tensor of the layer). Shape tuples can include null for\n     *   free dimensions, instead of an integer.\n     */\n    computeOutputShape(inputShape) {\n        const inputShapes = types_utils.normalizeShapeList(inputShape);\n        if (inputShapes.length !== this.inputLayers.length) {\n            throw new ValueError(`Invalid inputShape argument ${inputShape}: ` +\n                `model has ${this.inputLayers.length} tensor inputs.`);\n        }\n        // TODO(michaelterry): Add caching\n        const layersToOutputShapes = {};\n        for (let i = 0; i < inputShapes.length; i++) {\n            const layer = this.inputLayers[i];\n            const inputShape = inputShapes[i];\n            // It's an input layer: computeOutputShape is identity,\n            // and there is only one node and one tensor output.\n            const shapeKey = layer.name + '_0_0';\n            layersToOutputShapes[shapeKey] = inputShape;\n        }\n        const depthKeys = Object.keys(this.nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Iterate over nodes, by depth level.\n        if (depthKeys.length > 1) {\n            for (const depth of depthKeys) {\n                const nodes = this.nodesByDepth[depth];\n                for (const node of nodes) {\n                    // This is always a single layer, never a list.\n                    const layer = node.outboundLayer;\n                    if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {\n                        // We've already covered the input layers a few lines above.\n                        continue;\n                    }\n                    // Potentially redundant list, same size of node.inputTensors.\n                    const inputShapes = [];\n                    for (let j = 0; j < node.inboundLayers.length; j++) {\n                        const inboundLayer = node.inboundLayers[j];\n                        const nodeIndex = node.nodeIndices[j];\n                        const tensorIndex = node.tensorIndices[j];\n                        const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;\n                        const inputShape = layersToOutputShapes[shapeKey];\n                        inputShapes.push(inputShape);\n                    }\n                    const outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes));\n                    const outputShapes = types_utils.normalizeShapeList(outputShape);\n                    const nodeIndex = layer.inboundNodes.indexOf(node);\n                    for (let j = 0; j < outputShapes.length; j++) {\n                        const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n                        layersToOutputShapes[shapeKey] = outputShapes[j];\n                    }\n                }\n            }\n        }\n        // Read final output shapes from layersToOutputShapes.\n        const outputShapes = [];\n        const outputShapeKeys = [];\n        for (let i = 0; i < this.outputLayers.length; i++) {\n            const layer = this.outputLayers[i];\n            const nodeIndex = this.outputLayersNodeIndices[i];\n            const tensorIndex = this.outputLayersTensorIndices[i];\n            const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n            outputShapeKeys.push(shapeKey);\n        }\n        for (let i = 0; i < outputShapeKeys.length; i++) {\n            const key = outputShapeKeys[i];\n            generic_utils.assert(key in layersToOutputShapes);\n            outputShapes.push(layersToOutputShapes[key]);\n        }\n        // TODO(michaelterry): Update cache\n        return generic_utils.singletonOrArray(outputShapes);\n    }\n    /**\n     * Computes output tensors for new inputs.\n     *\n     * Note:\n     *   - Expects `inputs` to be a list (potentially with 1 element).\n     *\n     * @param inputs List of tensors\n     * @param masks List of masks (tensors or null).\n     * @return Three lists: outputTensors, outputMasks, outputShapes\n     */\n    runInternalGraph(inputs, masks) {\n        if (masks == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        // Dictionary mapping reference tensors to tuples\n        // (computed tensor, compute mask)\n        // we assume a 1:1 mapping from tensor to mask\n        // TODO: raise exception when a `.computeMask()` call\n        // does not return a list the same size as `call`\n        const tensorMap = {};\n        for (let i = 0; i < this.inputs.length; ++i) {\n            const x = this.inputs[i];\n            const y = inputs[i];\n            const mask = masks[i];\n            tensorMap[x.id] = [y, mask];\n        }\n        const depthKeys = Object.keys(this.nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        for (const depth of depthKeys) {\n            const nodes = this.nodesByDepth[depth];\n            for (const node of nodes) {\n                // This is always a single layer, never a list.\n                const layer = node.outboundLayer;\n                const referenceInputTensors = node.inputTensors;\n                const referenceOutputTensors = node.outputTensors;\n                // If all previous input tensors are available in tensorMap,\n                // then call node.inboundLayer on them.\n                // List of tuples [input, mask]:\n                const computedData = new Array();\n                for (const x of referenceInputTensors) {\n                    if (x.id in tensorMap) {\n                        computedData.push(tensorMap[x.id]);\n                    }\n                }\n                if (computedData.length === referenceInputTensors.length) {\n                    // TODO(michaelterry): Add K.name_scope here, if we need it.\n                    let kwargs = {};\n                    let computedTensors;\n                    let computedMasks;\n                    let outputTensors;\n                    let outputMasks;\n                    // call layer\n                    if (node.callArgs != null) {\n                        kwargs = node.callArgs;\n                    }\n                    if (computedData.length === 1) {\n                        const [computedTensor, computedMask] = computedData[0];\n                        if (kwargs['mask'] == null) {\n                            kwargs['mask'] = computedMask;\n                        }\n                        outputTensors =\n                            generic_utils.toList(layer.call(computedTensor, kwargs));\n                        outputMasks = generic_utils.toList(layer.computeMask(computedTensor, computedMask));\n                        computedTensors = [computedTensor];\n                        computedMasks = [computedMask];\n                    }\n                    else {\n                        computedTensors = computedData.map(x => x[0]);\n                        computedMasks = computedData.map(x => x[1]);\n                        if (kwargs['mask'] == null) {\n                            kwargs['mask'] = computedMasks;\n                        }\n                        outputTensors =\n                            generic_utils.toList(layer.call(computedTensors, kwargs));\n                        outputMasks = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));\n                    }\n                    if (layer.activityRegularizer) {\n                        throw new NotImplementedError('LayersModel invocation with concrete Tensor value(s) in the ' +\n                            'presence of activity regularizer(s) is not supported yet.');\n                    }\n                    // TODO(michaelterry): Add model updates and losses\n                    // Update tensor map.\n                    for (let i = 0; i < referenceOutputTensors.length; ++i) {\n                        const x = referenceOutputTensors[i];\n                        const y = outputTensors[i];\n                        const mask = outputMasks[i];\n                        tensorMap[x.id] = [y, mask];\n                    }\n                }\n            }\n        }\n        const outputTensors = [];\n        const outputMasks = [];\n        const outputShapes = [];\n        for (const x of this.outputs) {\n            generic_utils.assert(x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n            const [tensor, mask] = tensorMap[x.id];\n            outputShapes.push(tensor.shape);\n            outputTensors.push(tensor);\n            outputMasks.push(mask);\n        }\n        // TODO(michaelterry): Add support for caches.\n        return [outputTensors, outputMasks, outputShapes];\n    }\n    /**\n     * Builds a map of internal node keys to node ordering.\n     * Used in serializaion a node orderings may change as unused nodes are\n     * dropped. Porting Note:  This helper method was pulled out of getConfig to\n     * improve readability.\n     * @param layers An array of Layers in the model.\n     * @returns Map of Node Keys to index order within the layer.\n     */\n    buildNodeConversionMap(layers) {\n        const nodeConversionMap = {};\n        let keptNodes;\n        for (const layer of this.layers) {\n            keptNodes = layer instanceof Container ? 1 : 0;\n            for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                if (this.containerNodes.has(nodeKey)) {\n                    // i.e. we mark it to be saved\n                    nodeConversionMap[nodeKey] = keptNodes;\n                    keptNodes += 1;\n                }\n            }\n        }\n        return nodeConversionMap;\n    }\n    getLayer(nameOrIndex, index) {\n        if (index != null) {\n            return this.findLayer(index);\n        }\n        else {\n            if (nameOrIndex == null) {\n                throw new ValueError('Provide either a layer name or layer index');\n            }\n            if (typeof nameOrIndex === 'number') {\n                return this.findLayer(nameOrIndex);\n            }\n        }\n        for (const layer of this.layers) {\n            if (layer.name === nameOrIndex) {\n                return layer;\n            }\n        }\n        throw new ValueError(`No such layer: ${nameOrIndex}`);\n    }\n    findLayer(index) {\n        if (this.layers.length <= index) {\n            throw new ValueError(`Was asked to retrieve layer at index ${index}, but model only ` +\n                `has ${this.layers.length} layer(s).`);\n        }\n        else {\n            return this.layers[index];\n        }\n    }\n    /**\n     * Retrieves the Container's current loss values.\n     *\n     * Used for regularizers during training.\n     */\n    calculateLosses() {\n        // Porting Node: This is an augmentation to Container.loss in PyKeras.\n        //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n        //   Tensor (specifically Scalar) values are returned. This is due to the\n        //   imperative backend.\n        return tidy(() => {\n            const losses = [];\n            for (const layer of this.layers) {\n                for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n                    const nodeKey = Container.nodeKey(layer, nodeIndex);\n                    if (this.containerNodes.has(nodeKey)) {\n                        losses.push(...layer.calculateLosses());\n                    }\n                }\n            }\n            // TODO(cais): Add any unconditional model-level losses?\n            return losses;\n        });\n    }\n    getConfig() {\n        const config = { name: this.name };\n        // Build a map from layer unique name (self._node_key)\n        // to the index of the nodes that are saved in the config.\n        // Only nodes in container_nodes are saved.\n        const nodeConversionMap = this.buildNodeConversionMap(this.layers);\n        // Serialize and save the layers in layerConfigs\n        const layerConfigs = [];\n        for (const layer of this.layers) {\n            const layerClassName = layer.getClassName();\n            const layerConfig = layer.getConfig();\n            const filteredInboundNodes = [];\n            for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                const node = layer.inboundNodes[originalNodeIndex];\n                const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                let kwargs = {};\n                if (this.containerNodes.has(nodeKey)) {\n                    // The node is relevant to the model:\n                    // add to filteredInboundNodes.\n                    if (node.callArgs) {\n                        try {\n                            JSON.stringify(node.callArgs);\n                            kwargs = node.callArgs;\n                        }\n                        catch (err) {\n                            console.warn(`Layer ${layer.name} was passed ` +\n                                `non-serializable keyword arguments: ` +\n                                `${node.callArgs}. They will not be included ` +\n                                `in the serialized model (and thus will be ` +\n                                `missing at deserialization time).`);\n                            kwargs = {};\n                        }\n                    }\n                    if (node.inboundLayers.length > 0) {\n                        const nodeData = [];\n                        for (let i = 0; i < node.inboundLayers.length; i++) {\n                            const inboundLayer = node.inboundLayers[i];\n                            const nodeIndex = node.nodeIndices[i];\n                            const tensorIndex = node.tensorIndices[i];\n                            const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);\n                            let newNodeIndex = nodeConversionMap[nodeKey];\n                            if (newNodeIndex == null) {\n                                newNodeIndex = 0;\n                            }\n                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n                        }\n                        filteredInboundNodes.push(nodeData);\n                    }\n                }\n            }\n            const dict = {};\n            dict['name'] = layer.name;\n            dict['className'] = layerClassName;\n            dict['config'] = layerConfig;\n            dict['inboundNodes'] = filteredInboundNodes;\n            layerConfigs.push(dict);\n        }\n        config['layers'] = layerConfigs;\n        // Gather info about inputs and outputs\n        const modelInputs = [];\n        for (let i = 0; i < this.inputLayers.length; i++) {\n            const layer = this.inputLayers[i];\n            const nodeIndex = this.inputLayersNodeIndices[i];\n            const nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            let newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            const tensorIndex = this.inputLayersTensorIndices[i];\n            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['inputLayers'] = modelInputs;\n        const modelOutputs = [];\n        for (let i = 0; i < this.outputLayers.length; i++) {\n            const layer = this.outputLayers[i];\n            const nodeIndex = this.outputLayersNodeIndices[i];\n            const nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            let newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            const tensorIndex = this.outputLayersTensorIndices[i];\n            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['outputLayers'] = modelOutputs;\n        return config;\n    }\n    /**\n     * Instantiates a LayersModel from its config (output of `get_config()`).\n     * @param cls the class to create\n     * @param config LayersModel config dictionary.\n     * @param customObjects An optional dictionary of custom objects.\n     * @param fastWeightInit Optional flag to use fast weight initialization\n     *   during deserialization. This is applicable to cases in which\n     *   the initialization will be immediately overwritten by loaded weight\n     *   values. Default: `false`.\n     * @returns A LayersModel instance.\n     * @throws ValueError: In case of improperly formatted config dict.\n     */\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n        // Layer instances created during\n        // the graph reconstruction process\n        const createdLayers = {};\n        // Dictionary mapping layer instances to\n        // node data that specifies a layer call.\n        // It acts as a queue that maintains any unprocessed\n        // layer call until it becomes possible to process it\n        // (i.e. until the input tensors to the call all exist).\n        const unprocessedNodes = {};\n        function addUnprocessedNode(layer, nodeData) {\n            if (!(layer.name in unprocessedNodes)) {\n                unprocessedNodes[layer.name] = [nodeData];\n            }\n            else {\n                unprocessedNodes[layer.name].push(nodeData);\n            }\n        }\n        function processNode(layer, nodeData) {\n            const inputTensors = [];\n            let kwargs;\n            for (const inputData of nodeData) {\n                const inboundLayerName = inputData[0];\n                const inboundNodeIndex = inputData[1];\n                const inboundTensorIndex = inputData[2];\n                kwargs = inputData[3] == null ?\n                    {} :\n                    inputData[3];\n                if (!(inboundLayerName in createdLayers)) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                const inboundLayer = createdLayers[inboundLayerName];\n                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n            }\n            // Call layer on its inputs, thus creating the node\n            // and building the layer if needed.\n            // Note: This has Eager vs Graph Implications.\n            if (inputTensors.length > 0) {\n                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs); // was ** kwargs\n            }\n        }\n        /**\n         * Deserialize a layer, then call it on appropriate inputs.\n         * @param layerData: layer config dict.\n         * @throws ValueError: In case of improperly formatted `layer_data`\n         * dict.\n         */\n        function processLayer(layerData) {\n            const layerName = layerData['name'];\n            // Instantiate layer.\n            const layer = deserializeLayer(layerData, config['customObjects'] != null ?\n                config['customObjects'] :\n                {});\n            layer.setFastWeightInitDuringBuild(fastWeightInit);\n            createdLayers[layerName] = layer;\n            // Gather layer inputs.\n            const inboundNodesData = layerData['inboundNodes'];\n            inboundNodesData.forEach(nodeData => {\n                if (!(nodeData instanceof Array)) {\n                    throw new ValueError(`Corrupted configuration, expected array for nodeData: ${nodeData}`);\n                }\n                // We don't process nodes (i.e. make layer calls)\n                // on the fly because the inbound node may not yet exist,\n                // in case of layer shared at different topological depths\n                // (e.g.a model such as A(B(A(B(x)))))\n                addUnprocessedNode(layer, nodeData);\n            });\n        }\n        // First, we create all layers and enqueue nodes to be processed.\n        const name = config['name'];\n        const layersFromConfig = config['layers'];\n        for (const layerData of layersFromConfig) {\n            processLayer(layerData);\n        }\n        // Then we process nodes in order of layer depth.\n        // Nodes that cannot yet be processed(if the inbound node\n        // does not yet exist) are re - enqueued, and the process\n        // is repeated until all nodes are processed.\n        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n            for (const layerData of layersFromConfig) {\n                const layer = createdLayers[layerData['name']];\n                if (layer.name in unprocessedNodes) {\n                    const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n                    delete unprocessedNodes[layer.name];\n                    for (const nodeData of currentUnprocessedNodesForLayer) {\n                        processNode(layer, nodeData);\n                    }\n                }\n            }\n        }\n        const inputTensors = [];\n        const outputTensors = [];\n        const inputLayersFromConfig = config['inputLayers'];\n        for (const layerData of inputLayersFromConfig) {\n            const layerName = layerData[0];\n            const nodeIndex = layerData[1];\n            const tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            const layer = createdLayers[layerName];\n            const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            inputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        const outputLayersFromConfig = config['outputLayers'];\n        for (const layerData of outputLayersFromConfig) {\n            const layerName = layerData[0];\n            const nodeIndex = layerData[1];\n            const tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            const layer = createdLayers[layerName];\n            const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            outputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        return new cls({ inputs: inputTensors, outputs: outputTensors, name });\n    }\n    /**\n     * Determine whether the container is stateful.\n     *\n     * Porting Note: this is the equivalent of the stateful @property of\n     *   the Container class in PyKeras.\n     */\n    get stateful() {\n        // Porting Note: This check is to prevent inadvertent setting of the\n        //   _stateful property of the Container instance.\n        if (this._stateful) {\n            throw new ValueError('Container instance unexpectedly has _stateful = true. The ' +\n                'statefulness of a Container is determined by the Layers it ' +\n                'contains. Its _stateful property must remain the default false.');\n        }\n        for (const layer of this.layers) {\n            if (layer.stateful) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Reset the state of all stateful constituent layers (if any).\n     *\n     * Examples of stateful layers include RNN layers whose `stateful` property\n     * is set as `true`.\n     */\n    resetStates() {\n        tidy(() => {\n            this.layers.forEach(layer => {\n                // tslint:disable:no-any\n                if (layer.stateful) {\n                    layer.resetStates();\n                }\n                // tslint:enable:no-any\n            });\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["Container","constructor","args","super","this","containerNodes","Set","name","prefix","getClassName","toLowerCase","supportsMasking","trainable_","Array","isArray","inputs","slice","outputs","length","map","x","console","warn","inputLayers","inputLayersNodeIndices","inputLayersTensorIndices","outputLayers","outputLayersNodeIndices","outputLayersTensorIndices","layers","internalContainerRefs","layer","sourceLayer","nodeIndex","tensorIndex","push","inputNames","outputNames","feedInputShapes","feedInputNames","feedOutputNames","i","TypeError","batchInputShape","internalInputShapes","shape","internalOutputShapes","nodesDepths","nodeIDToNode","layersDepths","layerIDToLayer","layerIndices","nodesInDecreasingDepth","buildMapOfGraph","tensor","finishedNodes","nodesInProgress","node","inboundNodes","indexOf","add","nodeKey","id","Object","keys","numInboundLayers","inboundLayers","inputTensors","nodeIndices","tensorIndices","splice","reversedNodesInDecreasingDepth","reverse","depth","previousDepth","outboundLayer","Math","max","inboundLayer","inboundNode","nodesByDepth","nodeID","layersByDepth","layerID","depthKeys","parseInt","sort","layersForDepth","a","b","aIndex","bIndex","computableTensors","layersWithCompleteInput","outputTensors","allNames","numOccurrences","filter","JSON","stringify","outboundNodes","inputMasks","outputMasks","inputShapes","outputShapes","built","_refCount","assertNotDisposed","Error","dispose","result","refCountAfterDispose","numDisposedVariables","container","trainable","forEach","_trainableWeights","w","trainableWeights","weights","concat","nonTrainableWeights","loadWeights","strict","nameToWeight","totalWeightsCount","modelIsKerasSavedModelFormat","key","split","isNaN","isKerasSavedModelFormat","parseWeights","index","weight","entries","parsedName","join","originalName","weightValueTuples","validatedName","tokens","unsetNames","listParts","list","newKey","str","startsWith","includes","updatedConfig","theConfig","getConfig","modelConfig","toJSON","unused","returnString","call","kwargs","tidy","feedDict","computeMask","mask","masks","runInternalGraph","computeOutputShape","inputShape","layersToOutputShapes","nodes","j","outputShape","outputShapeKeys","shapeKey","tensorMap","y","referenceInputTensors","referenceOutputTensors","computedData","computedTensors","computedMasks","callArgs","computedTensor","computedMask","activityRegularizer","buildNodeConversionMap","nodeConversionMap","keptNodes","originalNodeIndex","has","getLayer","nameOrIndex","findLayer","calculateLosses","losses","config","layerConfigs","layerClassName","layerConfig","filteredInboundNodes","err","nodeData","newNodeIndex","dict","modelInputs","modelOutputs","fromConfig","cls","customObjects","fastWeightInit","createdLayers","unprocessedNodes","addUnprocessedNode","processNode","inputData","inboundLayerName","inboundNodeIndex","inboundTensorIndex","apply","processLayer","layerData","layerName","setFastWeightInitDuringBuild","layersFromConfig","currentUnprocessedNodesForLayer","inputLayersFromConfig","layerOutputTensors","outputLayersFromConfig","stateful","_stateful","resetStates"],"sourceRoot":""}